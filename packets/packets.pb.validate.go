// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: packets/packets.proto

package packets

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ResultMultiError, or nil if none found.
func (m *Result) ValidateAll() error {
	return m.validate(true)
}

func (m *Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Imei

	// no validation rules for Type

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResultValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResultValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResultValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Response

	// no validation rules for Answer

	// no validation rules for Payload

	if len(errors) > 0 {
		return ResultMultiError(errors)
	}

	return nil
}

// ResultMultiError is an error wrapping multiple validation errors returned by
// Result.ValidateAll() if the designated constraints aren't met.
type ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResultMultiError) AllErrors() []error { return m }

// ResultValidationError is the validation error returned by Result.Validate if
// the designated constraints aren't met.
type ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultValidationError) ErrorName() string { return "ResultValidationError" }

// Error satisfies the builtin error interface
func (e ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResultValidationError{}

// Validate checks the field values on Task with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskMultiError, or nil if none found.
func (m *Task) ValidateAll() error {
	return m.validate(true)
}

func (m *Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDevice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Device",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDevice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "Device",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPacket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Packet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Packet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPacket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "Packet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TaskMultiError(errors)
	}

	return nil
}

// TaskMultiError is an error wrapping multiple validation errors returned by
// Task.ValidateAll() if the designated constraints aren't met.
type TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskMultiError) AllErrors() []error { return m }

// TaskValidationError is the validation error returned by Task.Validate if the
// designated constraints aren't met.
type TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskValidationError) ErrorName() string { return "TaskValidationError" }

// Error satisfies the builtin error interface
func (e TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskValidationError{}

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Client) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClientMultiError, or nil if none found.
func (m *Client) ValidateAll() error {
	return m.validate(true)
}

func (m *Client) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ip

	// no validation rules for Port

	// no validation rules for ServerIp

	// no validation rules for ServerPort

	if len(errors) > 0 {
		return ClientMultiError(errors)
	}

	return nil
}

// ClientMultiError is an error wrapping multiple validation errors returned by
// Client.ValidateAll() if the designated constraints aren't met.
type ClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientMultiError) AllErrors() []error { return m }

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceId

	if all {
		switch v := interface{}(m.GetReceived()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Received",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Received",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceived()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Received",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPacket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Packet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Packet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPacket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Packet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on Packet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Packet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Packet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PacketMultiError, or nil if none found.
func (m *Packet) ValidateAll() error {
	return m.validate(true)
}

func (m *Packet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Imei

	if all {
		switch v := interface{}(m.GetDatetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PacketValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PacketValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDatetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PacketValidationError{
				field:  "Datetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Latitude

	// no validation rules for Longitude

	// no validation rules for Altitude

	// no validation rules for Angle

	// no validation rules for Speed

	if all {
		switch v := interface{}(m.GetCompact()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PacketValidationError{
					field:  "Compact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PacketValidationError{
					field:  "Compact",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PacketValidationError{
				field:  "Compact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Satellite != nil {
		// no validation rules for Satellite
	}

	if m.Ignition != nil {
		// no validation rules for Ignition
	}

	if m.Mileage != nil {
		// no validation rules for Mileage
	}

	if len(errors) > 0 {
		return PacketMultiError(errors)
	}

	return nil
}

// PacketMultiError is an error wrapping multiple validation errors returned by
// Packet.ValidateAll() if the designated constraints aren't met.
type PacketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PacketMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PacketMultiError) AllErrors() []error { return m }

// PacketValidationError is the validation error returned by Packet.Validate if
// the designated constraints aren't met.
type PacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketValidationError) ErrorName() string { return "PacketValidationError" }

// Error satisfies the builtin error interface
func (e PacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketValidationError{}

// Validate checks the field values on Compact with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Compact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Compact with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CompactMultiError, or nil if none found.
func (m *Compact) ValidateAll() error {
	return m.validate(true)
}

func (m *Compact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GeoFence

	if m.Movement != nil {
		// no validation rules for Movement
	}

	if m.DataMode != nil {
		// no validation rules for DataMode
	}

	if m.GsmSignal != nil {
		// no validation rules for GsmSignal
	}

	if m.SleepMode != nil {
		// no validation rules for SleepMode
	}

	if m.GnssStatus != nil {
		// no validation rules for GnssStatus
	}

	if m.GnssPdop != nil {
		// no validation rules for GnssPdop
	}

	if m.GnssHdop != nil {
		// no validation rules for GnssHdop
	}

	if m.ExternalVoltage != nil {
		// no validation rules for ExternalVoltage
	}

	if m.Speed != nil {
		// no validation rules for Speed
	}

	if m.GsmCellId != nil {
		// no validation rules for GsmCellId
	}

	if m.GsmAreaCode != nil {
		// no validation rules for GsmAreaCode
	}

	if m.BatteryVoltage != nil {
		// no validation rules for BatteryVoltage
	}

	if m.BatteryCurrent != nil {
		// no validation rules for BatteryCurrent
	}

	if m.ActiveGsmOperator != nil {
		// no validation rules for ActiveGsmOperator
	}

	if m.TripOdometer != nil {
		// no validation rules for TripOdometer
	}

	if m.TotalOdometer != nil {
		// no validation rules for TotalOdometer
	}

	if m.DigitalInput1 != nil {
		// no validation rules for DigitalInput1
	}

	if m.AnalogInput1 != nil {
		// no validation rules for AnalogInput1
	}

	if m.DigitalOutput1 != nil {
		// no validation rules for DigitalOutput1
	}

	if m.FuelUsedGps != nil {
		// no validation rules for FuelUsedGps
	}

	if m.FuelRateGps != nil {
		// no validation rules for FuelRateGps
	}

	if m.AxisX != nil {
		// no validation rules for AxisX
	}

	if m.AxisY != nil {
		// no validation rules for AxisY
	}

	if m.AxisZ != nil {
		// no validation rules for AxisZ
	}

	if m.Iccid1 != nil {
		// no validation rules for Iccid1
	}

	if m.SdStatus != nil {
		// no validation rules for SdStatus
	}

	if m.DigitalInput2 != nil {
		// no validation rules for DigitalInput2
	}

	if m.DigitalInput3 != nil {
		// no validation rules for DigitalInput3
	}

	if m.AnalogInput2 != nil {
		// no validation rules for AnalogInput2
	}

	if m.DigitalOutput2 != nil {
		// no validation rules for DigitalOutput2
	}

	if m.DallasTemperature1 != nil {
		// no validation rules for DallasTemperature1
	}

	if m.DallasTemperature2 != nil {
		// no validation rules for DallasTemperature2
	}

	if m.DallasTemperature3 != nil {
		// no validation rules for DallasTemperature3
	}

	if m.DallasTemperature4 != nil {
		// no validation rules for DallasTemperature4
	}

	if m.DallasTemperatureId1 != nil {
		// no validation rules for DallasTemperatureId1
	}

	if m.DallasTemperatureId2 != nil {
		// no validation rules for DallasTemperatureId2
	}

	if m.DallasTemperatureId3 != nil {
		// no validation rules for DallasTemperatureId3
	}

	if m.DallasTemperatureId4 != nil {
		// no validation rules for DallasTemperatureId4
	}

	if m.Ibutton != nil {
		// no validation rules for Ibutton
	}

	if m.Rfid != nil {
		// no validation rules for Rfid
	}

	if m.Lls1FuelLevel != nil {
		// no validation rules for Lls1FuelLevel
	}

	if m.Lls1Temperature != nil {
		// no validation rules for Lls1Temperature
	}

	if m.Lls2FuelLevel != nil {
		// no validation rules for Lls2FuelLevel
	}

	if m.Lls2Temperature != nil {
		// no validation rules for Lls2Temperature
	}

	if m.Lls3FuelLevel != nil {
		// no validation rules for Lls3FuelLevel
	}

	if m.Lls3Temperature != nil {
		// no validation rules for Lls3Temperature
	}

	if m.Lls4FuelLevel != nil {
		// no validation rules for Lls4FuelLevel
	}

	if m.Lls4Temperature != nil {
		// no validation rules for Lls4Temperature
	}

	if m.Lls5FuelLevel != nil {
		// no validation rules for Lls5FuelLevel
	}

	if m.Lls5Temperature != nil {
		// no validation rules for Lls5Temperature
	}

	if m.EcoScore != nil {
		// no validation rules for EcoScore
	}

	if m.BatteryLevel != nil {
		// no validation rules for BatteryLevel
	}

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.NetworkType != nil {
		// no validation rules for NetworkType
	}

	if m.PulseCounterDin1 != nil {
		// no validation rules for PulseCounterDin1
	}

	if m.PulseCounterDin2 != nil {
		// no validation rules for PulseCounterDin2
	}

	if m.BtStatus != nil {
		// no validation rules for BtStatus
	}

	if m.BarcodeId != nil {
		// no validation rules for BarcodeId
	}

	if m.InstantMovement != nil {
		// no validation rules for InstantMovement
	}

	if m.Ul202_02SensorFuelLevel != nil {
		// no validation rules for Ul202_02SensorFuelLevel
	}

	if m.Ul202_02SensorStatus != nil {
		// no validation rules for Ul202_02SensorStatus
	}

	if m.DigitalOutput3 != nil {
		// no validation rules for DigitalOutput3
	}

	if m.GroundSense != nil {
		// no validation rules for GroundSense
	}

	if m.Iso6709Coordinates != nil {
		// no validation rules for Iso6709Coordinates
	}

	if m.UmtsLteCellId != nil {
		// no validation rules for UmtsLteCellId
	}

	if m.DriverName != nil {
		// no validation rules for DriverName
	}

	if m.DriverCardLicenseType != nil {
		// no validation rules for DriverCardLicenseType
	}

	if m.DriverGender != nil {
		// no validation rules for DriverGender
	}

	if m.DriverCardId != nil {
		// no validation rules for DriverCardId
	}

	if m.DriverCardExpirationDate != nil {
		// no validation rules for DriverCardExpirationDate
	}

	if m.DriverCardPlaceOfIssue != nil {
		// no validation rules for DriverCardPlaceOfIssue
	}

	if m.DriverStatusEvent != nil {
		// no validation rules for DriverStatusEvent
	}

	if m.AinSpeed != nil {
		// no validation rules for AinSpeed
	}

	if m.Msp500VendorName != nil {
		// no validation rules for Msp500VendorName
	}

	if m.Msp500VehicleNumber != nil {
		// no validation rules for Msp500VehicleNumber
	}

	if m.Msp500SpeedSensor != nil {
		// no validation rules for Msp500SpeedSensor
	}

	if m.WakeReason != nil {
		// no validation rules for WakeReason
	}

	if m.EyeTemperature1 != nil {
		// no validation rules for EyeTemperature1
	}

	if m.EyeTemperature2 != nil {
		// no validation rules for EyeTemperature2
	}

	if m.EyeTemperature3 != nil {
		// no validation rules for EyeTemperature3
	}

	if m.EyeTemperature4 != nil {
		// no validation rules for EyeTemperature4
	}

	if m.EyeHumidity1 != nil {
		// no validation rules for EyeHumidity1
	}

	if m.EyeHumidity2 != nil {
		// no validation rules for EyeHumidity2
	}

	if m.EyeHumidity3 != nil {
		// no validation rules for EyeHumidity3
	}

	if m.EyeHumidity4 != nil {
		// no validation rules for EyeHumidity4
	}

	if m.EyeMagnet1 != nil {
		// no validation rules for EyeMagnet1
	}

	if m.EyeMagnet2 != nil {
		// no validation rules for EyeMagnet2
	}

	if m.EyeMagnet3 != nil {
		// no validation rules for EyeMagnet3
	}

	if m.EyeMagnet4 != nil {
		// no validation rules for EyeMagnet4
	}

	if m.EyeMovement1 != nil {
		// no validation rules for EyeMovement1
	}

	if m.EyeMovement2 != nil {
		// no validation rules for EyeMovement2
	}

	if m.EyeMovement3 != nil {
		// no validation rules for EyeMovement3
	}

	if m.EyeMovement4 != nil {
		// no validation rules for EyeMovement4
	}

	if m.EyePitch1 != nil {
		// no validation rules for EyePitch1
	}

	if m.EyePitch2 != nil {
		// no validation rules for EyePitch2
	}

	if m.EyePitch3 != nil {
		// no validation rules for EyePitch3
	}

	if m.EyePitch4 != nil {
		// no validation rules for EyePitch4
	}

	if m.EyeLowBattery1 != nil {
		// no validation rules for EyeLowBattery1
	}

	if m.EyeLowBattery2 != nil {
		// no validation rules for EyeLowBattery2
	}

	if m.EyeLowBattery3 != nil {
		// no validation rules for EyeLowBattery3
	}

	if m.EyeLowBattery4 != nil {
		// no validation rules for EyeLowBattery4
	}

	if m.EyeBatteryVoltage1 != nil {
		// no validation rules for EyeBatteryVoltage1
	}

	if m.EyeBatteryVoltage2 != nil {
		// no validation rules for EyeBatteryVoltage2
	}

	if m.EyeBatteryVoltage3 != nil {
		// no validation rules for EyeBatteryVoltage3
	}

	if m.EyeBatteryVoltage4 != nil {
		// no validation rules for EyeBatteryVoltage4
	}

	if m.EyeRoll1 != nil {
		// no validation rules for EyeRoll1
	}

	if m.EyeRoll2 != nil {
		// no validation rules for EyeRoll2
	}

	if m.EyeRoll3 != nil {
		// no validation rules for EyeRoll3
	}

	if m.EyeRoll4 != nil {
		// no validation rules for EyeRoll4
	}

	if m.EyeMovementCount1 != nil {
		// no validation rules for EyeMovementCount1
	}

	if m.EyeMovementCount2 != nil {
		// no validation rules for EyeMovementCount2
	}

	if m.EyeMovementCount3 != nil {
		// no validation rules for EyeMovementCount3
	}

	if m.EyeMovementCount4 != nil {
		// no validation rules for EyeMovementCount4
	}

	if m.EyeMagnetCount1 != nil {
		// no validation rules for EyeMagnetCount1
	}

	if m.EyeMagnetCount2 != nil {
		// no validation rules for EyeMagnetCount2
	}

	if m.EyeMagnetCount3 != nil {
		// no validation rules for EyeMagnetCount3
	}

	if m.EyeMagnetCount4 != nil {
		// no validation rules for EyeMagnetCount4
	}

	if m.IsfCloggedBrakeSystemFilterIndicator != nil {
		// no validation rules for IsfCloggedBrakeSystemFilterIndicator
	}

	if m.IsfLowWasherFluidLevelIndicator != nil {
		// no validation rules for IsfLowWasherFluidLevelIndicator
	}

	if m.IsfLowAdblueLevelIndicator != nil {
		// no validation rules for IsfLowAdblueLevelIndicator
	}

	if m.IsfLowTrailerTyrePressureIndicator != nil {
		// no validation rules for IsfLowTrailerTyrePressureIndicator
	}

	if m.IsfWearOfTrailerBrakeLiningIndicator != nil {
		// no validation rules for IsfWearOfTrailerBrakeLiningIndicator
	}

	if m.IsfHighTrailerBrakeTemperatureIndicator != nil {
		// no validation rules for IsfHighTrailerBrakeTemperatureIndicator
	}

	if m.IsfIncorrectTrailerPneumaticSupplyIndicator != nil {
		// no validation rules for IsfIncorrectTrailerPneumaticSupplyIndicator
	}

	if m.IsfLowCngLevelIndicator != nil {
		// no validation rules for IsfLowCngLevelIndicator
	}

	if m.AsfRightJoystickMovedRightActive != nil {
		// no validation rules for AsfRightJoystickMovedRightActive
	}

	if m.AsfRightJoystickMovedLeftActive != nil {
		// no validation rules for AsfRightJoystickMovedLeftActive
	}

	if m.AsfRightJoystickMovedForwardActive != nil {
		// no validation rules for AsfRightJoystickMovedForwardActive
	}

	if m.AsfRightJoystickMovedBackActive != nil {
		// no validation rules for AsfRightJoystickMovedBackActive
	}

	if m.AsfLeftJoystickMovedRightActive != nil {
		// no validation rules for AsfLeftJoystickMovedRightActive
	}

	if m.AsfLeftJoystickMovedLeftActive != nil {
		// no validation rules for AsfLeftJoystickMovedLeftActive
	}

	if m.AsfLeftJoystickMovedForwardActive != nil {
		// no validation rules for AsfLeftJoystickMovedForwardActive
	}

	if m.AsfLeftJoystickMovedBackActive != nil {
		// no validation rules for AsfLeftJoystickMovedBackActive
	}

	if m.AsfFirstRearHydraulic != nil {
		// no validation rules for AsfFirstRearHydraulic
	}

	if m.AsfSecondRearHydraulic != nil {
		// no validation rules for AsfSecondRearHydraulic
	}

	if m.AsfThirdRearHydraulic != nil {
		// no validation rules for AsfThirdRearHydraulic
	}

	if m.AsfFourthRearHydraulic != nil {
		// no validation rules for AsfFourthRearHydraulic
	}

	if m.AsfFirstFrontHydraulic != nil {
		// no validation rules for AsfFirstFrontHydraulic
	}

	if m.AsfSecondFrontHydraulic != nil {
		// no validation rules for AsfSecondFrontHydraulic
	}

	if m.AsfThirdFrontHydraulic != nil {
		// no validation rules for AsfThirdFrontHydraulic
	}

	if m.AsfFourthFrontHydraulic != nil {
		// no validation rules for AsfFourthFrontHydraulic
	}

	if m.AsfFrontThreePointHitch != nil {
		// no validation rules for AsfFrontThreePointHitch
	}

	if m.AsfRearThreePointHitch != nil {
		// no validation rules for AsfRearThreePointHitch
	}

	if m.AsfFrontPowerTakeOff != nil {
		// no validation rules for AsfFrontPowerTakeOff
	}

	if m.AsfRearPowerTakeOff != nil {
		// no validation rules for AsfRearPowerTakeOff
	}

	if m.AsfMowingActive != nil {
		// no validation rules for AsfMowingActive
	}

	if m.AsfThreshingActive != nil {
		// no validation rules for AsfThreshingActive
	}

	if m.AsfGrainReleaseFromHopper != nil {
		// no validation rules for AsfGrainReleaseFromHopper
	}

	if m.AsfGrainTankIs100Full != nil {
		// no validation rules for AsfGrainTankIs100Full
	}

	if m.AsfGrainTankIs70Full != nil {
		// no validation rules for AsfGrainTankIs70Full
	}

	if m.AsfGrainTankIsOpened != nil {
		// no validation rules for AsfGrainTankIsOpened
	}

	if m.AsfUnloaderDrive != nil {
		// no validation rules for AsfUnloaderDrive
	}

	if m.AsfCleaningFanControlTurnedOff != nil {
		// no validation rules for AsfCleaningFanControlTurnedOff
	}

	if m.AsfThreshingDrumControlTurnedOff != nil {
		// no validation rules for AsfThreshingDrumControlTurnedOff
	}

	if m.AsfStrawWalkerIsClogged != nil {
		// no validation rules for AsfStrawWalkerIsClogged
	}

	if m.AsfExcessiveClearanceUnderTheThreshingDrum != nil {
		// no validation rules for AsfExcessiveClearanceUnderTheThreshingDrum
	}

	if m.AsfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades != nil {
		// no validation rules for AsfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades
	}

	if m.AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades != nil {
		// no validation rules for AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades
	}

	if m.AsfEarAugerSpeedBelowTheNorm != nil {
		// no validation rules for AsfEarAugerSpeedBelowTheNorm
	}

	if m.AsfGrainAugerSpeedBelowTheNorm != nil {
		// no validation rules for AsfGrainAugerSpeedBelowTheNorm
	}

	if m.AsfStrawChooperSpeedBelowTheNorm != nil {
		// no validation rules for AsfStrawChooperSpeedBelowTheNorm
	}

	if m.AsfStrawShakerSpeedBelowTheNorm != nil {
		// no validation rules for AsfStrawShakerSpeedBelowTheNorm
	}

	if m.AsfFeederSpeedBelowTheNorm != nil {
		// no validation rules for AsfFeederSpeedBelowTheNorm
	}

	if m.AsfStrawChopperSwitchedOn != nil {
		// no validation rules for AsfStrawChopperSwitchedOn
	}

	if m.AsfCornHeaderConnected != nil {
		// no validation rules for AsfCornHeaderConnected
	}

	if m.AsfGrainHeaderConnected != nil {
		// no validation rules for AsfGrainHeaderConnected
	}

	if m.AsfFeederReverseSwitchedOn != nil {
		// no validation rules for AsfFeederReverseSwitchedOn
	}

	if m.AsfThePressureFilterOfTheHydraulicPumpIsClogged != nil {
		// no validation rules for AsfThePressureFilterOfTheHydraulicPumpIsClogged
	}

	if m.AsfAdapterPressureFilterSensor != nil {
		// no validation rules for AsfAdapterPressureFilterSensor
	}

	if m.AsfService2RequiredIndicator != nil {
		// no validation rules for AsfService2RequiredIndicator
	}

	if m.AsfDrainFilterCloggedIndicator != nil {
		// no validation rules for AsfDrainFilterCloggedIndicator
	}

	if m.AsfSection1Spraying != nil {
		// no validation rules for AsfSection1Spraying
	}

	if m.AsfSection2Spraying != nil {
		// no validation rules for AsfSection2Spraying
	}

	if m.AsfSection3Spraying != nil {
		// no validation rules for AsfSection3Spraying
	}

	if m.AsfSection4Spraying != nil {
		// no validation rules for AsfSection4Spraying
	}

	if m.AsfSection5Spraying != nil {
		// no validation rules for AsfSection5Spraying
	}

	if m.AsfSection6Spraying != nil {
		// no validation rules for AsfSection6Spraying
	}

	if m.AsfSection7Spraying != nil {
		// no validation rules for AsfSection7Spraying
	}

	if m.AsfSection8Spraying != nil {
		// no validation rules for AsfSection8Spraying
	}

	if m.AsfSection9Spraying != nil {
		// no validation rules for AsfSection9Spraying
	}

	if m.UsfSpreading != nil {
		// no validation rules for UsfSpreading
	}

	if m.UsfPouringChemicals != nil {
		// no validation rules for UsfPouringChemicals
	}

	if m.UsfConveyorBelt != nil {
		// no validation rules for UsfConveyorBelt
	}

	if m.UsfSaltSpreadersDriveWheel != nil {
		// no validation rules for UsfSaltSpreadersDriveWheel
	}

	if m.UsfBrushes != nil {
		// no validation rules for UsfBrushes
	}

	if m.UsfVacuumCleaner != nil {
		// no validation rules for UsfVacuumCleaner
	}

	if m.UsfWaterSupply != nil {
		// no validation rules for UsfWaterSupply
	}

	if m.UsfLiquidPump != nil {
		// no validation rules for UsfLiquidPump
	}

	if m.UsfUnloadingFromTheHopper != nil {
		// no validation rules for UsfUnloadingFromTheHopper
	}

	if m.UsfLowSaltSandLevelInContainerIndicator != nil {
		// no validation rules for UsfLowSaltSandLevelInContainerIndicator
	}

	if m.UsfLowWaterLevelInContainerIndicator != nil {
		// no validation rules for UsfLowWaterLevelInContainerIndicator
	}

	if m.UsfChemicals != nil {
		// no validation rules for UsfChemicals
	}

	if m.UsfCompressor != nil {
		// no validation rules for UsfCompressor
	}

	if m.UsfWaterValveIsOpened != nil {
		// no validation rules for UsfWaterValveIsOpened
	}

	if m.UsfCabinMovedUpStatusActive != nil {
		// no validation rules for UsfCabinMovedUpStatusActive
	}

	if m.UsfCabinMovedDownStatusActive != nil {
		// no validation rules for UsfCabinMovedDownStatusActive
	}

	if m.UsfHydraulicsWorkNotPermitted != nil {
		// no validation rules for UsfHydraulicsWorkNotPermitted
	}

	if m.CisfSection1PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection1PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection1Filled != nil {
		// no validation rules for CisfSection1Filled
	}

	if m.CisfSection1Overfilled != nil {
		// no validation rules for CisfSection1Overfilled
	}

	if m.CisfSection2PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection2PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection2Filled != nil {
		// no validation rules for CisfSection2Filled
	}

	if m.CisfSection2Overfilled != nil {
		// no validation rules for CisfSection2Overfilled
	}

	if m.CisfSection3PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection3PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection3Filled != nil {
		// no validation rules for CisfSection3Filled
	}

	if m.CisfSection3Overfilled != nil {
		// no validation rules for CisfSection3Overfilled
	}

	if m.CisfSection4PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection4PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection4Filled != nil {
		// no validation rules for CisfSection4Filled
	}

	if m.CisfSection4Overfilled != nil {
		// no validation rules for CisfSection4Overfilled
	}

	if m.CisfSection5PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection5PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection5Filled != nil {
		// no validation rules for CisfSection5Filled
	}

	if m.CisfSection5Overfilled != nil {
		// no validation rules for CisfSection5Overfilled
	}

	if m.CisfSection6PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection6PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection6Filled != nil {
		// no validation rules for CisfSection6Filled
	}

	if m.CisfSection6Overfilled != nil {
		// no validation rules for CisfSection6Overfilled
	}

	if m.CisfSection7PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection7PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection7Filled != nil {
		// no validation rules for CisfSection7Filled
	}

	if m.CisfSection7Overfilled != nil {
		// no validation rules for CisfSection7Overfilled
	}

	if m.CisfSection8PresenceOfFluidInTheDownpipe != nil {
		// no validation rules for CisfSection8PresenceOfFluidInTheDownpipe
	}

	if m.CisfSection8Filled != nil {
		// no validation rules for CisfSection8Filled
	}

	if m.CisfSection8Overfilled != nil {
		// no validation rules for CisfSection8Overfilled
	}

	if m.DistanceToNextService != nil {
		// no validation rules for DistanceToNextService
	}

	if m.CngLevelKg != nil {
		// no validation rules for CngLevelKg
	}

	if m.DistanceFromNeedOfService != nil {
		// no validation rules for DistanceFromNeedOfService
	}

	if m.DistanceFromLastService != nil {
		// no validation rules for DistanceFromLastService
	}

	if m.TimeToNextService != nil {
		// no validation rules for TimeToNextService
	}

	if m.TimeFromNeedOfService != nil {
		// no validation rules for TimeFromNeedOfService
	}

	if m.TimeFromLastSerivce != nil {
		// no validation rules for TimeFromLastSerivce
	}

	if m.DistanceToNextOilService != nil {
		// no validation rules for DistanceToNextOilService
	}

	if m.TimeToNextOilService != nil {
		// no validation rules for TimeToNextOilService
	}

	if m.LvcanVehicleRange != nil {
		// no validation rules for LvcanVehicleRange
	}

	if m.LvcanTotalCngCounted != nil {
		// no validation rules for LvcanTotalCngCounted
	}

	if m.TotalBaleCount != nil {
		// no validation rules for TotalBaleCount
	}

	if m.BaleCount != nil {
		// no validation rules for BaleCount
	}

	if m.CutBaleCount != nil {
		// no validation rules for CutBaleCount
	}

	if m.BaleSlices != nil {
		// no validation rules for BaleSlices
	}

	if m.LvcanMaxroadspeed != nil {
		// no validation rules for LvcanMaxroadspeed
	}

	if m.LvcanExceededroadspeed != nil {
		// no validation rules for LvcanExceededroadspeed
	}

	if m.LvcanRsfSpeedlimitsign != nil {
		// no validation rules for LvcanRsfSpeedlimitsign
	}

	if m.LvcanRsfEndOfSpeedLimitsign != nil {
		// no validation rules for LvcanRsfEndOfSpeedLimitsign
	}

	if m.LvcanRsfSpeedExceeded != nil {
		// no validation rules for LvcanRsfSpeedExceeded
	}

	if m.LvcanRsfTimeSpeedLimitsign != nil {
		// no validation rules for LvcanRsfTimeSpeedLimitsign
	}

	if m.LvcanRsfWthrSpeedLimitSign != nil {
		// no validation rules for LvcanRsfWthrSpeedLimitSign
	}

	if m.AxlCalibrationStatus != nil {
		// no validation rules for AxlCalibrationStatus
	}

	if m.BleRfid1 != nil {
		// no validation rules for BleRfid1
	}

	if m.BleRfid2 != nil {
		// no validation rules for BleRfid2
	}

	if m.BleRfid3 != nil {
		// no validation rules for BleRfid3
	}

	if m.BleRfid4 != nil {
		// no validation rules for BleRfid4
	}

	if m.BleButton1State1 != nil {
		// no validation rules for BleButton1State1
	}

	if m.BleButton1State2 != nil {
		// no validation rules for BleButton1State2
	}

	if m.BleButton1State3 != nil {
		// no validation rules for BleButton1State3
	}

	if m.BleButton1State4 != nil {
		// no validation rules for BleButton1State4
	}

	if m.BleButton2State1 != nil {
		// no validation rules for BleButton2State1
	}

	if m.BleButton2State2 != nil {
		// no validation rules for BleButton2State2
	}

	if m.BleButton2State3 != nil {
		// no validation rules for BleButton2State3
	}

	if m.BleButton2State4 != nil {
		// no validation rules for BleButton2State4
	}

	if m.FrequencyDin1 != nil {
		// no validation rules for FrequencyDin1
	}

	if m.FrequencyDin2 != nil {
		// no validation rules for FrequencyDin2
	}

	if m.ConnectivityQuality != nil {
		// no validation rules for ConnectivityQuality
	}

	if m.AutoGeofence != nil {
		// no validation rules for AutoGeofence
	}

	if m.Trip != nil {
		// no validation rules for Trip
	}

	if m.OverSpeeding != nil {
		// no validation rules for OverSpeeding
	}

	if m.CrashTraceData != nil {
		// no validation rules for CrashTraceData
	}

	if m.BloodAlcoholContent != nil {
		// no validation rules for BloodAlcoholContent
	}

	if m.Idling != nil {
		// no validation rules for Idling
	}

	if m.GreenDrivingType != nil {
		// no validation rules for GreenDrivingType
	}

	if m.Towing != nil {
		// no validation rules for Towing
	}

	if m.Unplug != nil {
		// no validation rules for Unplug
	}

	if m.CrashDetection != nil {
		// no validation rules for CrashDetection
	}

	if m.Immobilizer != nil {
		// no validation rules for Immobilizer
	}

	if m.GreenDrivingValue != nil {
		// no validation rules for GreenDrivingValue
	}

	if m.Jamming != nil {
		// no validation rules for Jamming
	}

	if m.Iccid2 != nil {
		// no validation rules for Iccid2
	}

	if m.GreenDrivingEventDuration != nil {
		// no validation rules for GreenDrivingEventDuration
	}

	if m.Alarm != nil {
		// no validation rules for Alarm
	}

	if m.EcoMaximum != nil {
		// no validation rules for EcoMaximum
	}

	if m.EcoAverage != nil {
		// no validation rules for EcoAverage
	}

	if m.EcoDuration != nil {
		// no validation rules for EcoDuration
	}

	if m.DrivingState != nil {
		// no validation rules for DrivingState
	}

	if m.DrivingRecords != nil {
		// no validation rules for DrivingRecords
	}

	if m.CrashEventCounter != nil {
		// no validation rules for CrashEventCounter
	}

	if m.GnssJamming != nil {
		// no validation rules for GnssJamming
	}

	if m.PrivateMode != nil {
		// no validation rules for PrivateMode
	}

	if m.IgnitionOnCounter != nil {
		// no validation rules for IgnitionOnCounter
	}

	if m.MotorcycleFallDetection != nil {
		// no validation rules for MotorcycleFallDetection
	}

	if m.Vin != nil {
		// no validation rules for Vin
	}

	if m.NumberOfDtc != nil {
		// no validation rules for NumberOfDtc
	}

	if m.EngineLoad != nil {
		// no validation rules for EngineLoad
	}

	if m.CoolantTemperature != nil {
		// no validation rules for CoolantTemperature
	}

	if m.ShortFuelTrim != nil {
		// no validation rules for ShortFuelTrim
	}

	if m.FuelPressure != nil {
		// no validation rules for FuelPressure
	}

	if m.IntakeMap != nil {
		// no validation rules for IntakeMap
	}

	if m.EngineRpm != nil {
		// no validation rules for EngineRpm
	}

	if m.VehicleSpeed != nil {
		// no validation rules for VehicleSpeed
	}

	if m.TimingAdvance != nil {
		// no validation rules for TimingAdvance
	}

	if m.IntakeAirTemperature != nil {
		// no validation rules for IntakeAirTemperature
	}

	if m.Maf != nil {
		// no validation rules for Maf
	}

	if m.ThrottlePosition != nil {
		// no validation rules for ThrottlePosition
	}

	if m.RuntimeSinceEngineStart != nil {
		// no validation rules for RuntimeSinceEngineStart
	}

	if m.DistanceTraveledMilOn != nil {
		// no validation rules for DistanceTraveledMilOn
	}

	if m.RelativeFuelRailPressure != nil {
		// no validation rules for RelativeFuelRailPressure
	}

	if m.DirectFuelRailPressure != nil {
		// no validation rules for DirectFuelRailPressure
	}

	if m.CommandedEgr != nil {
		// no validation rules for CommandedEgr
	}

	if m.EgrError != nil {
		// no validation rules for EgrError
	}

	if m.FuelLevelPercent != nil {
		// no validation rules for FuelLevelPercent
	}

	if m.DistanceSinceCodesClear != nil {
		// no validation rules for DistanceSinceCodesClear
	}

	if m.BarometricPressure != nil {
		// no validation rules for BarometricPressure
	}

	if m.ControlModuleVoltage != nil {
		// no validation rules for ControlModuleVoltage
	}

	if m.AbsoluteLoadValue != nil {
		// no validation rules for AbsoluteLoadValue
	}

	if m.FuelType != nil {
		// no validation rules for FuelType
	}

	if m.AmbientAirTemperature != nil {
		// no validation rules for AmbientAirTemperature
	}

	if m.TimeRunWithMilOn != nil {
		// no validation rules for TimeRunWithMilOn
	}

	if m.TimeSinceCodesCleared != nil {
		// no validation rules for TimeSinceCodesCleared
	}

	if m.AbsoluteFuelRailPressure != nil {
		// no validation rules for AbsoluteFuelRailPressure
	}

	if m.HybridBatteryPackLife != nil {
		// no validation rules for HybridBatteryPackLife
	}

	if m.EngineOilTemperature != nil {
		// no validation rules for EngineOilTemperature
	}

	if m.FuelInjectionTiming != nil {
		// no validation rules for FuelInjectionTiming
	}

	if m.ThrottlePositionGroup != nil {
		// no validation rules for ThrottlePositionGroup
	}

	if m.CommandedEquivalenceR != nil {
		// no validation rules for CommandedEquivalenceR
	}

	if m.IntakeMap2Bytes != nil {
		// no validation rules for IntakeMap2Bytes
	}

	if m.HybridSystemVoltage != nil {
		// no validation rules for HybridSystemVoltage
	}

	if m.HybridSystemCurrent != nil {
		// no validation rules for HybridSystemCurrent
	}

	if m.FaultCodes != nil {
		// no validation rules for FaultCodes
	}

	if m.FuelRate != nil {
		// no validation rules for FuelRate
	}

	if m.ObdOemTotalMileage != nil {
		// no validation rules for ObdOemTotalMileage
	}

	if m.ObdOemFuelLevel != nil {
		// no validation rules for ObdOemFuelLevel
	}

	if m.OemDistanceUntilService != nil {
		// no validation rules for OemDistanceUntilService
	}

	if m.OemBatteryChargeState != nil {
		// no validation rules for OemBatteryChargeState
	}

	if m.OemBatteryChargeLevel != nil {
		// no validation rules for OemBatteryChargeLevel
	}

	if m.OemRemainingDistance != nil {
		// no validation rules for OemRemainingDistance
	}

	if m.OemBatteryStateOfHealth != nil {
		// no validation rules for OemBatteryStateOfHealth
	}

	if m.OemBatteryTemperature != nil {
		// no validation rules for OemBatteryTemperature
	}

	if m.Beacon != nil {
		// no validation rules for Beacon
	}

	if m.AdvancedBleBeaconData != nil {
		// no validation rules for AdvancedBleBeaconData
	}

	if m.BleTemperature1 != nil {
		// no validation rules for BleTemperature1
	}

	if m.BleTemperature2 != nil {
		// no validation rules for BleTemperature2
	}

	if m.BleTemperature3 != nil {
		// no validation rules for BleTemperature3
	}

	if m.BleTemperature4 != nil {
		// no validation rules for BleTemperature4
	}

	if m.BleBattery1 != nil {
		// no validation rules for BleBattery1
	}

	if m.BleBattery2 != nil {
		// no validation rules for BleBattery2
	}

	if m.BleBattery3 != nil {
		// no validation rules for BleBattery3
	}

	if m.BleBattery4 != nil {
		// no validation rules for BleBattery4
	}

	if m.BleHumidity1 != nil {
		// no validation rules for BleHumidity1
	}

	if m.BleHumidity2 != nil {
		// no validation rules for BleHumidity2
	}

	if m.BleHumidity3 != nil {
		// no validation rules for BleHumidity3
	}

	if m.BleHumidity4 != nil {
		// no validation rules for BleHumidity4
	}

	if m.BleFuelLevel1 != nil {
		// no validation rules for BleFuelLevel1
	}

	if m.BleFuelLevel2 != nil {
		// no validation rules for BleFuelLevel2
	}

	if m.BleFuelLevel3 != nil {
		// no validation rules for BleFuelLevel3
	}

	if m.BleFuelLevel4 != nil {
		// no validation rules for BleFuelLevel4
	}

	if m.BleFuelFrequency1 != nil {
		// no validation rules for BleFuelFrequency1
	}

	if m.BleFuelFrequency2 != nil {
		// no validation rules for BleFuelFrequency2
	}

	if m.BleFuelFrequency3 != nil {
		// no validation rules for BleFuelFrequency3
	}

	if m.BleFuelFrequency4 != nil {
		// no validation rules for BleFuelFrequency4
	}

	if m.BleLuminosity1 != nil {
		// no validation rules for BleLuminosity1
	}

	if m.BleLuminosity2 != nil {
		// no validation rules for BleLuminosity2
	}

	if m.BleLuminosity3 != nil {
		// no validation rules for BleLuminosity3
	}

	if m.BleLuminosity4 != nil {
		// no validation rules for BleLuminosity4
	}

	if m.Ble1Custom1 != nil {
		// no validation rules for Ble1Custom1
	}

	if m.Ble1Custom2 != nil {
		// no validation rules for Ble1Custom2
	}

	if m.Ble1Custom3 != nil {
		// no validation rules for Ble1Custom3
	}

	if m.Ble1Custom4 != nil {
		// no validation rules for Ble1Custom4
	}

	if m.Ble1Custom5 != nil {
		// no validation rules for Ble1Custom5
	}

	if m.Ble2Custom1 != nil {
		// no validation rules for Ble2Custom1
	}

	if m.Ble2Custom2 != nil {
		// no validation rules for Ble2Custom2
	}

	if m.Ble2Custom3 != nil {
		// no validation rules for Ble2Custom3
	}

	if m.Ble2Custom4 != nil {
		// no validation rules for Ble2Custom4
	}

	if m.Ble2Custom5 != nil {
		// no validation rules for Ble2Custom5
	}

	if m.Ble3Custom1 != nil {
		// no validation rules for Ble3Custom1
	}

	if m.Ble3Custom2 != nil {
		// no validation rules for Ble3Custom2
	}

	if m.Ble3Custom3 != nil {
		// no validation rules for Ble3Custom3
	}

	if m.Ble3Custom4 != nil {
		// no validation rules for Ble3Custom4
	}

	if m.Ble3Custom5 != nil {
		// no validation rules for Ble3Custom5
	}

	if m.Ble4Custom1 != nil {
		// no validation rules for Ble4Custom1
	}

	if m.Ble4Custom2 != nil {
		// no validation rules for Ble4Custom2
	}

	if m.Ble4Custom3 != nil {
		// no validation rules for Ble4Custom3
	}

	if m.Ble4Custom4 != nil {
		// no validation rules for Ble4Custom4
	}

	if m.Ble4Custom5 != nil {
		// no validation rules for Ble4Custom5
	}

	if m.AcceleratorPedalPosition != nil {
		// no validation rules for AcceleratorPedalPosition
	}

	if m.FuelConsumed != nil {
		// no validation rules for FuelConsumed
	}

	if m.FuelLevelLiters != nil {
		// no validation rules for FuelLevelLiters
	}

	if m.TotalMileage != nil {
		// no validation rules for TotalMileage
	}

	if m.ProgramNumber != nil {
		// no validation rules for ProgramNumber
	}

	if m.ModuleId8B != nil {
		// no validation rules for ModuleId8B
	}

	if m.ModuleId17B != nil {
		// no validation rules for ModuleId17B
	}

	if m.EngineWorktime != nil {
		// no validation rules for EngineWorktime
	}

	if m.EngineWorktimeCounted != nil {
		// no validation rules for EngineWorktimeCounted
	}

	if m.TotalMileageCounted != nil {
		// no validation rules for TotalMileageCounted
	}

	if m.FuelConsumedCounted != nil {
		// no validation rules for FuelConsumedCounted
	}

	if m.AdblueLevelPercent != nil {
		// no validation rules for AdblueLevelPercent
	}

	if m.AdblueLevelLiters != nil {
		// no validation rules for AdblueLevelLiters
	}

	if m.Axle1Load != nil {
		// no validation rules for Axle1Load
	}

	if m.Axle2Load != nil {
		// no validation rules for Axle2Load
	}

	if m.Axle3Load != nil {
		// no validation rules for Axle3Load
	}

	if m.Axle4Load != nil {
		// no validation rules for Axle4Load
	}

	if m.Axle5Load != nil {
		// no validation rules for Axle5Load
	}

	if m.ControlStateFlags != nil {
		// no validation rules for ControlStateFlags
	}

	if m.AgriculturalMachineryFlags != nil {
		// no validation rules for AgriculturalMachineryFlags
	}

	if m.HarvestingTime != nil {
		// no validation rules for HarvestingTime
	}

	if m.AreaOfHarvest != nil {
		// no validation rules for AreaOfHarvest
	}

	if m.MowingEfficiency != nil {
		// no validation rules for MowingEfficiency
	}

	if m.GrainMownVolume != nil {
		// no validation rules for GrainMownVolume
	}

	if m.GrainMoisture != nil {
		// no validation rules for GrainMoisture
	}

	if m.HarvestingDrumRpm != nil {
		// no validation rules for HarvestingDrumRpm
	}

	if m.GapUnderHarvestingDrum != nil {
		// no validation rules for GapUnderHarvestingDrum
	}

	if m.SecurityStateFlags != nil {
		// no validation rules for SecurityStateFlags
	}

	if m.TachographTotalVehicleDistance != nil {
		// no validation rules for TachographTotalVehicleDistance
	}

	if m.TripDistance != nil {
		// no validation rules for TripDistance
	}

	if m.TachographVehicleSpeed != nil {
		// no validation rules for TachographVehicleSpeed
	}

	if m.TachoDriverCardPresence != nil {
		// no validation rules for TachoDriverCardPresence
	}

	if m.Driver1States != nil {
		// no validation rules for Driver1States
	}

	if m.Driver2States != nil {
		// no validation rules for Driver2States
	}

	if m.Driver1ContinuousDrivingTime != nil {
		// no validation rules for Driver1ContinuousDrivingTime
	}

	if m.Driver2ContinuousDrivingTime != nil {
		// no validation rules for Driver2ContinuousDrivingTime
	}

	if m.Driver1CumulativeTime != nil {
		// no validation rules for Driver1CumulativeTime
	}

	if m.Driver2CumulativeTime != nil {
		// no validation rules for Driver2CumulativeTime
	}

	if m.Driver1SelectedActivityDuration != nil {
		// no validation rules for Driver1SelectedActivityDuration
	}

	if m.Driver2SelectedActivityDuration != nil {
		// no validation rules for Driver2SelectedActivityDuration
	}

	if m.Driver1CumulativeDrivingTime != nil {
		// no validation rules for Driver1CumulativeDrivingTime
	}

	if m.Driver2CumulativeDrivingTime != nil {
		// no validation rules for Driver2CumulativeDrivingTime
	}

	if m.Driver1IdHigh != nil {
		// no validation rules for Driver1IdHigh
	}

	if m.Driver1IdLow != nil {
		// no validation rules for Driver1IdLow
	}

	if m.Driver2IdHigh != nil {
		// no validation rules for Driver2IdHigh
	}

	if m.Driver2IdLow != nil {
		// no validation rules for Driver2IdLow
	}

	if m.BatteryTemperature != nil {
		// no validation rules for BatteryTemperature
	}

	if m.HvBatteryLevel != nil {
		// no validation rules for HvBatteryLevel
	}

	if m.DtcFaults != nil {
		// no validation rules for DtcFaults
	}

	if m.SlopeOfArm != nil {
		// no validation rules for SlopeOfArm
	}

	if m.RotationOfArm != nil {
		// no validation rules for RotationOfArm
	}

	if m.EjectOfArm != nil {
		// no validation rules for EjectOfArm
	}

	if m.HorizontalDistanceArmVehicle != nil {
		// no validation rules for HorizontalDistanceArmVehicle
	}

	if m.HeightArmAboveGround != nil {
		// no validation rules for HeightArmAboveGround
	}

	if m.DrillRpm != nil {
		// no validation rules for DrillRpm
	}

	if m.AmountOfSpreadSaltSquareMeter != nil {
		// no validation rules for AmountOfSpreadSaltSquareMeter
	}

	if m.AmountOfSpreadFineGrainedSalt != nil {
		// no validation rules for AmountOfSpreadFineGrainedSalt
	}

	if m.AmountOfCoarseGrainedSalt != nil {
		// no validation rules for AmountOfCoarseGrainedSalt
	}

	if m.AmountOfSpreadDimix != nil {
		// no validation rules for AmountOfSpreadDimix
	}

	if m.AmountOfSpreadCoarseGrainedCalcium != nil {
		// no validation rules for AmountOfSpreadCoarseGrainedCalcium
	}

	if m.AmountOfSpreadCalciumChloride != nil {
		// no validation rules for AmountOfSpreadCalciumChloride
	}

	if m.AmountOfSpreadSodiumChloride != nil {
		// no validation rules for AmountOfSpreadSodiumChloride
	}

	if m.AmountOfSpreadMagnesiumChloride != nil {
		// no validation rules for AmountOfSpreadMagnesiumChloride
	}

	if m.AmountOfSpreadGravel != nil {
		// no validation rules for AmountOfSpreadGravel
	}

	if m.AmountOfSpreadSand != nil {
		// no validation rules for AmountOfSpreadSand
	}

	if m.WidthPouringLeft != nil {
		// no validation rules for WidthPouringLeft
	}

	if m.WidthPouringRight != nil {
		// no validation rules for WidthPouringRight
	}

	if m.SaltSpreaderWorkingHours != nil {
		// no validation rules for SaltSpreaderWorkingHours
	}

	if m.DistanceDuringSalting != nil {
		// no validation rules for DistanceDuringSalting
	}

	if m.LoadWeight != nil {
		// no validation rules for LoadWeight
	}

	if m.RetarderLoad != nil {
		// no validation rules for RetarderLoad
	}

	if m.CruiseTime != nil {
		// no validation rules for CruiseTime
	}

	if m.CngStatus != nil {
		// no validation rules for CngStatus
	}

	if m.CngUsed != nil {
		// no validation rules for CngUsed
	}

	if m.CngLevelPercent != nil {
		// no validation rules for CngLevelPercent
	}

	if m.OilLevel != nil {
		// no validation rules for OilLevel
	}

	if m.VehiclesRangeOnBattery != nil {
		// no validation rules for VehiclesRangeOnBattery
	}

	if m.VehiclesRangeOnAdditionalFuel != nil {
		// no validation rules for VehiclesRangeOnAdditionalFuel
	}

	if m.SecurityStateFlagsP4 != nil {
		// no validation rules for SecurityStateFlagsP4
	}

	if m.ControlStateFlagsP4 != nil {
		// no validation rules for ControlStateFlagsP4
	}

	if m.IndicatorStateFlagsP4 != nil {
		// no validation rules for IndicatorStateFlagsP4
	}

	if m.AgriculturalStateFlagsP4 != nil {
		// no validation rules for AgriculturalStateFlagsP4
	}

	if m.DoorStatus != nil {
		// no validation rules for DoorStatus
	}

	if m.EngineTemperature != nil {
		// no validation rules for EngineTemperature
	}

	if m.UtilityStateFlagsP4 != nil {
		// no validation rules for UtilityStateFlagsP4
	}

	if m.CisternStateFlagsP4 != nil {
		// no validation rules for CisternStateFlagsP4
	}

	if m.LngUsed != nil {
		// no validation rules for LngUsed
	}

	if m.LngUsedCounted != nil {
		// no validation rules for LngUsedCounted
	}

	if m.LngLevelPercent != nil {
		// no validation rules for LngLevelPercent
	}

	if m.LngLevelKg != nil {
		// no validation rules for LngLevelKg
	}

	if m.TotalLpgUsed != nil {
		// no validation rules for TotalLpgUsed
	}

	if m.TotalLpgUsedCounted != nil {
		// no validation rules for TotalLpgUsedCounted
	}

	if m.LpgLevelProc != nil {
		// no validation rules for LpgLevelProc
	}

	if m.LpgLevelLiters != nil {
		// no validation rules for LpgLevelLiters
	}

	if m.SsfIgnition != nil {
		// no validation rules for SsfIgnition
	}

	if m.SsfKeyInIgnitionLock != nil {
		// no validation rules for SsfKeyInIgnitionLock
	}

	if m.SsfWebasto != nil {
		// no validation rules for SsfWebasto
	}

	if m.SsfEngineWorking != nil {
		// no validation rules for SsfEngineWorking
	}

	if m.SsfStandaloneEngine != nil {
		// no validation rules for SsfStandaloneEngine
	}

	if m.SsfReadyToDrive != nil {
		// no validation rules for SsfReadyToDrive
	}

	if m.SsfEngineWorkingOnCng != nil {
		// no validation rules for SsfEngineWorkingOnCng
	}

	if m.SsfWorkMode != nil {
		// no validation rules for SsfWorkMode
	}

	if m.SsfOperator != nil {
		// no validation rules for SsfOperator
	}

	if m.SsfInterlock != nil {
		// no validation rules for SsfInterlock
	}

	if m.SsfEngineLockActive != nil {
		// no validation rules for SsfEngineLockActive
	}

	if m.SsfRequestToLockEngine != nil {
		// no validation rules for SsfRequestToLockEngine
	}

	if m.SsfHandbrakeIsActive != nil {
		// no validation rules for SsfHandbrakeIsActive
	}

	if m.SsfFootbrakeIsActive != nil {
		// no validation rules for SsfFootbrakeIsActive
	}

	if m.SsfClutchPushed != nil {
		// no validation rules for SsfClutchPushed
	}

	if m.SsfHazardWarningLights != nil {
		// no validation rules for SsfHazardWarningLights
	}

	if m.SsfFrontLeftDoorOpen != nil {
		// no validation rules for SsfFrontLeftDoorOpen
	}

	if m.SsfFrontRightDoorOpen != nil {
		// no validation rules for SsfFrontRightDoorOpen
	}

	if m.SsfRearLeftDoorOpen != nil {
		// no validation rules for SsfRearLeftDoorOpen
	}

	if m.SsfRearRightDoorOpen != nil {
		// no validation rules for SsfRearRightDoorOpen
	}

	if m.SsfTrunkDoorOpen != nil {
		// no validation rules for SsfTrunkDoorOpen
	}

	if m.SsfEngineCoverOpen != nil {
		// no validation rules for SsfEngineCoverOpen
	}

	if m.SsfRoofOpen != nil {
		// no validation rules for SsfRoofOpen
	}

	if m.SsfChargingWirePlugged != nil {
		// no validation rules for SsfChargingWirePlugged
	}

	if m.SsfBatteryCharging != nil {
		// no validation rules for SsfBatteryCharging
	}

	if m.SsfElectricEngineState != nil {
		// no validation rules for SsfElectricEngineState
	}

	if m.SsfCarClosedFactoryRemote != nil {
		// no validation rules for SsfCarClosedFactoryRemote
	}

	if m.SsfCarIsClosed != nil {
		// no validation rules for SsfCarIsClosed
	}

	if m.SsfFactoryAlarmActuated != nil {
		// no validation rules for SsfFactoryAlarmActuated
	}

	if m.SsfFactoryAlarmEmulated != nil {
		// no validation rules for SsfFactoryAlarmEmulated
	}

	if m.SsfSignalCloseFactoryRemote != nil {
		// no validation rules for SsfSignalCloseFactoryRemote
	}

	if m.SsfSignalOpenFactoryRemote != nil {
		// no validation rules for SsfSignalOpenFactoryRemote
	}

	if m.SsfRearmingSignal != nil {
		// no validation rules for SsfRearmingSignal
	}

	if m.SsfTrunkDoorOpenedFactoryRemote != nil {
		// no validation rules for SsfTrunkDoorOpenedFactoryRemote
	}

	if m.SsfCanModuleInSleep != nil {
		// no validation rules for SsfCanModuleInSleep
	}

	if m.SsfFactoryRemote3X != nil {
		// no validation rules for SsfFactoryRemote3X
	}

	if m.SsfFactoryArmed != nil {
		// no validation rules for SsfFactoryArmed
	}

	if m.SsfParkingGearActive != nil {
		// no validation rules for SsfParkingGearActive
	}

	if m.SsfReverseGearActive != nil {
		// no validation rules for SsfReverseGearActive
	}

	if m.SsfNeutralGearActive != nil {
		// no validation rules for SsfNeutralGearActive
	}

	if m.SsfDriveIsActive != nil {
		// no validation rules for SsfDriveIsActive
	}

	if m.SsfEngineWorkingOnDualFuel != nil {
		// no validation rules for SsfEngineWorkingOnDualFuel
	}

	if m.SsfEngineWorkingOnLpg != nil {
		// no validation rules for SsfEngineWorkingOnLpg
	}

	if m.CsfParkingLights != nil {
		// no validation rules for CsfParkingLights
	}

	if m.CsfDippedHeadLights != nil {
		// no validation rules for CsfDippedHeadLights
	}

	if m.CsfFullBeamHeadlights != nil {
		// no validation rules for CsfFullBeamHeadlights
	}

	if m.CsfRearFogLights != nil {
		// no validation rules for CsfRearFogLights
	}

	if m.CsfFrontFogLights != nil {
		// no validation rules for CsfFrontFogLights
	}

	if m.CsfAdditionalFrontLights != nil {
		// no validation rules for CsfAdditionalFrontLights
	}

	if m.CsfAdditionalRearLights != nil {
		// no validation rules for CsfAdditionalRearLights
	}

	if m.CsfLightSignal != nil {
		// no validation rules for CsfLightSignal
	}

	if m.CsfAirConditioning != nil {
		// no validation rules for CsfAirConditioning
	}

	if m.CsfCruiseControl != nil {
		// no validation rules for CsfCruiseControl
	}

	if m.CsfAutomaticRetarder != nil {
		// no validation rules for CsfAutomaticRetarder
	}

	if m.CsfManualRetarder != nil {
		// no validation rules for CsfManualRetarder
	}

	if m.CsfDriversSeatbeltFastened != nil {
		// no validation rules for CsfDriversSeatbeltFastened
	}

	if m.CsfFrontDriversSeatbeltFastened != nil {
		// no validation rules for CsfFrontDriversSeatbeltFastened
	}

	if m.CsfLeftDriversSeatbeltFastened != nil {
		// no validation rules for CsfLeftDriversSeatbeltFastened
	}

	if m.CsfRightDriversSeatbeltFastened != nil {
		// no validation rules for CsfRightDriversSeatbeltFastened
	}

	if m.CsfCentreDriversSeatbeltFastened != nil {
		// no validation rules for CsfCentreDriversSeatbeltFastened
	}

	if m.CsfFrontPassengerPresent != nil {
		// no validation rules for CsfFrontPassengerPresent
	}

	if m.CsfPto != nil {
		// no validation rules for CsfPto
	}

	if m.CsfFrontDifferentialLocked != nil {
		// no validation rules for CsfFrontDifferentialLocked
	}

	if m.CsfRearDifferentialLocked != nil {
		// no validation rules for CsfRearDifferentialLocked
	}

	if m.CsfCentralDifferential4HiLocked != nil {
		// no validation rules for CsfCentralDifferential4HiLocked
	}

	if m.CsfRearDifferential4LoLocked != nil {
		// no validation rules for CsfRearDifferential4LoLocked
	}

	if m.CsfTrailerAxle1LiftActive != nil {
		// no validation rules for CsfTrailerAxle1LiftActive
	}

	if m.CsfTrailerAxle2LiftActive != nil {
		// no validation rules for CsfTrailerAxle2LiftActive
	}

	if m.CsfTrailerConnected != nil {
		// no validation rules for CsfTrailerConnected
	}

	if m.CsfStartStopSystemInactive != nil {
		// no validation rules for CsfStartStopSystemInactive
	}

	if m.IsfCheckEngineIndicator != nil {
		// no validation rules for IsfCheckEngineIndicator
	}

	if m.IsfAbsIndicator != nil {
		// no validation rules for IsfAbsIndicator
	}

	if m.IsfEspIndicator != nil {
		// no validation rules for IsfEspIndicator
	}

	if m.IsfEspTurnedOff != nil {
		// no validation rules for IsfEspTurnedOff
	}

	if m.IsfStopIndicator != nil {
		// no validation rules for IsfStopIndicator
	}

	if m.IsfOilLevelIndicator != nil {
		// no validation rules for IsfOilLevelIndicator
	}

	if m.IsfCoolantLiquidLevel != nil {
		// no validation rules for IsfCoolantLiquidLevel
	}

	if m.IsfBatteryNotChargingIndicator != nil {
		// no validation rules for IsfBatteryNotChargingIndicator
	}

	if m.IsfHandbrakeSystemIndicator != nil {
		// no validation rules for IsfHandbrakeSystemIndicator
	}

	if m.IsfAirbagIndicator != nil {
		// no validation rules for IsfAirbagIndicator
	}

	if m.IsfEpsIndicator != nil {
		// no validation rules for IsfEpsIndicator
	}

	if m.IsfWarningIndicator != nil {
		// no validation rules for IsfWarningIndicator
	}

	if m.IsfLightsFailureIndicator != nil {
		// no validation rules for IsfLightsFailureIndicator
	}

	if m.IsfLowTirePressureIndicator != nil {
		// no validation rules for IsfLowTirePressureIndicator
	}

	if m.IsfWearOfBrakePadsIndicator != nil {
		// no validation rules for IsfWearOfBrakePadsIndicator
	}

	if m.IsfLowFuelLevelIndicator != nil {
		// no validation rules for IsfLowFuelLevelIndicator
	}

	if m.IsfMaintenanceRequiredIndicator != nil {
		// no validation rules for IsfMaintenanceRequiredIndicator
	}

	if m.IsfGlowPlugIndicator != nil {
		// no validation rules for IsfGlowPlugIndicator
	}

	if m.IsfFapIndicator != nil {
		// no validation rules for IsfFapIndicator
	}

	if m.IsfEpcIndicator != nil {
		// no validation rules for IsfEpcIndicator
	}

	if m.IsfCloggedEngineOilFilterIndicator != nil {
		// no validation rules for IsfCloggedEngineOilFilterIndicator
	}

	if m.IsfLowEngineOilPressureIndicator != nil {
		// no validation rules for IsfLowEngineOilPressureIndicator
	}

	if m.IsfTooHighEngineOilTemperatureIndicator != nil {
		// no validation rules for IsfTooHighEngineOilTemperatureIndicator
	}

	if m.IsfLowCoolantLevelIndicator != nil {
		// no validation rules for IsfLowCoolantLevelIndicator
	}

	if m.IsfCloggedHydraulicSystemOilFilterIndicator != nil {
		// no validation rules for IsfCloggedHydraulicSystemOilFilterIndicator
	}

	if m.IsfHydraulicSystemLowPressureIndicator != nil {
		// no validation rules for IsfHydraulicSystemLowPressureIndicator
	}

	if m.IsfHydraulicOilLowLevelIndicator != nil {
		// no validation rules for IsfHydraulicOilLowLevelIndicator
	}

	if m.IsfHydraulicSystemHighTemperatureIndicator != nil {
		// no validation rules for IsfHydraulicSystemHighTemperatureIndicator
	}

	if m.IsfOilOverflowInHydraulicChamberIndicator != nil {
		// no validation rules for IsfOilOverflowInHydraulicChamberIndicator
	}

	if m.IsfCloggedAirFilterIndicator != nil {
		// no validation rules for IsfCloggedAirFilterIndicator
	}

	if m.IsfCloggedFuelFilterIndicator != nil {
		// no validation rules for IsfCloggedFuelFilterIndicator
	}

	if m.IsfWaterInFuelIndicator != nil {
		// no validation rules for IsfWaterInFuelIndicator
	}

	if m.AsfGrainTankIs100PercentFull != nil {
		// no validation rules for AsfGrainTankIs100PercentFull
	}

	if m.AsfGrainTankIs70PercentFull != nil {
		// no validation rules for AsfGrainTankIs70PercentFull
	}

	if m.AsfStrawChopperSpeedBelowTheNorm != nil {
		// no validation rules for AsfStrawChopperSpeedBelowTheNorm
	}

	if m.UsfSpreading2 != nil {
		// no validation rules for UsfSpreading2
	}

	if m.OperatorCode != nil {
		// no validation rules for OperatorCode
	}

	if m.Temperature != nil {
		// no validation rules for Temperature
	}

	if len(errors) > 0 {
		return CompactMultiError(errors)
	}

	return nil
}

// CompactMultiError is an error wrapping multiple validation errors returned
// by Compact.ValidateAll() if the designated constraints aren't met.
type CompactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompactMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompactMultiError) AllErrors() []error { return m }

// CompactValidationError is the validation error returned by Compact.Validate
// if the designated constraints aren't met.
type CompactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompactValidationError) ErrorName() string { return "CompactValidationError" }

// Error satisfies the builtin error interface
func (e CompactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompactValidationError{}
