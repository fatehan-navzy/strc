syntax = "proto3";

package com.navzy.packets;

import "google/protobuf/timestamp.proto";
import "devices/devices.proto";

option go_package = "github.com/fatehan-navzy/strc/packets";

option java_package = "com.fatehan.navzy.packets";
option java_multiple_files = true;

message Result {
  enum PacketType {
    FAILED = 0;
    AUTHORIZE = 1;
    DATA = 2;
    HEARTBEAT = 3;
    ANSWER = 4;
    CUSTOM = 5;
  }
  uint64 imei = 1 [json_name = "imei"];
  PacketType Type = 2 [json_name = "packet_type"];
  repeated Packet data = 3 [json_name = "data"];
  bytes response = 4 [json_name = "response"];
  bytes answer = 5 [json_name = "answer"];
  bytes payload = 6 [json_name = "payload"];
}

message Task {
  com.navzy.devices.Device device = 1 [json_name = 'devices'];
  Packet packet = 2 [json_name = "packet"];
  Client client = 3 [json_name = "client"];
}

message Client {
  string ip = 1 [json_name = "ip"];
  uint32 port = 2 [json_name = "port"];
  string server_ip = 3 [json_name = "server_ip"];
  uint32 server_port = 4 [json_name = "server_port"];
}

message Data {
  string device_id = 1 [json_name = "device_id"];
  google.protobuf.Timestamp received = 2 [json_name = "received"];
  Packet packet = 3 [json_name = "packet"];
}

message Packet { 
  uint64 imei = 1 [json_name = "device_id"];
  google.protobuf.Timestamp datetime = 2 [json_name = "datetime"];
  float latitude = 3 [json_name = "latitude"];
  float longitude = 4 [json_name = "longitude"];
  uint32 altitude = 5 [json_name = "altitude"];
  uint32 angle = 6 [json_name = "angle"];
  uint32 speed = 7 [json_name = "speed"];
  optional uint32 satellite = 8 [json_name = "satellite"];
  optional bool ignition = 9 [json_name = "ignition"];
  optional uint64 mileage = 10 [json_name = "mileage"];
  Compact compact = 11 [json_name = 'compact'];
  repeated Event events = 12 [json_name = "alerts"];
}

message Compact {
    // Parameter ID: 240
    // Property Name: Movement
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 – Movement Off, 1 – Movement On
    optional bool movement = 2;
  
    // Parameter ID: 80
    // Property Name: Data Mode
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 5
    // Multiplier: -
    // Units: -
    // Values: 0 – Home On Stop, 1 – Home On Moving, 2 – Roaming On Stop, 3 – Roaming On Moving, 4 – Unknown On Stop, 5 – Unknown On Moving
    optional uint32 data_mode = 3;
  
    // Parameter ID: 21
    // Property Name: GSM Signal
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 5
    // Multiplier: -
    // Units: -
    // Values: Value in range 1-5 Explanation
    optional uint32 gsm_signal = 4;
  
    // Parameter ID: 200
    // Property Name: Sleep Mode
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 4
    // Multiplier: -
    // Units: -
    // Values: 0 - No Sleep, 1 – GPS Sleep, 2 – Deep Sleep, 3 – Online Sleep, 4 - Ultra Sleep
    optional uint32 sleep_mode = 5;
  
    // Parameter ID: 69
    // Property Name: GNSS Status
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 3
    // Multiplier: -
    // Units: -
    // Values: 0 - GNSS OFF, 1 – GNSS ON with fix, 2 - GNSS ON without fix, 3 - GNSS sleep
    optional uint32 gnss_status = 6;
  
    // Parameter ID: 181
    // Property Name: GNSS PDOP
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 500
    // Multiplier: 0.1
    // Units: 
    // Values: Coefficient, calculation formula
    optional uint32 gnss_pdop = 7;
  
    // Parameter ID: 182
    // Property Name: GNSS HDOP
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 500
    // Multiplier: 0.1
    // Units: 
    // Values: Coefficient, calculation formula
    optional uint32 gnss_hdop = 8;
  
    // Parameter ID: 66
    // Property Name: External Voltage
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 0.001
    // Units: V
    // Values: Voltage
    optional uint32 external_voltage = 9;
  
    // Parameter ID: 24
    // Property Name: Speed
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 350
    // Multiplier: -
    // Units: km/h
    // Values: GNSS Speed
    optional uint32 speed = 10;
  
    // Parameter ID: 205
    // Property Name: GSM Cell ID
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: -
    // Values: GSM base station ID
    optional uint32 gsm_cell_id = 11;
  
    // Parameter ID: 206
    // Property Name: GSM Area Code
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: -
    // Values: Location Area code (LAC), it depends on GSM operator. It provides unique number which assigned to a set of base GSM stations.
    optional uint32 gsm_area_code = 12;
  
    // Parameter ID: 67
    // Property Name: Battery Voltage
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 0.001
    // Units: V
    // Values: Voltage
    optional uint32 battery_voltage = 13;
  
    // Parameter ID: 68
    // Property Name: Battery Current
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 0.001
    // Units: A
    // Values: Current
    optional uint32 battery_current = 14;
  
    // Parameter ID: 241
    // Property Name: Active GSM Operator
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: -
    // Values: Currently used GSM Operator code
    optional uint32 active_gsm_operator = 15;

    // Parameter ID: 199
    // Property Name: Trip Odometer
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 2147483647
    // Multiplier: -
    // Units: m
    // Values: Trip Odometer value
    optional uint32 trip_odometer = 16;
  
    // Parameter ID: 16
    // Property Name: Total Odometer
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 2147483647
    // Multiplier: -
    // Units: -
    // Values: Total Odometer value in meters
    optional uint64 total_odometer = 17;
  
    // Parameter ID: 1
    // Property Name: Digital Input 1
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1
    optional bool digital_input1 = 18;
  
    // Parameter ID: 9
    // Property Name: Analog Input 1
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 0.001
    // Units: V
    // Values: Voltage
    optional uint32 analog_input1 = 19;
  
    // Parameter ID: 179
    // Property Name: Digital Output 1
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1
    optional bool digital_output1 = 20;
  
    // Parameter ID: 12
    // Property Name: Fuel Used GPS
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: 0.001
    // Units: l
    // Values: Fuel Used
    optional uint32 fuel_used_gps = 21;
  
    // Parameter ID: 13
    // Property Name: Fuel Rate GPS
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 32767
    // Multiplier: 0.01
    // Units: l/100km
    // Values: Average Fuel Use
    optional uint32 fuel_rate_gps = 22;
  
    // Parameter ID: 17
    // Property Name: Axis X
    // Type: Signed
    // Bytes: 2
    // Min: -8000
    // Max: 8000
    // Multiplier: -
    // Units: mG
    // Values: X axis value
    optional int32 axis_x = 23;
  
    // Parameter ID: 18
    // Property Name: Axis Y
    // Type: Signed
    // Bytes: 2
    // Min: -8000
    // Max: 8000
    // Multiplier: -
    // Units: mG
    // Values: Y axis value
    optional int32 axis_y = 24;
  
    // Parameter ID: 19
    // Property Name: Axis Z
    // Type: Signed
    // Bytes: 2
    // Min: -8000
    // Max: 8000
    // Multiplier: -
    // Units: mG
    // Values: Z axis value
    optional int32 axis_z = 25;
  
    // Parameter ID: 11
    // Property Name: ICCID1
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: Value of SIM ICCID, MSB
    optional uint64 iccid1 = 26;
  
    // Parameter ID: 10
    // Property Name: SD Status
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - not present, 1 - present
    optional bool sd_status = 27;
  
    // Parameter ID: 2
    // Property Name: Digital Input 2
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1
    optional bool digital_input2 = 28;
  
    // Parameter ID: 3
    // Property Name: Digital Input 3
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1
    optional bool digital_input3 = 29;
  
    // Parameter ID: 6
    // Property Name: Analog Input 2
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 0.001
    // Units: V
    // Values: Voltage
    optional uint32 analog_input2 = 30;
  
    // Parameter ID: 180
    // Property Name: Digital Output 2
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic 0/1
    optional bool digital_output2 = 31;
  
    // Parameter ID: 72
    // Property Name: Dallas Temperature 1
    // Type: Signed
    // Bytes: 4
    // Min: -550
    // Max: 1150
    // Multiplier: 0.1
    // Units: °C
    // Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
    optional int32 dallas_temperature1 = 32;
  
    // Parameter ID: 73
    // Property Name: Dallas Temperature 2
    // Type: Signed
    // Bytes: 4
    // Min: -550
    // Max: 1150
    // Multiplier: 0.1
    // Units: °C
    // Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
    optional int32 dallas_temperature2 = 33;
  
    // Parameter ID: 74
    // Property Name: Dallas Temperature 3
    // Type: Signed
    // Bytes: 4
    // Min: -550
    // Max: 1150
    // Multiplier: 0.1
    // Units: °C
    // Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
    optional int32 dallas_temperature3 = 34;
  
    // Parameter ID: 75
    // Property Name: Dallas Temperature 4
    // Type: Signed
    // Bytes: 4
    // Min: -550
    // Max: 1150
    // Multiplier: 0.1
    // Units: °C
    // Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
    optional int32 dallas_temperature4 = 35;
  
    // Parameter ID: 76
    // Property Name: Dallas Temperature ID 1
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: Dallas sensor ID
    optional uint64 dallas_temperature_id1 = 36;
  
    // Parameter ID: 77
    // Property Name: Dallas Temperature ID 2
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: Dallas sensor ID
    optional uint64 dallas_temperature_id2 = 37;
  
    // Parameter ID: 79
    // Property Name: Dallas Temperature ID 3
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: Dallas sensor ID
    optional uint64 dallas_temperature_id3 = 38;
  
    // Parameter ID: 71
    // Property Name: Dallas Temperature ID 4
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: Dallas sensor ID
    optional uint64 dallas_temperature_id4 = 39;
  
    // Parameter ID: 78
    // Property Name: iButton
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: iButton ID
    optional uint64 ibutton = 40;
  
    // Parameter ID: 207
    // Property Name: RFID
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: RFID ID
    optional uint64 rfid = 41;
  
    // Parameter ID: 201
    // Property Name: LLS 1 Fuel Level
    // Type: Signed
    // Bytes: 2
    // Min: -4
    // Max: 32767
    // Multiplier: -
    // Units: kvants or ltr
    // Values: Fuel level measured by LLS sensor via RS232/RS485
    optional int32 lls1_fuel_level = 42;
  
    // Parameter ID: 202
    // Property Name: LLS 1 Temperature
    // Type: Signed
    // Bytes: 1
    // Min: -128
    // Max: 127
    // Multiplier: -
    // Units: °C
    // Values: Fuel temperature measured by LLS via RS232/RS485
    optional int32 lls1_temperature = 43;
  
    // Parameter ID: 203
    // Property Name: LLS 2 Fuel Level
    // Type: Signed
    // Bytes: 2
    // Min: -4
    // Max: 32767
    // Multiplier: -
    // Units: kvants or ltr
    // Values: Fuel level measured by LLS sensor via RS485
    optional int32 lls2_fuel_level = 44;
  
    // Parameter ID: 204
    // Property Name: LLS 2 Temperature
    // Type: Signed
    // Bytes: 1
    // Min: -128
    // Max: 127
    // Multiplier: -
    // Units: °C
    // Values: Fuel temperature measured by LLS via RS485
    optional int32 lls2_temperature = 45;
  
    // Parameter ID: 210
    // Property Name: LLS 3 Fuel Level
    // Type: Unsigned
    // Bytes: 2
    // Min: -4
    // Max: 32767
    // Multiplier: -
    // Units: kvants or ltr
    // Values: Fuel level measured by LLS sensor via RS485
    optional uint32 lls3_fuel_level = 46;
  
    // Parameter ID: 211
    // Property Name: LLS 3 Temperature
    // Type: Signed
    // Bytes: 1
    // Min: -128
    // Max: 127
    // Multiplier: -
    // Units: °C
    // Values: Fuel temperature measured by LLS via RS485
    optional int32 lls3_temperature = 47;
  
    // Parameter ID: 212
    // Property Name: LLS 4 Fuel Level
    // Type: Signed
    // Bytes: 2
    // Min: -4
    // Max: 32767
    // Multiplier: -
    // Units: kvants or ltr
    // Values: Fuel level measured by LLS sensor via RS485
    optional int32 lls4_fuel_level = 48;
  
    // Parameter ID: 213
    // Property Name: LLS 4 Temperature
    // Type: Signed
    // Bytes: 1
    // Min: -128
    // Max: 127
    // Multiplier: -
    // Units: °C
    // Values: Fuel temperature measured by LLS via RS485
    optional int32 lls4_temperature = 49;
  
    // Parameter ID: 214
    // Property Name: LLS 5 Fuel Level
    // Type: Signed
    // Bytes: 2
    // Min: -4
    // Max: 32767
    // Multiplier: -
    // Units: kvants or ltr
    // Values: Fuel level measured by LLS sensor via RS485
    optional int32 lls5_fuel_level = 50;
  
    // Parameter ID: 215
    // Property Name: LLS 5 Temperature
    // Type: Signed
    // Bytes: 1
    // Min: -128
    // Max: 127
    // Multiplier: -
    // Units: °C
    // Values: Fuel temperature measured by LLS via RS485
    optional int32 lls5_temperature = 51;
  
    // Parameter ID: 15
    // Property Name: Eco Score
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 0.01
    // Units: -
    // Values: Average amount of events on some distance
    optional uint32 eco_score = 52;
  
    // Parameter ID: 113
    // Property Name: Battery Level
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 100
    // Multiplier: -
    // Units: %
    // Values: Battery capacity level
    optional uint32 battery_level = 53;
  
    // Parameter ID: 238
    // Property Name: User ID
    // Type: Unsigned
    // Bytes: 8
    // Min: 0
    // Max: 0xffffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: MAC address of NMEA receiver device connected via Bluetooth
    optional uint64 user_id = 54;
  
    // Parameter ID: 237
    // Property Name: Network Type
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - 3G, 1 - GSM, 2 - 4G, 3 - LTE CAT M1, 4 - LTE CAT NB1, 99 - Unknown
    optional uint32 network_type = 55;
  
    // Parameter ID: 4
    // Property Name: Pulse Counter Din1
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: -
    // Values: Counts pulses, count is reset when records are saved
    optional uint32 pulse_counter_din1 = 56;
  
    // Parameter ID: 5
    // Property Name: Pulse Counter Din2
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: -
    // Values: Counts pulses, count is reset when records are saved
    optional uint32 pulse_counter_din2 = 57;
  
    // Parameter ID: 263
    // Property Name: BT Status
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 4
    // Multiplier: -
    // Units: -
    // Values: 0 - BT is disabled, 1 - BT Enabled, not device connected, 2 - Device connected, BTv3 Only, 3 - Device connected, BLE only, 4 - Device connected, BLE + BT
    optional uint32 bt_status = 58;
  
    // Parameter ID: 264
    // Property Name: Barcode ID
    // Type: ASCII
    // Bytes: Variable
    // Min: 0
    // Max: 32
    // Multiplier: -
    // Units: -
    // Values: Barcode ID
    optional string barcode_id = 59;
  
    // Parameter ID: 303
    // Property Name: Instant Movement
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1 returns movement value
    optional bool instant_movement = 60;
  
    // Parameter ID: 327
    // Property Name: UL202-02 Sensor Fuel level
    // Type: Signed
    // Bytes: 2
    // Min: -150
    // Max: 32767
    // Multiplier: 0.1
    // Units: mm
    // Values: UL202-02 Sensor Fuel level
    optional int32 ul202_02_sensor_fuel_level = 61;
  
    // Parameter ID: 483
    // Property Name: UL202-02 Sensor Status
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 255
    // Multiplier: -
    // Units: -
    // Values: UL202-02 sensor status codes
    optional uint32 ul202_02_sensor_status = 62;
  
    // Parameter ID: 380
    // Property Name: Digital output 3
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1
    optional bool digital_output3 = 63;
  
    // Parameter ID: 381
    // Property Name: Ground Sense
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Logic: 0/1
    optional bool ground_sense = 64;
  
    // Parameter ID: 387
    // Property Name: ISO6709 Coordinates
    // Type: HEX
    // Bytes: 34
    // Min: 0
    // Max: 0x7fffffffffffffff
    // Multiplier: -
    // Units: -
    // Values: ISO6709 Coordinates Latitude, Longitude (in Degrees, Minutes and Seconds) and Altitude: IO value format: ±DDMMSS.SSSS±DDDMMSS.SSSS±AAA.AAA/
    optional string iso6709_coordinates = 65;
  
    // Parameter ID: 636
    // Property Name: UMTS/LTE Cell ID
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 0xFFFFFFFF
    // Multiplier: -
    // Units: -
    // Values: 
    optional uint32 umts_lte_cell_id = 66;
  
    // Parameter ID: 403
    // Property Name: Driver Name
    // Type: Unsigned
    // Bytes: 35
    // Min: -
    // Max: -
    // Multiplier: -
    // Units: -
    // Values: Driver name extracted from card, displayed without delimiters ($ signs)
    optional string driver_name = 67;  // Note: Unsigned but seems like string, but per type Unsigned, perhaps treat as uint64 for simplicity, but bytes 35 suggest bytes
  
    // Note: Adjusting for bytes 35, perhaps bytes type
    // But following "Type: Unsigned", using uint64, but may need adjustment
  
    // Parameter ID: 404
    // Property Name: Driver card license type
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 8
    // Multiplier: -
    // Units: -
    // Values: None - 0, B.1 license type - 1, B.2 license type - 2, B.3 license type - 3, B.4 license type - 4, T.1 license type - 5, T.2 license type - 6, T.3 license type - 7, T.4 license type - 8
    optional uint32 driver_card_license_type = 68;
  
    // Parameter ID: 405
    // Property Name: Driver Gender
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 2
    // Multiplier: -
    // Units: -
    // Values: None - 0, Male - 1, Female - 2
    optional uint32 driver_gender = 69;
  
    // Parameter ID: 406
    // Property Name: Driver Card ID
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: -
    // Values: None - 0, Male - 1, Female - 2  // Note: Seems typo in document, values from previous?
    optional uint32 driver_card_id = 70;
  
    // Parameter ID: 407
    // Property Name: Driver Card expiration date
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 9999
    // Multiplier: -
    // Units: -
    // Values: 
    optional uint32 driver_card_expiration_date = 71;
  
    // Parameter ID: 408
    // Property Name: Driver Card place of issue
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: -
    // Values: Extracted from card
    optional uint32 driver_card_place_of_issue = 72;
  
    // Parameter ID: 409
    // Property Name: Driver Status Event
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 2
    // Multiplier: -
    // Units: -
    // Values: Registered - 0, Deregistered - 1, Swapping - 2
    optional uint32 driver_status_event = 73;
  
    // Parameter ID: 329
    // Property Name: AIN Speed
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: -
    // Values: 
    optional uint32 ain_speed = 74;
  
    // Parameter ID: 500
    // Property Name: MSP500 vendor name
    // Type: ASCII
    // Bytes: 40
    // Min: 0
    // Max: 40
    // Multiplier: -
    // Units: -
    // Values: Name of the integrator who installed the device
    optional string msp500_vendor_name = 75;
  
    // Parameter ID: 501
    // Property Name: MSP500 vehicle number
    // Type: ASCII
    // Bytes: 40
    // Min: 0
    // Max: 40
    // Multiplier: -
    // Units: -
    // Values: Vehicle number on which the device is installed
    optional string msp500_vehicle_number = 76;
  
    // Parameter ID: 502
    // Property Name: MSP500 speed sensor
    // Type: unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Status of the speed sensor
    optional bool msp500_speed_sensor = 77;
  
    // Parameter ID: 637
    // Property Name: Wake Reason
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: True if device was woken by RTC alarm
    optional bool wake_reason = 78;
  
    // Parameter ID: 10800
    // Property Name: EYE Temperature 1
    // Type: Signed
    // Bytes: 2
    // Min: -32768
    // Max: 32767
    // Multiplier: 0.01
    // Units: °C
    // Values: Temperature measured by EYE Sensor 1
    optional int32 eye_temperature1 = 79;
  
    // Parameter ID: 10801
    // Property Name: EYE Temperature 2
    // Type: Signed
    // Bytes: 2
    // Min: -32768
    // Max: 32767
    // Multiplier: 0.01
    // Units: °C
    // Values: Temperature measured by EYE Sensor 2
    optional int32 eye_temperature2 = 80;
  
    // Parameter ID: 10802
    // Property Name: EYE Temperature 3
    // Type: Signed
    // Bytes: 2
    // Min: -32768
    // Max: 32767
    // Multiplier: 0.01
    // Units: °C
    // Values: Temperature measured by EYE Sensor 3
    optional int32 eye_temperature3 = 81;
  
    // Parameter ID: 10803
    // Property Name: EYE Temperature 4
    // Type: Signed
    // Bytes: 2
    // Min: -32768
    // Max: 32767
    // Multiplier: 0.01
    // Units: °C
    // Values: Temperature measured by EYE Sensor 4
    optional int32 eye_temperature4 = 82;
  
    // Parameter ID: 10804
    // Property Name: EYE Humidity 1
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 100
    // Multiplier: -
    // Units: %
    // Values: Humidity measured by EYE Sensor 1
    optional uint32 eye_humidity1 = 83;
  
    // Parameter ID: 10805
    // Property Name: EYE Humidity 2
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 100
    // Multiplier: -
    // Units: %
    // Values: Humidity measured by EYE Sensor 2
    optional uint32 eye_humidity2 = 84;
  
    // Parameter ID: 10806
    // Property Name: EYE Humidity 3
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 100
    // Multiplier: -
    // Units: %
    // Values: Humidity measured by EYE Sensor 3
    optional uint32 eye_humidity3 = 85;
  
    // Parameter ID: 10807
    // Property Name: EYE Humidity 4
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 100
    // Multiplier: -
    // Units: %
    // Values: Humidity measured by EYE Sensor 4
    optional uint32 eye_humidity4 = 86;
  
    // Parameter ID: 10808
    // Property Name: EYE Magnet 1
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Magnet measured by EYE Sensor by EYE Sensor 1
    optional bool eye_magnet1 = 87;
  
    // Parameter ID: 10809
    // Property Name: EYE Magnet 2
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Magnet measured by EYE Sensor by EYE Sensor 2
    optional bool eye_magnet2 = 88;
  
    // Parameter ID: 10810
    // Property Name: EYE Magnet 3
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Magnet measured by EYE Sensor by EYE Sensor 3
    optional bool eye_magnet3 = 89;
  
    // Parameter ID: 10811
    // Property Name: EYE Magnet 4
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Magnet measured by EYE Sensor by EYE Sensor 4
    optional bool eye_magnet4 = 90;
  
    // Parameter ID: 10812
    // Property Name: EYE Movement 1
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Movement state measure by EYE Sensor 1
    optional bool eye_movement1 = 91;
    optional bool eye_movement2 = 219;
    optional bool eye_movement3 = 220;
    optional bool eye_movement4 = 221;
    optional int32 eye_pitch1 = 222;
    optional int32 eye_pitch2 = 223;
    optional int32 eye_pitch3 = 224;
    optional int32 eye_pitch4 = 225;
    optional bool eye_low_battery1 = 229;
    optional bool eye_low_battery2 = 226;
    optional bool eye_low_battery3 = 227;
    optional bool eye_low_battery4 = 228;
    optional uint32 eye_battery_voltage1 = 233;
    optional uint32 eye_battery_voltage2 = 230;
    optional uint32 eye_battery_voltage3 = 231;
    optional uint32 eye_battery_voltage4 = 232;
    optional int32 eye_roll1 = 234;
    optional int32 eye_roll2 = 235;
    optional int32 eye_roll3 = 236;
    optional int32 eye_roll4 = 237;
    optional uint32 eye_movement_count1 = 238;
    optional uint32 eye_movement_count2 = 239;
    optional uint32 eye_movement_count3 = 240;
    optional uint32 eye_movement_count4 = 241;
    optional uint32 eye_magnet_count1 = 245;
    optional uint32 eye_magnet_count2 = 242;
    optional uint32 eye_magnet_count3 = 243;
    optional uint32 eye_magnet_count4 = 244;
  
    // Note: The document is truncated, so continuing with available data up to truncation point.
  
    // Parameter ID: 985
    // Property Name: ISF Clogged Brake System Filter Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_clogged_brake_system_filter_indicator = 92;
  
    // Parameter ID: 986
    // Property Name: ISF Low Washer Fluid Level Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_low_washer_fluid_level_indicator = 93;
  
    // Parameter ID: 987
    // Property Name: ISF Low AdBlue Level Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_low_adblue_level_indicator = 94;
  
    // Parameter ID: 988
    // Property Name: ISF Low Trailer Tyre Pressure Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_low_trailer_tyre_pressure_indicator = 95;
  
    // Parameter ID: 989
    // Property Name: ISF Wear Of Trailer Brake Lining Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_wear_of_trailer_brake_lining_indicator = 96;
  
    // Parameter ID: 990
    // Property Name: ISF High Trailer Brake Temperature Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_high_trailer_brake_temperature_indicator = 97;
  
    // Parameter ID: 991
    // Property Name: ISF Incorrect Trailer Pneumatic Supply Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_incorrect_trailer_pneumatic_supply_indicator = 98;
  
    // Parameter ID: 992
    // Property Name: ISF Low CNG Level Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 isf_low_cng_level_indicator = 99;
  
    // Parameter ID: 993
    // Property Name: ASF Right Joystick Moved Right Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_right_joystick_moved_right_active = 100;
  
    // Parameter ID: 994
    // Property Name: ASF Right Joystick Moved Left Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_right_joystick_moved_left_active = 101;
  
    // Parameter ID: 995
    // Property Name: ASF Right Joystick Moved Forward Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_right_joystick_moved_forward_active = 102;
  
    // Parameter ID: 996
    // Property Name: ASF Right Joystick Moved Back Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_right_joystick_moved_back_active = 103;
  
    // Parameter ID: 997
    // Property Name: ASF Left Joystick Moved Right Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_left_joystick_moved_right_active = 104;
  
    // Parameter ID: 998
    // Property Name: ASF Left Joystick Moved Left Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_left_joystick_moved_left_active = 105;
  
    // Parameter ID: 999
    // Property Name: ASF Left Joystick Moved Forward Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_left_joystick_moved_forward_active = 106;
  
    // Parameter ID: 1000
    // Property Name: ASF Left Joystick Moved Back Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_left_joystick_moved_back_active = 107;
  
    // Parameter ID: 1001
    // Property Name: ASF First Rear hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_first_rear_hydraulic = 108;
  
    // Parameter ID: 1002
    // Property Name: ASF Second Rear hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_second_rear_hydraulic = 109;
  
    // Parameter ID: 1003
    // Property Name: ASF Third Rear hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_third_rear_hydraulic = 110;
  
    // Parameter ID: 1004
    // Property Name: ASF Fourth Rear hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_fourth_rear_hydraulic = 111;
  
    // Parameter ID: 1005
    // Property Name: ASF First Front hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_first_front_hydraulic = 112;
  
    // Parameter ID: 1006
    // Property Name: ASF Second Front hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_second_front_hydraulic = 113;
  
    // Parameter ID: 1007
    // Property Name: ASF Third Front hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_third_front_hydraulic = 114;
  
    // Parameter ID: 1008
    // Property Name: ASF Fourth Front hydraulic
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_fourth_front_hydraulic = 115;
  
    // Parameter ID: 1009
    // Property Name: ASF Front Three-point Hitch
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_front_three_point_hitch = 116;
  
    // Parameter ID: 1010
    // Property Name: ASF Rear Three-point Hitch
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_rear_three_point_hitch = 117;
  
    // Parameter ID: 1011
    // Property Name: ASF Front Power Take-off
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_front_power_take_off = 118;
  
    // Parameter ID: 1012
    // Property Name: ASF Rear Power Take-off
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_rear_power_take_off = 119;
  
    // Parameter ID: 1013
    // Property Name: ASF Mowing Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_mowing_active = 120;
  
    // Parameter ID: 1014
    // Property Name: ASF Threshing Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Inactive, 1 - Active
    optional uint32 asf_threshing_active = 121;
  
    // Parameter ID: 1015
    // Property Name: ASF Grain Release From Hopper
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_grain_release_from_hopper = 122;
  
    // Parameter ID: 1016
    // Property Name: ASF Grain Tank Is 100% Full
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_grain_tank_is_100_full = 123;
  
    // Parameter ID: 1017
    // Property Name: ASF Grain Tank Is 70% Full
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_grain_tank_is_70_full = 124;
  
    // Parameter ID: 1018
    // Property Name: ASF Grain Tank Is Opened
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Closed, 1 - Opened
    optional uint32 asf_grain_tank_is_opened = 125;
  
    // Parameter ID: 1019
    // Property Name: ASF Unloader Drive
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_unloader_drive = 126;
  
    // Parameter ID: 1020
    // Property Name: ASF Cleaning Fan Control Turned Off
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_cleaning_fan_control_turned_off = 127;
  
    // Parameter ID: 1021
    // Property Name: ASF Threshing Drum Control Turned Off
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_threshing_drum_control_turned_off = 128;
  
    // Parameter ID: 1022
    // Property Name: ASF Straw Walker Is Clogged
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_straw_walker_is_clogged = 129;
  
    // Parameter ID: 1023
    // Property Name: ASF Excessive Clearance Under The Threshing Drum
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_excessive_clearance_under_the_threshing_drum = 130;
  
    // Parameter ID: 1024
    // Property Name: ASF Low Temperature Of Drive System Hydraulics Less Than 5 Grades
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_low_temperature_of_drive_system_hydraulics_less_than_5_grades = 131;
  
    // Parameter ID: 1025
    // Property Name: ASF High Temperature Of Drive System Hydraulics Greater Than 86 Grades
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_high_temperature_of_drive_system_hydraulics_greater_than_86_grades = 132;
  
    // Parameter ID: 1026
    // Property Name: ASF Ear Auger Speed Below The Norm
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_ear_auger_speed_below_the_norm = 133;
  
    // Parameter ID: 1027
    // Property Name: ASF Grain Auger Speed Below The Norm
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_grain_auger_speed_below_the_norm = 134;
  
    // Parameter ID: 1028
    // Property Name: ASF Straw Chooper Speed Below The Norm
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_straw_chooper_speed_below_the_norm = 135;
  
    // Parameter ID: 1029
    // Property Name: ASF Straw Shaker Speed Below The Norm
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_straw_shaker_speed_below_the_norm = 136;
  
    // Parameter ID: 1030
    // Property Name: ASF Feeder Speed Below The Norm
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_feeder_speed_below_the_norm = 137;
  
    // Parameter ID: 1031
    // Property Name: ASF Straw Chopper Switched On
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_straw_chopper_switched_on = 138;
  
    // Parameter ID: 1032
    // Property Name: ASF Corn Header Connected
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_corn_header_connected = 139;
  
    // Parameter ID: 1033
    // Property Name: ASF Grain Header Connected
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_grain_header_connected = 140;
  
    // Parameter ID: 1034
    // Property Name: ASF Feeder Reverse Switched On
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_feeder_reverse_switched_on = 141;
  
    // Parameter ID: 1035
    // Property Name: ASF The Pressure Filter Of The Hydraulic Pump Is Clogged
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged = 142;
  
    // Parameter ID: 1087
    // Property Name: ASF Adapter Pressure Filter Sensor
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_adapter_pressure_filter_sensor = 143;
  
    // Parameter ID: 1088
    // Property Name: ASF Service 2 Required Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_service_2_required_indicator = 144;
  
    // Parameter ID: 1089
    // Property Name: ASF Drain Filter Clogged Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_drain_filter_clogged_indicator = 145;
  
    // Parameter ID: 1090
    // Property Name: ASF Section 1 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_1_spraying = 146;
  
    // Parameter ID: 1091
    // Property Name: ASF Section 2 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_2_spraying = 147;
  
    // Parameter ID: 1092
    // Property Name: ASF Section 3 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_3_spraying = 148;
  
    // Parameter ID: 1093
    // Property Name: ASF Section 4 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_4_spraying = 149;
  
    // Parameter ID: 1094
    // Property Name: ASF Section 5 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_5_spraying = 150;
  
    // Parameter ID: 1095
    // Property Name: ASF Section 6 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_6_spraying = 151;
  
    // Parameter ID: 1096
    // Property Name: ASF Section 7 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_7_spraying = 152;
  
    // Parameter ID: 1097
    // Property Name: ASF Section 8 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_8_spraying = 153;
  
    // Parameter ID: 1098
    // Property Name: ASF Section 9 Spraying
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 asf_section_9_spraying = 154;
  
    // Parameter ID: 1036
    // Property Name: USF Spreading
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_spreading = 155;
  
    // Parameter ID: 1037
    // Property Name: USF Pouring Chemicals
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_pouring_chemicals = 156;
  
    // Parameter ID: 1038
    // Property Name: USF Conveyor Belt
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_conveyor_belt = 157;
  
    // Parameter ID: 1039
    // Property Name: USF Salt Spreader's Drive Wheel
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_salt_spreader_s_drive_wheel = 158;
  
    // Parameter ID: 1040
    // Property Name: USF Brushes
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_brushes = 159;
  
    // Parameter ID: 1041
    // Property Name: USF Vacuum Cleaner
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_vacuum_cleaner = 160;
  
    // Parameter ID: 1042
    // Property Name: USF Water Supply
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_water_supply = 161;
  
    // Parameter ID: 1043
    // Property Name: USF Spreading
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    // optional uint32 usf_spreading = 162;  // Note: Duplicate name, but ID different, proto allows same name but to avoid confusion, keep as is
  
    // Parameter ID: 1044
    // Property Name: USF Liquid pump
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_liquid_pump = 163;
  
    // Parameter ID: 1045
    // Property Name: USF Unloading From The Hopper
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_unloading_from_the_hopper = 164;
  
    // Parameter ID: 1046
    // Property Name: USF Low Salt (Sand) Level In Container Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_low_salt_sand_level_in_container_indicator = 165;
  
    // Parameter ID: 1047
    // Property Name: USF Low Water Level in Container Indicator
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_low_water_level_in_container_indicator = 166;
  
    // Parameter ID: 1048
    // Property Name: USF Chemicals
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_chemicals = 167;
  
    // Parameter ID: 1049
    // Property Name: USF Compressor
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_compressor = 168;
  
    // Parameter ID: 1050
    // Property Name: USF Water Valve Is Opened
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_water_valve_is_opened = 169;
  
    // Parameter ID: 1051
    // Property Name: USF Cabin Moved Up Status Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_cabin_moved_up_status_active = 170;
  
    // Parameter ID: 1052
    // Property Name: USF Cabin Moved Down Status Active
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_cabin_moved_down_status_active = 171;
  
    // Parameter ID: 1099
    // Property Name: USF Hydraulics Work Not Permitted
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - Off, 1 - On
    optional uint32 usf_hydraulics_work_not_permitted = 172;
  
    // Parameter ID: 1053
    // Property Name: CiSF Section 1 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_1_presence_of_fluid_in_the_downpipe = 173;
  
    // Parameter ID: 1054
    // Property Name: CiSF Section 1 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_1_filled = 174;
  
    // Parameter ID: 1055
    // Property Name: CiSF Section 1 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_1_overfilled = 175;
  
    // Parameter ID: 1056
    // Property Name: CiSF Section 2 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_2_presence_of_fluid_in_the_downpipe = 176;
  
    // Parameter ID: 1057
    // Property Name: CiSF Section 2 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_2_filled = 177;
  
    // Parameter ID: 1058
    // Property Name: CiSF Section 2 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_2_overfilled = 178;
  
    // Parameter ID: 1059
    // Property Name: CiSF Section 3 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_3_presence_of_fluid_in_the_downpipe = 179;
  
    // Parameter ID: 1060
    // Property Name: CiSF Section 3 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_3_filled = 180;
  
    // Parameter ID: 1061
    // Property Name: CiSF Section 3 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_3_overfilled = 181;
  
    // Parameter ID: 1062
    // Property Name: CiSF Section 4 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_4_presence_of_fluid_in_the_downpipe = 182;
  
    // Parameter ID: 1063
    // Property Name: CiSF Section 4 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_4_filled = 183;
  
    // Parameter ID: 1064
    // Property Name: CiSF Section 4 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_4_overfilled = 184;
  
    // Parameter ID: 1065
    // Property Name: CiSF Section 5 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_5_presence_of_fluid_in_the_downpipe = 185;
  
    // Parameter ID: 1066
    // Property Name: CiSF Section 5 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_5_filled = 186;
  
    // Parameter ID: 1067
    // Property Name: CiSF Section 5 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_5_overfilled = 187;
  
    // Parameter ID: 1068
    // Property Name: CiSF Section 6 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_6_presence_of_fluid_in_the_downpipe = 188;
  
    // Parameter ID: 1069
    // Property Name: CiSF Section 6 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_6_filled = 189;
  
    // Parameter ID: 1070
    // Property Name: CiSF Section 6 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_6_overfilled = 190;
  
    // Parameter ID: 1071
    // Property Name: CiSF Section 7 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_7_presence_of_fluid_in_the_downpipe = 191;
  
    // Parameter ID: 1072
    // Property Name: CiSF Section 7 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_7_filled = 192;
  
    // Parameter ID: 1073
    // Property Name: CiSF Section 7 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_7_overfilled = 193;
  
    // Parameter ID: 1074
    // Property Name: CiSF Section 8 Presence Of Fluid In The Downpipe
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No presence, 1 - Present
    optional uint32 cisf_section_8_presence_of_fluid_in_the_downpipe = 194;
  
    // Parameter ID: 1075
    // Property Name: CiSF Section 8 Filled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_8_filled = 195;
  
    // Parameter ID: 1076
    // Property Name: CiSF Section 8 Overfilled
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: 0 - No, 1 - Yes
    optional uint32 cisf_section_8_overfilled = 196;
  
    // Parameter ID: 400
    // Property Name: Distance to Next Service
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: -
    // Values: 
    optional uint64 distance_to_next_service = 197;
  
    // Parameter ID: 450
    // Property Name: CNG Level Kg
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: 10
    // Units: Kg
    // Values: CNG Level Kg (appears only if CNG level percentage is not available)
    optional uint32 cng_level_kg = 198;
  
    // Parameter ID: 859
    // Property Name: Distance from need of service
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: km
    // Values: Service - distance elapsed since the occurrence of the need for servicing
    optional uint64 distance_from_need_of_service = 199;
  
    // Parameter ID: 860
    // Property Name: Distance from last service
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: km
    // Values: Service - distance from the last service
    optional uint64 distance_from_last_service = 200;
  
    // Parameter ID: 861
    // Property Name: Time to next service
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: day
    // Values: Service - time to next service
    optional uint32 time_to_next_service = 201;
  
    // Parameter ID: 862
    // Property Name: Time from need of service
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: day
    // Values: Service - time exceeded since the occurrence of the need for servicing
    optional uint32 time_from_need_of_service = 202;
  
    // Parameter ID: 863
    // Property Name: Time from last serivce
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: day
    // Values: Service - time elapsed since the last service
    optional uint32 time_from_last_serivce = 203;
  
    // Parameter ID: 864
    // Property Name: Distance to next oil service
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: km
    // Values: Service - distance to next oil service
    optional uint64 distance_to_next_oil_service = 204;
  
    // Parameter ID: 865
    // Property Name: Time to next oil service
    // Type: Unsigned
    // Bytes: 2
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: day
    // Values: Service - time to next oil service
    optional uint32 time_to_next_oil_service = 205;
  
    // Parameter ID: 866
    // Property Name: LVCAN Vehicle Range
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 4294967295
    // Multiplier: -
    // Units: km
    // Values: Information about vehicle range
    optional uint64 lvcan_vehicle_range = 206;
  
    // Parameter ID: 867
    // Property Name: LVCAN Total CNG counted
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 65535
    // Multiplier: -
    // Units: kg
    // Values: Information about Total CNG used in counted mode
    optional uint64 lvcan_total_cng_counted = 207;
  
    // Parameter ID: 1079
    // Property Name: Total Bale Count
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 0xFFFFFFFF
    // Multiplier: -
    // Units: -
    // Values: Total Bale Count
    optional uint64 total_bale_count = 208;
  
    // Parameter ID: 1080
    // Property Name: Bale Count
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 0xFFFFFFFF
    // Multiplier: -
    // Units: -
    // Values: Bale Count
    optional uint64 bale_count = 209;
  
    // Parameter ID: 1081
    // Property Name: Cut Bale Count
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 0xFFFFFFFF
    // Multiplier: -
    // Units: -
    // Values: Cut Bale Count
    optional uint64 cut_bale_count = 210;
  
    // Parameter ID: 1082
    // Property Name: Bale Slices
    // Type: Unsigned
    // Bytes: 4
    // Min: 0
    // Max: 0xFFFFFFFF
    // Multiplier: -
    // Units: -
    // Values: Bale Slices
    optional uint64 bale_slices = 211;
  
    // Parameter ID: 1116
    // Property Name: LVCAN MaxRoadSpeed
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 255
    // Multiplier: -
    // Units: km/h
    // Values: Maximum speed from road signs
    optional uint32 lvcan_maxroadspeed = 212;
  
    // Parameter ID: 1117
    // Property Name: LVCAN ExceededRoadSpeed
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 255
    // Multiplier: -
    // Units: km/h
    // Values: Exceeded speed from road signs
    optional uint32 lvcan_exceededroadspeed = 213;
  
    // Parameter ID: 1205
    // Property Name: LVCAN RSF SpeedLimitSign
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Information if road sign "Speed limit with value" is recognized/canceled
    optional uint32 lvcan_rsf_speedlimitsign = 214;
  
    // Parameter ID: 1206
    // Property Name: LVCAN RSF EndOfSpeedLimitSign
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Information if road sign "End of speed limit with value" is recognized/canceled
    optional uint32 lvcan_rsf_endofspeedlimitsign = 215;
  
    // Parameter ID: 1207
    // Property Name: LVCAN RSF SpeedExceeded
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Information if speed is exceeded indicated by road sign "Speed limit with value"
    optional uint32 lvcan_rsf_speedexceeded = 216;
  
    // Parameter ID: 1208
    // Property Name: LVCAN RSF TimeSpeedLimitSign
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Information if road sign "Conditional time-specific speed limit with value" is recognized/canceled
    optional uint32 lvcan_rsf_timespeedlimitsign = 217;
  
    // Parameter ID: 1209
    // Property Name: LVCAN RSF WthrSpeedLimitSign
    // Type: Unsigned
    // Bytes: 1
    // Min: 0
    // Max: 1
    // Multiplier: -
    // Units: -
    // Values: Information if road sign "Speed limit with value due to weather conditions" is recognized/cancelled
    optional uint32 lvcan_rsf_wthrspeedlimitsign = 218;
}

enum Event {
  NORMAL = 0;
  IGNITION_ON = 1;
  IGNITION_OFF = 2;
  MOVEMENT = 3;
  PLUG = 4;
  UNPLUG = 5;
  TOWING = 6;
  JAMMING = 7;
  OVER_SPEED = 8;
  IDLING = 9;
  LOW_BATTERY = 10;
  CRASH = 11;
  HUMIDITY = 12;
  DOOR_OPEN = 13;
  ENGINE_DOOR_OPEN = 14;
  TRUNK_DOOR_OPEN = 15;
  DIGITAL_INPUT_1 = 16;
  DIGITAL_INPUT_2 = 17;
  DIGITAL_INPUT_3 = 18;
  DIGITAL_OUTPUT_1 = 19;
  DIGITAL_OUTPUT_2 = 20;
  DIGITAL_OUTPUT_3 = 21;
  ANALOG_INPUT_1 = 22;
  ANALOG_INPUT_2 = 23;
  FOOT_BRAKE = 24;
  TEMPERATURE = 25;
  FUEL = 26;
  CRASH_TRACE = 27;
  DATA_MODE = 28;
  GSM = 29;
  SLEEP_MODE = 30;
  GNSS = 31;
  GPS = 32;
  EXTERNAL_VOLTAGE = 33;
  SPEED = 34;
  BATTERY_VOLTAGE = 35;
  BATTERY_CURRENT = 36;
  TRIPS = 37;
  ODOMETER = 38;
  AXIS_X = 39;
  AXIS_Y = 40;
  AXIS_Z = 41;
  SD_STATUS = 42;
  ACCELERATION_PEDAL_POSITION = 43;
  FUEL_LEVEL = 44;
  DTC = 45;
  DRIVING = 46;
  HARSH_ACCELERATION = 47;
  HARSH_BRAKING = 48;
  HARSH_CORNER = 49;
  FALL = 50;
}