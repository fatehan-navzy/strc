// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.31.1
// source: packets/packets.proto

package packets

import (
	devices "github.com/fatehan-navzy/strc/devices"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event int32

const (
	Event_NORMAL                      Event = 0
	Event_IGNITION_ON                 Event = 1
	Event_IGNITION_OFF                Event = 2
	Event_MOVEMENT                    Event = 3
	Event_PLUG                        Event = 4
	Event_UNPLUG                      Event = 5
	Event_TOWING                      Event = 6
	Event_JAMMING                     Event = 7
	Event_OVER_SPEED                  Event = 8
	Event_IDLING                      Event = 9
	Event_LOW_BATTERY                 Event = 10
	Event_CRASH                       Event = 11
	Event_HUMIDITY                    Event = 12
	Event_DOOR_OPEN                   Event = 13
	Event_ENGINE_DOOR_OPEN            Event = 14
	Event_TRUNK_DOOR_OPEN             Event = 15
	Event_DIGITAL_INPUT_1             Event = 16
	Event_DIGITAL_INPUT_2             Event = 17
	Event_DIGITAL_INPUT_3             Event = 18
	Event_DIGITAL_OUTPUT_1            Event = 19
	Event_DIGITAL_OUTPUT_2            Event = 20
	Event_DIGITAL_OUTPUT_3            Event = 21
	Event_ANALOG_INPUT_1              Event = 22
	Event_ANALOG_INPUT_2              Event = 23
	Event_FOOT_BRAKE                  Event = 24
	Event_TEMPERATURE                 Event = 25
	Event_FUEL                        Event = 26
	Event_CRASH_TRACE                 Event = 27
	Event_DATA_MODE                   Event = 28
	Event_GSM                         Event = 29
	Event_SLEEP_MODE                  Event = 30
	Event_GNSS                        Event = 31
	Event_GPS                         Event = 32
	Event_EXTERNAL_VOLTAGE            Event = 33
	Event_SPEED                       Event = 34
	Event_BATTERY_VOLTAGE             Event = 35
	Event_BATTERY_CURRENT             Event = 36
	Event_TRIPS                       Event = 37
	Event_ODOMETER                    Event = 38
	Event_AXIS_X                      Event = 39
	Event_AXIS_Y                      Event = 40
	Event_AXIS_Z                      Event = 41
	Event_SD_STATUS                   Event = 42
	Event_ACCELERATION_PEDAL_POSITION Event = 43
	Event_FUEL_LEVEL                  Event = 44
	Event_DTC                         Event = 45
	Event_DRIVING                     Event = 46
	Event_HARSH_ACCELERATION          Event = 47
	Event_HARSH_BRAKING               Event = 48
	Event_HARSH_CORNER                Event = 49
	Event_FALL                        Event = 50
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0:  "NORMAL",
		1:  "IGNITION_ON",
		2:  "IGNITION_OFF",
		3:  "MOVEMENT",
		4:  "PLUG",
		5:  "UNPLUG",
		6:  "TOWING",
		7:  "JAMMING",
		8:  "OVER_SPEED",
		9:  "IDLING",
		10: "LOW_BATTERY",
		11: "CRASH",
		12: "HUMIDITY",
		13: "DOOR_OPEN",
		14: "ENGINE_DOOR_OPEN",
		15: "TRUNK_DOOR_OPEN",
		16: "DIGITAL_INPUT_1",
		17: "DIGITAL_INPUT_2",
		18: "DIGITAL_INPUT_3",
		19: "DIGITAL_OUTPUT_1",
		20: "DIGITAL_OUTPUT_2",
		21: "DIGITAL_OUTPUT_3",
		22: "ANALOG_INPUT_1",
		23: "ANALOG_INPUT_2",
		24: "FOOT_BRAKE",
		25: "TEMPERATURE",
		26: "FUEL",
		27: "CRASH_TRACE",
		28: "DATA_MODE",
		29: "GSM",
		30: "SLEEP_MODE",
		31: "GNSS",
		32: "GPS",
		33: "EXTERNAL_VOLTAGE",
		34: "SPEED",
		35: "BATTERY_VOLTAGE",
		36: "BATTERY_CURRENT",
		37: "TRIPS",
		38: "ODOMETER",
		39: "AXIS_X",
		40: "AXIS_Y",
		41: "AXIS_Z",
		42: "SD_STATUS",
		43: "ACCELERATION_PEDAL_POSITION",
		44: "FUEL_LEVEL",
		45: "DTC",
		46: "DRIVING",
		47: "HARSH_ACCELERATION",
		48: "HARSH_BRAKING",
		49: "HARSH_CORNER",
		50: "FALL",
	}
	Event_value = map[string]int32{
		"NORMAL":                      0,
		"IGNITION_ON":                 1,
		"IGNITION_OFF":                2,
		"MOVEMENT":                    3,
		"PLUG":                        4,
		"UNPLUG":                      5,
		"TOWING":                      6,
		"JAMMING":                     7,
		"OVER_SPEED":                  8,
		"IDLING":                      9,
		"LOW_BATTERY":                 10,
		"CRASH":                       11,
		"HUMIDITY":                    12,
		"DOOR_OPEN":                   13,
		"ENGINE_DOOR_OPEN":            14,
		"TRUNK_DOOR_OPEN":             15,
		"DIGITAL_INPUT_1":             16,
		"DIGITAL_INPUT_2":             17,
		"DIGITAL_INPUT_3":             18,
		"DIGITAL_OUTPUT_1":            19,
		"DIGITAL_OUTPUT_2":            20,
		"DIGITAL_OUTPUT_3":            21,
		"ANALOG_INPUT_1":              22,
		"ANALOG_INPUT_2":              23,
		"FOOT_BRAKE":                  24,
		"TEMPERATURE":                 25,
		"FUEL":                        26,
		"CRASH_TRACE":                 27,
		"DATA_MODE":                   28,
		"GSM":                         29,
		"SLEEP_MODE":                  30,
		"GNSS":                        31,
		"GPS":                         32,
		"EXTERNAL_VOLTAGE":            33,
		"SPEED":                       34,
		"BATTERY_VOLTAGE":             35,
		"BATTERY_CURRENT":             36,
		"TRIPS":                       37,
		"ODOMETER":                    38,
		"AXIS_X":                      39,
		"AXIS_Y":                      40,
		"AXIS_Z":                      41,
		"SD_STATUS":                   42,
		"ACCELERATION_PEDAL_POSITION": 43,
		"FUEL_LEVEL":                  44,
		"DTC":                         45,
		"DRIVING":                     46,
		"HARSH_ACCELERATION":          47,
		"HARSH_BRAKING":               48,
		"HARSH_CORNER":                49,
		"FALL":                        50,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_packets_packets_proto_enumTypes[0].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_packets_packets_proto_enumTypes[0]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{0}
}

type Result_PacketType int32

const (
	Result_FAILED    Result_PacketType = 0
	Result_AUTHORIZE Result_PacketType = 1
	Result_DATA      Result_PacketType = 2
	Result_HEARTBEAT Result_PacketType = 3
	Result_ANSWER    Result_PacketType = 4
	Result_CUSTOM    Result_PacketType = 5
)

// Enum value maps for Result_PacketType.
var (
	Result_PacketType_name = map[int32]string{
		0: "FAILED",
		1: "AUTHORIZE",
		2: "DATA",
		3: "HEARTBEAT",
		4: "ANSWER",
		5: "CUSTOM",
	}
	Result_PacketType_value = map[string]int32{
		"FAILED":    0,
		"AUTHORIZE": 1,
		"DATA":      2,
		"HEARTBEAT": 3,
		"ANSWER":    4,
		"CUSTOM":    5,
	}
)

func (x Result_PacketType) Enum() *Result_PacketType {
	p := new(Result_PacketType)
	*p = x
	return p
}

func (x Result_PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result_PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_packets_packets_proto_enumTypes[1].Descriptor()
}

func (Result_PacketType) Type() protoreflect.EnumType {
	return &file_packets_packets_proto_enumTypes[1]
}

func (x Result_PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result_PacketType.Descriptor instead.
func (Result_PacketType) EnumDescriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{0, 0}
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imei          uint64                 `protobuf:"varint,1,opt,name=imei,proto3" json:"imei,omitempty"`
	Type          Result_PacketType      `protobuf:"varint,2,opt,name=Type,json=packet_type,proto3,enum=com.navzy.packets.Result_PacketType" json:"Type,omitempty"`
	Data          []*Packet              `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Response      []byte                 `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	Answer        []byte                 `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	Payload       []byte                 `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_packets_packets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetImei() uint64 {
	if x != nil {
		return x.Imei
	}
	return 0
}

func (x *Result) GetType() Result_PacketType {
	if x != nil {
		return x.Type
	}
	return Result_FAILED
}

func (x *Result) GetData() []*Packet {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Result) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Result) GetAnswer() []byte {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *Result) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *devices.Device        `protobuf:"bytes,1,opt,name=device,json=devices,proto3" json:"device,omitempty"`
	Packet        *Packet                `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
	Client        *Client                `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_packets_packets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetDevice() *devices.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Task) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *Task) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ServerIp      string                 `protobuf:"bytes,3,opt,name=server_ip,proto3" json:"server_ip,omitempty"`
	ServerPort    uint32                 `protobuf:"varint,4,opt,name=server_port,proto3" json:"server_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Client) Reset() {
	*x = Client{}
	mi := &file_packets_packets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{2}
}

func (x *Client) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Client) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Client) GetServerIp() string {
	if x != nil {
		return x.ServerIp
	}
	return ""
}

func (x *Client) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,proto3" json:"device_id,omitempty"`
	Received      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=received,proto3" json:"received,omitempty"`
	Packet        *Packet                `protobuf:"bytes,3,opt,name=packet,proto3" json:"packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_packets_packets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Data) GetReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *Data) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

type Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imei          uint64                 `protobuf:"varint,1,opt,name=imei,json=device_id,proto3" json:"imei,omitempty"`
	Datetime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Latitude      float32                `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float32                `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude      uint32                 `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Angle         uint32                 `protobuf:"varint,6,opt,name=angle,proto3" json:"angle,omitempty"`
	Speed         uint32                 `protobuf:"varint,7,opt,name=speed,proto3" json:"speed,omitempty"`
	Satellite     *uint32                `protobuf:"varint,8,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
	Ignition      *bool                  `protobuf:"varint,9,opt,name=ignition,proto3,oneof" json:"ignition,omitempty"`
	Mileage       *uint64                `protobuf:"varint,10,opt,name=mileage,proto3,oneof" json:"mileage,omitempty"`
	Compact       *Compact               `protobuf:"bytes,11,opt,name=compact,proto3" json:"compact,omitempty"`
	Events        []Event                `protobuf:"varint,12,rep,packed,name=events,json=alerts,proto3,enum=com.navzy.packets.Event" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packets_packets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{4}
}

func (x *Packet) GetImei() uint64 {
	if x != nil {
		return x.Imei
	}
	return 0
}

func (x *Packet) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *Packet) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Packet) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Packet) GetAltitude() uint32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Packet) GetAngle() uint32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

func (x *Packet) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Packet) GetSatellite() uint32 {
	if x != nil && x.Satellite != nil {
		return *x.Satellite
	}
	return 0
}

func (x *Packet) GetIgnition() bool {
	if x != nil && x.Ignition != nil {
		return *x.Ignition
	}
	return false
}

func (x *Packet) GetMileage() uint64 {
	if x != nil && x.Mileage != nil {
		return *x.Mileage
	}
	return 0
}

func (x *Packet) GetCompact() *Compact {
	if x != nil {
		return x.Compact
	}
	return nil
}

func (x *Packet) GetEvents() []Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Compact struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parameter ID: 240
	// Property Name: Movement
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 – Movement Off, 1 – Movement On
	Movement *bool `protobuf:"varint,2,opt,name=movement,proto3,oneof" json:"movement,omitempty"`
	// Parameter ID: 80
	// Property Name: Data Mode
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 5
	// Multiplier: -
	// Units: -
	// Values: 0 – Home On Stop, 1 – Home On Moving, 2 – Roaming On Stop, 3 – Roaming On Moving, 4 – Unknown On Stop, 5 – Unknown On Moving
	DataMode *uint32 `protobuf:"varint,3,opt,name=data_mode,json=dataMode,proto3,oneof" json:"data_mode,omitempty"`
	// Parameter ID: 21
	// Property Name: GSM Signal
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 5
	// Multiplier: -
	// Units: -
	// Values: Value in range 1-5 Explanation
	GsmSignal *uint32 `protobuf:"varint,4,opt,name=gsm_signal,json=gsmSignal,proto3,oneof" json:"gsm_signal,omitempty"`
	// Parameter ID: 200
	// Property Name: Sleep Mode
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 4
	// Multiplier: -
	// Units: -
	// Values: 0 - No Sleep, 1 – GPS Sleep, 2 – Deep Sleep, 3 – Online Sleep, 4 - Ultra Sleep
	SleepMode *uint32 `protobuf:"varint,5,opt,name=sleep_mode,json=sleepMode,proto3,oneof" json:"sleep_mode,omitempty"`
	// Parameter ID: 69
	// Property Name: GNSS Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 3
	// Multiplier: -
	// Units: -
	// Values: 0 - GNSS OFF, 1 – GNSS ON with fix, 2 - GNSS ON without fix, 3 - GNSS sleep
	GnssStatus *uint32 `protobuf:"varint,6,opt,name=gnss_status,json=gnssStatus,proto3,oneof" json:"gnss_status,omitempty"`
	// Parameter ID: 181
	// Property Name: GNSS PDOP
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 500
	// Multiplier: 0.1
	// Units:
	// Values: Coefficient, calculation formula
	GnssPdop *uint32 `protobuf:"varint,7,opt,name=gnss_pdop,json=gnssPdop,proto3,oneof" json:"gnss_pdop,omitempty"`
	// Parameter ID: 182
	// Property Name: GNSS HDOP
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 500
	// Multiplier: 0.1
	// Units:
	// Values: Coefficient, calculation formula
	GnssHdop *uint32 `protobuf:"varint,8,opt,name=gnss_hdop,json=gnssHdop,proto3,oneof" json:"gnss_hdop,omitempty"`
	// Parameter ID: 66
	// Property Name: External Voltage
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	ExternalVoltage *uint32 `protobuf:"varint,9,opt,name=external_voltage,json=externalVoltage,proto3,oneof" json:"external_voltage,omitempty"`
	// Parameter ID: 24
	// Property Name: Speed
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 350
	// Multiplier: -
	// Units: km/h
	// Values: GNSS Speed
	Speed *uint32 `protobuf:"varint,10,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	// Parameter ID: 205
	// Property Name: GSM Cell ID
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values: GSM base station ID
	GsmCellId *uint32 `protobuf:"varint,11,opt,name=gsm_cell_id,json=gsmCellId,proto3,oneof" json:"gsm_cell_id,omitempty"`
	// Parameter ID: 206
	// Property Name: GSM Area Code
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values: Location Area code (LAC), it depends on GSM operator. It provides unique number which assigned to a set of base GSM stations.
	GsmAreaCode *uint32 `protobuf:"varint,12,opt,name=gsm_area_code,json=gsmAreaCode,proto3,oneof" json:"gsm_area_code,omitempty"`
	// Parameter ID: 67
	// Property Name: Battery Voltage
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	BatteryVoltage *uint32 `protobuf:"varint,13,opt,name=battery_voltage,json=batteryVoltage,proto3,oneof" json:"battery_voltage,omitempty"`
	// Parameter ID: 68
	// Property Name: Battery Current
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: A
	// Values: Current
	BatteryCurrent *uint32 `protobuf:"varint,14,opt,name=battery_current,json=batteryCurrent,proto3,oneof" json:"battery_current,omitempty"`
	// Parameter ID: 241
	// Property Name: Active GSM Operator
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: Currently used GSM Operator code
	ActiveGsmOperator *uint32 `protobuf:"varint,15,opt,name=active_gsm_operator,json=activeGsmOperator,proto3,oneof" json:"active_gsm_operator,omitempty"`
	// Parameter ID: 199
	// Property Name: Trip Odometer
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 2147483647
	// Multiplier: -
	// Units: m
	// Values: Trip Odometer value
	TripOdometer *uint32 `protobuf:"varint,16,opt,name=trip_odometer,json=tripOdometer,proto3,oneof" json:"trip_odometer,omitempty"`
	// Parameter ID: 16
	// Property Name: Total Odometer
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 2147483647
	// Multiplier: -
	// Units: -
	// Values: Total Odometer value in meters
	TotalOdometer *uint64 `protobuf:"varint,17,opt,name=total_odometer,json=totalOdometer,proto3,oneof" json:"total_odometer,omitempty"`
	// Parameter ID: 1
	// Property Name: Digital Input 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalInput1 *bool `protobuf:"varint,18,opt,name=digital_input1,json=digitalInput1,proto3,oneof" json:"digital_input1,omitempty"`
	// Parameter ID: 9
	// Property Name: Analog Input 1
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	AnalogInput1 *uint32 `protobuf:"varint,19,opt,name=analog_input1,json=analogInput1,proto3,oneof" json:"analog_input1,omitempty"`
	// Parameter ID: 179
	// Property Name: Digital Output 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalOutput1 *bool `protobuf:"varint,20,opt,name=digital_output1,json=digitalOutput1,proto3,oneof" json:"digital_output1,omitempty"`
	// Parameter ID: 12
	// Property Name: Fuel Used GPS
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: 0.001
	// Units: l
	// Values: Fuel Used
	FuelUsedGps *uint32 `protobuf:"varint,21,opt,name=fuel_used_gps,json=fuelUsedGps,proto3,oneof" json:"fuel_used_gps,omitempty"`
	// Parameter ID: 13
	// Property Name: Fuel Rate GPS
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 32767
	// Multiplier: 0.01
	// Units: l/100km
	// Values: Average Fuel Use
	FuelRateGps *uint32 `protobuf:"varint,22,opt,name=fuel_rate_gps,json=fuelRateGps,proto3,oneof" json:"fuel_rate_gps,omitempty"`
	// Parameter ID: 17
	// Property Name: Axis X
	// Type: Signed
	// Bytes: 2
	// Min: -8000
	// Max: 8000
	// Multiplier: -
	// Units: mG
	// Values: X axis value
	AxisX *int32 `protobuf:"varint,23,opt,name=axis_x,json=axisX,proto3,oneof" json:"axis_x,omitempty"`
	// Parameter ID: 18
	// Property Name: Axis Y
	// Type: Signed
	// Bytes: 2
	// Min: -8000
	// Max: 8000
	// Multiplier: -
	// Units: mG
	// Values: Y axis value
	AxisY *int32 `protobuf:"varint,24,opt,name=axis_y,json=axisY,proto3,oneof" json:"axis_y,omitempty"`
	// Parameter ID: 19
	// Property Name: Axis Z
	// Type: Signed
	// Bytes: 2
	// Min: -8000
	// Max: 8000
	// Multiplier: -
	// Units: mG
	// Values: Z axis value
	AxisZ *int32 `protobuf:"varint,25,opt,name=axis_z,json=axisZ,proto3,oneof" json:"axis_z,omitempty"`
	// Parameter ID: 11
	// Property Name: ICCID1
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Value of SIM ICCID, MSB
	Iccid1 *uint64 `protobuf:"varint,26,opt,name=iccid1,proto3,oneof" json:"iccid1,omitempty"`
	// Parameter ID: 10
	// Property Name: SD Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - not present, 1 - present
	SdStatus *bool `protobuf:"varint,27,opt,name=sd_status,json=sdStatus,proto3,oneof" json:"sd_status,omitempty"`
	// Parameter ID: 2
	// Property Name: Digital Input 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalInput2 *bool `protobuf:"varint,28,opt,name=digital_input2,json=digitalInput2,proto3,oneof" json:"digital_input2,omitempty"`
	// Parameter ID: 3
	// Property Name: Digital Input 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalInput3 *bool `protobuf:"varint,29,opt,name=digital_input3,json=digitalInput3,proto3,oneof" json:"digital_input3,omitempty"`
	// Parameter ID: 6
	// Property Name: Analog Input 2
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	AnalogInput2 *uint32 `protobuf:"varint,30,opt,name=analog_input2,json=analogInput2,proto3,oneof" json:"analog_input2,omitempty"`
	// Parameter ID: 180
	// Property Name: Digital Output 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic 0/1
	DigitalOutput2 *bool `protobuf:"varint,31,opt,name=digital_output2,json=digitalOutput2,proto3,oneof" json:"digital_output2,omitempty"`
	// Parameter ID: 72
	// Property Name: Dallas Temperature 1
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature1 *int32 `protobuf:"varint,32,opt,name=dallas_temperature1,json=dallasTemperature1,proto3,oneof" json:"dallas_temperature1,omitempty"`
	// Parameter ID: 73
	// Property Name: Dallas Temperature 2
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature2 *int32 `protobuf:"varint,33,opt,name=dallas_temperature2,json=dallasTemperature2,proto3,oneof" json:"dallas_temperature2,omitempty"`
	// Parameter ID: 74
	// Property Name: Dallas Temperature 3
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature3 *int32 `protobuf:"varint,34,opt,name=dallas_temperature3,json=dallasTemperature3,proto3,oneof" json:"dallas_temperature3,omitempty"`
	// Parameter ID: 75
	// Property Name: Dallas Temperature 4
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature4 *int32 `protobuf:"varint,35,opt,name=dallas_temperature4,json=dallasTemperature4,proto3,oneof" json:"dallas_temperature4,omitempty"`
	// Parameter ID: 76
	// Property Name: Dallas Temperature ID 1
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId1 *uint64 `protobuf:"varint,36,opt,name=dallas_temperature_id1,json=dallasTemperatureId1,proto3,oneof" json:"dallas_temperature_id1,omitempty"`
	// Parameter ID: 77
	// Property Name: Dallas Temperature ID 2
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId2 *uint64 `protobuf:"varint,37,opt,name=dallas_temperature_id2,json=dallasTemperatureId2,proto3,oneof" json:"dallas_temperature_id2,omitempty"`
	// Parameter ID: 79
	// Property Name: Dallas Temperature ID 3
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId3 *uint64 `protobuf:"varint,38,opt,name=dallas_temperature_id3,json=dallasTemperatureId3,proto3,oneof" json:"dallas_temperature_id3,omitempty"`
	// Parameter ID: 71
	// Property Name: Dallas Temperature ID 4
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId4 *uint64 `protobuf:"varint,39,opt,name=dallas_temperature_id4,json=dallasTemperatureId4,proto3,oneof" json:"dallas_temperature_id4,omitempty"`
	// Parameter ID: 78
	// Property Name: iButton
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: iButton ID
	Ibutton *uint64 `protobuf:"varint,40,opt,name=ibutton,proto3,oneof" json:"ibutton,omitempty"`
	// Parameter ID: 207
	// Property Name: RFID
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: RFID ID
	Rfid *uint64 `protobuf:"varint,41,opt,name=rfid,proto3,oneof" json:"rfid,omitempty"`
	// Parameter ID: 201
	// Property Name: LLS 1 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS232/RS485
	Lls_1FuelLevel *int32 `protobuf:"varint,42,opt,name=lls_1_fuel_level,json=lls1FuelLevel,proto3,oneof" json:"lls_1_fuel_level,omitempty"`
	// Parameter ID: 202
	// Property Name: LLS 1 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS232/RS485
	Lls_1Temperature *int32 `protobuf:"varint,43,opt,name=lls_1_temperature,json=lls1Temperature,proto3,oneof" json:"lls_1_temperature,omitempty"`
	// Parameter ID: 203
	// Property Name: LLS 2 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls_2FuelLevel *int32 `protobuf:"varint,44,opt,name=lls_2_fuel_level,json=lls2FuelLevel,proto3,oneof" json:"lls_2_fuel_level,omitempty"`
	// Parameter ID: 204
	// Property Name: LLS 2 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls_2Temperature *int32 `protobuf:"varint,45,opt,name=lls_2_temperature,json=lls2Temperature,proto3,oneof" json:"lls_2_temperature,omitempty"`
	// Parameter ID: 210
	// Property Name: LLS 3 Fuel Level
	// Type: Unsigned
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls_3FuelLevel *uint32 `protobuf:"varint,46,opt,name=lls_3_fuel_level,json=lls3FuelLevel,proto3,oneof" json:"lls_3_fuel_level,omitempty"`
	// Parameter ID: 211
	// Property Name: LLS 3 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls_3Temperature *int32 `protobuf:"varint,47,opt,name=lls_3_temperature,json=lls3Temperature,proto3,oneof" json:"lls_3_temperature,omitempty"`
	// Parameter ID: 212
	// Property Name: LLS 4 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls_4FuelLevel *int32 `protobuf:"varint,48,opt,name=lls_4_fuel_level,json=lls4FuelLevel,proto3,oneof" json:"lls_4_fuel_level,omitempty"`
	// Parameter ID: 213
	// Property Name: LLS 4 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls_4Temperature *int32 `protobuf:"varint,49,opt,name=lls_4_temperature,json=lls4Temperature,proto3,oneof" json:"lls_4_temperature,omitempty"`
	// Parameter ID: 214
	// Property Name: LLS 5 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls_5FuelLevel *int32 `protobuf:"varint,50,opt,name=lls_5_fuel_level,json=lls5FuelLevel,proto3,oneof" json:"lls_5_fuel_level,omitempty"`
	// Parameter ID: 215
	// Property Name: LLS 5 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls_5Temperature *int32 `protobuf:"varint,51,opt,name=lls_5_temperature,json=lls5Temperature,proto3,oneof" json:"lls_5_temperature,omitempty"`
	// Parameter ID: 15
	// Property Name: Eco Score
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.01
	// Units: -
	// Values: Average amount of events on some distance
	EcoScore *uint32 `protobuf:"varint,52,opt,name=eco_score,json=ecoScore,proto3,oneof" json:"eco_score,omitempty"`
	// Parameter ID: 113
	// Property Name: Battery Level
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Battery capacity level
	BatteryLevel *uint32 `protobuf:"varint,53,opt,name=battery_level,json=batteryLevel,proto3,oneof" json:"battery_level,omitempty"`
	// Parameter ID: 238
	// Property Name: User ID
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: MAC address of NMEA receiver device connected via Bluetooth
	UserId *uint64 `protobuf:"varint,54,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Parameter ID: 237
	// Property Name: Network Type
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - 3G, 1 - GSM, 2 - 4G, 3 - LTE CAT M1, 4 - LTE CAT NB1, 99 - Unknown
	NetworkType *uint32 `protobuf:"varint,55,opt,name=network_type,json=networkType,proto3,oneof" json:"network_type,omitempty"`
	// Parameter ID: 4
	// Property Name: Pulse Counter Din1
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: Counts pulses, count is reset when records are saved
	PulseCounterDin1 *uint64 `protobuf:"varint,56,opt,name=pulse_counter_din1,json=pulseCounterDin1,proto3,oneof" json:"pulse_counter_din1,omitempty"`
	// Parameter ID: 5
	// Property Name: Pulse Counter Din2
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: Counts pulses, count is reset when records are saved
	PulseCounterDin2 *uint64 `protobuf:"varint,57,opt,name=pulse_counter_din2,json=pulseCounterDin2,proto3,oneof" json:"pulse_counter_din2,omitempty"`
	// Parameter ID: 263
	// Property Name: BT Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 4
	// Multiplier: -
	// Units: -
	// Values: 0 - BT is disabled, 1 - BT Enabled, not device connected, 2 - Device connected, BTv3 Only, 3 - Device connected, BLE only, 4 - Device connected, BLE + BT
	BtStatus *uint32 `protobuf:"varint,58,opt,name=bt_status,json=btStatus,proto3,oneof" json:"bt_status,omitempty"`
	// Parameter ID: 264
	// Property Name: Barcode ID
	// Type: ASCII
	// Bytes: Variable
	// Min: 0
	// Max: 32
	// Multiplier: -
	// Units: -
	// Values: Barcode ID
	BarcodeId *string `protobuf:"bytes,59,opt,name=barcode_id,json=barcodeId,proto3,oneof" json:"barcode_id,omitempty"`
	// Parameter ID: 303
	// Property Name: Instant Movement
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1 returns movement value
	InstantMovement *uint32 `protobuf:"varint,60,opt,name=instant_movement,json=instantMovement,proto3,oneof" json:"instant_movement,omitempty"`
	// Parameter ID: 327
	// Property Name: UL202-02 Sensor Fuel level
	// Type: Signed
	// Bytes: 2
	// Min: -150
	// Max: 32767
	// Multiplier: 0.1
	// Units: mm
	// Values: UL202-02 Sensor Fuel level
	Ul202_02SensorFuelLevel *int32 `protobuf:"varint,61,opt,name=ul202_02_sensor_fuel_level,json=ul20202SensorFuelLevel,proto3,oneof" json:"ul202_02_sensor_fuel_level,omitempty"`
	// Parameter ID: 483
	// Property Name: UL202-02 Sensor Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 255
	// Multiplier: -
	// Units: -
	// Values: UL202-02 sensor status codes
	Ul202_02SensorStatus *uint32 `protobuf:"varint,62,opt,name=ul202_02_sensor_status,json=ul20202SensorStatus,proto3,oneof" json:"ul202_02_sensor_status,omitempty"`
	// Parameter ID: 380
	// Property Name: Digital output 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalOutput_3 *bool `protobuf:"varint,63,opt,name=digital_output_3,json=digitalOutput3,proto3,oneof" json:"digital_output_3,omitempty"`
	// Parameter ID: 381
	// Property Name: Ground Sense
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	GroundSense *uint32 `protobuf:"varint,64,opt,name=ground_sense,json=groundSense,proto3,oneof" json:"ground_sense,omitempty"`
	// Parameter ID: 387
	// Property Name: ISO6709 Coordinates
	// Type: HEX
	// Bytes: 34
	// Min: 0
	// Max: 0x7fffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: ISO6709 Coordinates Latitude, Longitude (in Degrees, Minutes and Seconds) and Altitude: IO value format: ±DDMMSS.SSSS±DDDMMSS.SSSS±AAA.AAA/
	Iso6709Coordinates []byte `protobuf:"bytes,65,opt,name=iso6709_coordinates,json=iso6709Coordinates,proto3,oneof" json:"iso6709_coordinates,omitempty"`
	// Parameter ID: 636
	// Property Name: UMTS/LTE Cell ID
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values:
	UmtsLteCellId *uint64 `protobuf:"varint,66,opt,name=umts_lte_cell_id,json=umtsLteCellId,proto3,oneof" json:"umts_lte_cell_id,omitempty"`
	// Parameter ID: 403
	// Property Name: Driver Name
	// Type: Unsigned
	// Bytes: 35
	// Min: -
	// Max: -
	// Multiplier: -
	// Units: -
	// Values: Driver name extracted from card, displayed without delimiters ($ signs)
	DriverName *uint64 `protobuf:"varint,67,opt,name=driver_name,json=driverName,proto3,oneof" json:"driver_name,omitempty"` // Note: Unsigned but seems like string, but per type Unsigned, perhaps treat as uint64 for simplicity, but bytes 35 suggest bytes
	// Parameter ID: 404
	// Property Name: Driver card license type
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 8
	// Multiplier: -
	// Units: -
	// Values: None - 0, B.1 license type - 1, B.2 license type - 2, B.3 license type - 3, B.4 license type - 4, T.1 license type - 5, T.2 license type - 6, T.3 license type - 7, T.4 license type - 8
	DriverCardLicenseType *uint32 `protobuf:"varint,68,opt,name=driver_card_license_type,json=driverCardLicenseType,proto3,oneof" json:"driver_card_license_type,omitempty"`
	// Parameter ID: 405
	// Property Name: Driver Gender
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 2
	// Multiplier: -
	// Units: -
	// Values: None - 0, Male - 1, Female - 2
	DriverGender *uint32 `protobuf:"varint,69,opt,name=driver_gender,json=driverGender,proto3,oneof" json:"driver_gender,omitempty"`
	// Parameter ID: 406
	// Property Name: Driver Card ID
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: None - 0, Male - 1, Female - 2  // Note: Seems typo in document, values from previous?
	DriverCardId *uint64 `protobuf:"varint,70,opt,name=driver_card_id,json=driverCardId,proto3,oneof" json:"driver_card_id,omitempty"`
	// Parameter ID: 407
	// Property Name: Driver Card expiration date
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 9999
	// Multiplier: -
	// Units: -
	// Values:
	DriverCardExpirationDate *uint32 `protobuf:"varint,71,opt,name=driver_card_expiration_date,json=driverCardExpirationDate,proto3,oneof" json:"driver_card_expiration_date,omitempty"`
	// Parameter ID: 408
	// Property Name: Driver Card place of issue
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values: Extracted from card
	DriverCardPlaceOfIssue *uint64 `protobuf:"varint,72,opt,name=driver_card_place_of_issue,json=driverCardPlaceOfIssue,proto3,oneof" json:"driver_card_place_of_issue,omitempty"`
	// Parameter ID: 409
	// Property Name: Driver Status Event
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 2
	// Multiplier: -
	// Units: -
	// Values: Registered - 0, Deregistered - 1, Swapping - 2
	DriverStatusEvent *uint32 `protobuf:"varint,73,opt,name=driver_status_event,json=driverStatusEvent,proto3,oneof" json:"driver_status_event,omitempty"`
	// Parameter ID: 329
	// Property Name: AIN Speed
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values:
	AinSpeed *uint32 `protobuf:"varint,74,opt,name=ain_speed,json=ainSpeed,proto3,oneof" json:"ain_speed,omitempty"`
	// Parameter ID: 500
	// Property Name: MSP500 vendor name
	// Type: ASCII
	// Bytes: 40
	// Min: 0
	// Max: 40
	// Multiplier: -
	// Units: -
	// Values: Name of the integrator who installed the device
	Msp500VendorName *string `protobuf:"bytes,75,opt,name=msp500_vendor_name,json=msp500VendorName,proto3,oneof" json:"msp500_vendor_name,omitempty"`
	// Parameter ID: 501
	// Property Name: MSP500 vehicle number
	// Type: ASCII
	// Bytes: 40
	// Min: 0
	// Max: 40
	// Multiplier: -
	// Units: -
	// Values: Vehicle number on which the device is installed
	Msp500VehicleNumber *string `protobuf:"bytes,76,opt,name=msp500_vehicle_number,json=msp500VehicleNumber,proto3,oneof" json:"msp500_vehicle_number,omitempty"`
	// Parameter ID: 502
	// Property Name: MSP500 speed sensor
	// Type: unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Status of the speed sensor
	Msp500SpeedSensor *uint32 `protobuf:"varint,77,opt,name=msp500_speed_sensor,json=msp500SpeedSensor,proto3,oneof" json:"msp500_speed_sensor,omitempty"`
	// Parameter ID: 637
	// Property Name: Wake Reason
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: True if device was woken by RTC alarm
	WakeReason *uint32 `protobuf:"varint,78,opt,name=wake_reason,json=wakeReason,proto3,oneof" json:"wake_reason,omitempty"`
	// Parameter ID: 10800
	// Property Name: EYE Temperature 1
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 1
	EyeTemperature_1 *int32 `protobuf:"varint,79,opt,name=eye_temperature_1,json=eyeTemperature1,proto3,oneof" json:"eye_temperature_1,omitempty"`
	// Parameter ID: 10801
	// Property Name: EYE Temperature 2
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 2
	EyeTemperature_2 *int32 `protobuf:"varint,80,opt,name=eye_temperature_2,json=eyeTemperature2,proto3,oneof" json:"eye_temperature_2,omitempty"`
	// Parameter ID: 10802
	// Property Name: EYE Temperature 3
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 3
	EyeTemperature_3 *int32 `protobuf:"varint,81,opt,name=eye_temperature_3,json=eyeTemperature3,proto3,oneof" json:"eye_temperature_3,omitempty"`
	// Parameter ID: 10803
	// Property Name: EYE Temperature 4
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 4
	EyeTemperature_4 *int32 `protobuf:"varint,82,opt,name=eye_temperature_4,json=eyeTemperature4,proto3,oneof" json:"eye_temperature_4,omitempty"`
	// Parameter ID: 10804
	// Property Name: EYE Humidity 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 1
	EyeHumidity_1 *uint32 `protobuf:"varint,83,opt,name=eye_humidity_1,json=eyeHumidity1,proto3,oneof" json:"eye_humidity_1,omitempty"`
	// Parameter ID: 10805
	// Property Name: EYE Humidity 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 2
	EyeHumidity_2 *uint32 `protobuf:"varint,84,opt,name=eye_humidity_2,json=eyeHumidity2,proto3,oneof" json:"eye_humidity_2,omitempty"`
	// Parameter ID: 10806
	// Property Name: EYE Humidity 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 3
	EyeHumidity_3 *uint32 `protobuf:"varint,85,opt,name=eye_humidity_3,json=eyeHumidity3,proto3,oneof" json:"eye_humidity_3,omitempty"`
	// Parameter ID: 10807
	// Property Name: EYE Humidity 4
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 4
	EyeHumidity_4 *uint32 `protobuf:"varint,86,opt,name=eye_humidity_4,json=eyeHumidity4,proto3,oneof" json:"eye_humidity_4,omitempty"`
	// Parameter ID: 10808
	// Property Name: EYE Magnet 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 1
	EyeMagnet_1 *uint32 `protobuf:"varint,87,opt,name=eye_magnet_1,json=eyeMagnet1,proto3,oneof" json:"eye_magnet_1,omitempty"`
	// Parameter ID: 10809
	// Property Name: EYE Magnet 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 2
	EyeMagnet_2 *uint32 `protobuf:"varint,88,opt,name=eye_magnet_2,json=eyeMagnet2,proto3,oneof" json:"eye_magnet_2,omitempty"`
	// Parameter ID: 10810
	// Property Name: EYE Magnet 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 3
	EyeMagnet_3 *uint32 `protobuf:"varint,89,opt,name=eye_magnet_3,json=eyeMagnet3,proto3,oneof" json:"eye_magnet_3,omitempty"`
	// Parameter ID: 10811
	// Property Name: EYE Magnet 4
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 4
	EyeMagnet_4 *uint32 `protobuf:"varint,90,opt,name=eye_magnet_4,json=eyeMagnet4,proto3,oneof" json:"eye_magnet_4,omitempty"`
	// Parameter ID: 10812
	// Property Name: EYE Movement 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Movement state measure by EYE Sensor 1
	EyeMovement_1 *uint32 `protobuf:"varint,91,opt,name=eye_movement_1,json=eyeMovement1,proto3,oneof" json:"eye_movement_1,omitempty"`
	// Parameter ID: 985
	// Property Name: ISF Clogged Brake System Filter Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfCloggedBrakeSystemFilterIndicator *uint32 `protobuf:"varint,92,opt,name=isf_clogged_brake_system_filter_indicator,json=isfCloggedBrakeSystemFilterIndicator,proto3,oneof" json:"isf_clogged_brake_system_filter_indicator,omitempty"`
	// Parameter ID: 986
	// Property Name: ISF Low Washer Fluid Level Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowWasherFluidLevelIndicator *uint32 `protobuf:"varint,93,opt,name=isf_low_washer_fluid_level_indicator,json=isfLowWasherFluidLevelIndicator,proto3,oneof" json:"isf_low_washer_fluid_level_indicator,omitempty"`
	// Parameter ID: 987
	// Property Name: ISF Low AdBlue Level Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowAdblueLevelIndicator *uint32 `protobuf:"varint,94,opt,name=isf_low_adblue_level_indicator,json=isfLowAdblueLevelIndicator,proto3,oneof" json:"isf_low_adblue_level_indicator,omitempty"`
	// Parameter ID: 988
	// Property Name: ISF Low Trailer Tyre Pressure Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowTrailerTyrePressureIndicator *uint32 `protobuf:"varint,95,opt,name=isf_low_trailer_tyre_pressure_indicator,json=isfLowTrailerTyrePressureIndicator,proto3,oneof" json:"isf_low_trailer_tyre_pressure_indicator,omitempty"`
	// Parameter ID: 989
	// Property Name: ISF Wear Of Trailer Brake Lining Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfWearOfTrailerBrakeLiningIndicator *uint32 `protobuf:"varint,96,opt,name=isf_wear_of_trailer_brake_lining_indicator,json=isfWearOfTrailerBrakeLiningIndicator,proto3,oneof" json:"isf_wear_of_trailer_brake_lining_indicator,omitempty"`
	// Parameter ID: 990
	// Property Name: ISF High Trailer Brake Temperature Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfHighTrailerBrakeTemperatureIndicator *uint32 `protobuf:"varint,97,opt,name=isf_high_trailer_brake_temperature_indicator,json=isfHighTrailerBrakeTemperatureIndicator,proto3,oneof" json:"isf_high_trailer_brake_temperature_indicator,omitempty"`
	// Parameter ID: 991
	// Property Name: ISF Incorrect Trailer Pneumatic Supply Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfIncorrectTrailerPneumaticSupplyIndicator *uint32 `protobuf:"varint,98,opt,name=isf_incorrect_trailer_pneumatic_supply_indicator,json=isfIncorrectTrailerPneumaticSupplyIndicator,proto3,oneof" json:"isf_incorrect_trailer_pneumatic_supply_indicator,omitempty"`
	// Parameter ID: 992
	// Property Name: ISF Low CNG Level Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowCngLevelIndicator *uint32 `protobuf:"varint,99,opt,name=isf_low_cng_level_indicator,json=isfLowCngLevelIndicator,proto3,oneof" json:"isf_low_cng_level_indicator,omitempty"`
	// Parameter ID: 993
	// Property Name: ASF Right Joystick Moved Right Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedRightActive *uint32 `protobuf:"varint,100,opt,name=asf_right_joystick_moved_right_active,json=asfRightJoystickMovedRightActive,proto3,oneof" json:"asf_right_joystick_moved_right_active,omitempty"`
	// Parameter ID: 994
	// Property Name: ASF Right Joystick Moved Left Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedLeftActive *uint32 `protobuf:"varint,101,opt,name=asf_right_joystick_moved_left_active,json=asfRightJoystickMovedLeftActive,proto3,oneof" json:"asf_right_joystick_moved_left_active,omitempty"`
	// Parameter ID: 995
	// Property Name: ASF Right Joystick Moved Forward Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedForwardActive *uint32 `protobuf:"varint,102,opt,name=asf_right_joystick_moved_forward_active,json=asfRightJoystickMovedForwardActive,proto3,oneof" json:"asf_right_joystick_moved_forward_active,omitempty"`
	// Parameter ID: 996
	// Property Name: ASF Right Joystick Moved Back Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedBackActive *uint32 `protobuf:"varint,103,opt,name=asf_right_joystick_moved_back_active,json=asfRightJoystickMovedBackActive,proto3,oneof" json:"asf_right_joystick_moved_back_active,omitempty"`
	// Parameter ID: 997
	// Property Name: ASF Left Joystick Moved Right Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedRightActive *uint32 `protobuf:"varint,104,opt,name=asf_left_joystick_moved_right_active,json=asfLeftJoystickMovedRightActive,proto3,oneof" json:"asf_left_joystick_moved_right_active,omitempty"`
	// Parameter ID: 998
	// Property Name: ASF Left Joystick Moved Left Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedLeftActive *uint32 `protobuf:"varint,105,opt,name=asf_left_joystick_moved_left_active,json=asfLeftJoystickMovedLeftActive,proto3,oneof" json:"asf_left_joystick_moved_left_active,omitempty"`
	// Parameter ID: 999
	// Property Name: ASF Left Joystick Moved Forward Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedForwardActive *uint32 `protobuf:"varint,106,opt,name=asf_left_joystick_moved_forward_active,json=asfLeftJoystickMovedForwardActive,proto3,oneof" json:"asf_left_joystick_moved_forward_active,omitempty"`
	// Parameter ID: 1000
	// Property Name: ASF Left Joystick Moved Back Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedBackActive *uint32 `protobuf:"varint,107,opt,name=asf_left_joystick_moved_back_active,json=asfLeftJoystickMovedBackActive,proto3,oneof" json:"asf_left_joystick_moved_back_active,omitempty"`
	// Parameter ID: 1001
	// Property Name: ASF First Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFirstRearHydraulic *uint32 `protobuf:"varint,108,opt,name=asf_first_rear_hydraulic,json=asfFirstRearHydraulic,proto3,oneof" json:"asf_first_rear_hydraulic,omitempty"`
	// Parameter ID: 1002
	// Property Name: ASF Second Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSecondRearHydraulic *uint32 `protobuf:"varint,109,opt,name=asf_second_rear_hydraulic,json=asfSecondRearHydraulic,proto3,oneof" json:"asf_second_rear_hydraulic,omitempty"`
	// Parameter ID: 1003
	// Property Name: ASF Third Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfThirdRearHydraulic *uint32 `protobuf:"varint,110,opt,name=asf_third_rear_hydraulic,json=asfThirdRearHydraulic,proto3,oneof" json:"asf_third_rear_hydraulic,omitempty"`
	// Parameter ID: 1004
	// Property Name: ASF Fourth Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFourthRearHydraulic *uint32 `protobuf:"varint,111,opt,name=asf_fourth_rear_hydraulic,json=asfFourthRearHydraulic,proto3,oneof" json:"asf_fourth_rear_hydraulic,omitempty"`
	// Parameter ID: 1005
	// Property Name: ASF First Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFirstFrontHydraulic *uint32 `protobuf:"varint,112,opt,name=asf_first_front_hydraulic,json=asfFirstFrontHydraulic,proto3,oneof" json:"asf_first_front_hydraulic,omitempty"`
	// Parameter ID: 1006
	// Property Name: ASF Second Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSecondFrontHydraulic *uint32 `protobuf:"varint,113,opt,name=asf_second_front_hydraulic,json=asfSecondFrontHydraulic,proto3,oneof" json:"asf_second_front_hydraulic,omitempty"`
	// Parameter ID: 1007
	// Property Name: ASF Third Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfThirdFrontHydraulic *uint32 `protobuf:"varint,114,opt,name=asf_third_front_hydraulic,json=asfThirdFrontHydraulic,proto3,oneof" json:"asf_third_front_hydraulic,omitempty"`
	// Parameter ID: 1008
	// Property Name: ASF Fourth Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFourthFrontHydraulic *uint32 `protobuf:"varint,115,opt,name=asf_fourth_front_hydraulic,json=asfFourthFrontHydraulic,proto3,oneof" json:"asf_fourth_front_hydraulic,omitempty"`
	// Parameter ID: 1009
	// Property Name: ASF Front Three-point Hitch
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFrontThreePointHitch *uint32 `protobuf:"varint,116,opt,name=asf_front_three_point_hitch,json=asfFrontThreePointHitch,proto3,oneof" json:"asf_front_three_point_hitch,omitempty"`
	// Parameter ID: 1010
	// Property Name: ASF Rear Three-point Hitch
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfRearThreePointHitch *uint32 `protobuf:"varint,117,opt,name=asf_rear_three_point_hitch,json=asfRearThreePointHitch,proto3,oneof" json:"asf_rear_three_point_hitch,omitempty"`
	// Parameter ID: 1011
	// Property Name: ASF Front Power Take-off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFrontPowerTakeOff *uint32 `protobuf:"varint,118,opt,name=asf_front_power_take_off,json=asfFrontPowerTakeOff,proto3,oneof" json:"asf_front_power_take_off,omitempty"`
	// Parameter ID: 1012
	// Property Name: ASF Rear Power Take-off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfRearPowerTakeOff *uint32 `protobuf:"varint,119,opt,name=asf_rear_power_take_off,json=asfRearPowerTakeOff,proto3,oneof" json:"asf_rear_power_take_off,omitempty"`
	// Parameter ID: 1013
	// Property Name: ASF Mowing Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfMowingActive *uint32 `protobuf:"varint,120,opt,name=asf_mowing_active,json=asfMowingActive,proto3,oneof" json:"asf_mowing_active,omitempty"`
	// Parameter ID: 1014
	// Property Name: ASF Threshing Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfThreshingActive *uint32 `protobuf:"varint,121,opt,name=asf_threshing_active,json=asfThreshingActive,proto3,oneof" json:"asf_threshing_active,omitempty"`
	// Parameter ID: 1015
	// Property Name: ASF Grain Release From Hopper
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfGrainReleaseFromHopper *uint32 `protobuf:"varint,122,opt,name=asf_grain_release_from_hopper,json=asfGrainReleaseFromHopper,proto3,oneof" json:"asf_grain_release_from_hopper,omitempty"`
	// Parameter ID: 1016
	// Property Name: ASF Grain Tank Is 100% Full
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainTankIs_100Full *uint32 `protobuf:"varint,123,opt,name=asf_grain_tank_is_100_full,json=asfGrainTankIs100Full,proto3,oneof" json:"asf_grain_tank_is_100_full,omitempty"`
	// Parameter ID: 1017
	// Property Name: ASF Grain Tank Is 70% Full
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainTankIs_70Full *uint32 `protobuf:"varint,124,opt,name=asf_grain_tank_is_70_full,json=asfGrainTankIs70Full,proto3,oneof" json:"asf_grain_tank_is_70_full,omitempty"`
	// Parameter ID: 1018
	// Property Name: ASF Grain Tank Is Opened
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Closed, 1 - Opened
	AsfGrainTankIsOpened *uint32 `protobuf:"varint,125,opt,name=asf_grain_tank_is_opened,json=asfGrainTankIsOpened,proto3,oneof" json:"asf_grain_tank_is_opened,omitempty"`
	// Parameter ID: 1019
	// Property Name: ASF Unloader Drive
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfUnloaderDrive *uint32 `protobuf:"varint,126,opt,name=asf_unloader_drive,json=asfUnloaderDrive,proto3,oneof" json:"asf_unloader_drive,omitempty"`
	// Parameter ID: 1020
	// Property Name: ASF Cleaning Fan Control Turned Off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfCleaningFanControlTurnedOff *uint32 `protobuf:"varint,127,opt,name=asf_cleaning_fan_control_turned_off,json=asfCleaningFanControlTurnedOff,proto3,oneof" json:"asf_cleaning_fan_control_turned_off,omitempty"`
	// Parameter ID: 1021
	// Property Name: ASF Threshing Drum Control Turned Off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfThreshingDrumControlTurnedOff *uint32 `protobuf:"varint,128,opt,name=asf_threshing_drum_control_turned_off,json=asfThreshingDrumControlTurnedOff,proto3,oneof" json:"asf_threshing_drum_control_turned_off,omitempty"`
	// Parameter ID: 1022
	// Property Name: ASF Straw Walker Is Clogged
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfStrawWalkerIsClogged *uint32 `protobuf:"varint,129,opt,name=asf_straw_walker_is_clogged,json=asfStrawWalkerIsClogged,proto3,oneof" json:"asf_straw_walker_is_clogged,omitempty"`
	// Parameter ID: 1023
	// Property Name: ASF Excessive Clearance Under The Threshing Drum
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfExcessiveClearanceUnderTheThreshingDrum *uint32 `protobuf:"varint,130,opt,name=asf_excessive_clearance_under_the_threshing_drum,json=asfExcessiveClearanceUnderTheThreshingDrum,proto3,oneof" json:"asf_excessive_clearance_under_the_threshing_drum,omitempty"`
	// Parameter ID: 1024
	// Property Name: ASF Low Temperature Of Drive System Hydraulics Less Than 5 Grades
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfLowTemperatureOfDriveSystemHydraulicsLessThan_5Grades *uint32 `protobuf:"varint,131,opt,name=asf_low_temperature_of_drive_system_hydraulics_less_than_5_grades,json=asfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades,proto3,oneof" json:"asf_low_temperature_of_drive_system_hydraulics_less_than_5_grades,omitempty"`
	// Parameter ID: 1025
	// Property Name: ASF High Temperature Of Drive System Hydraulics Greater Than 86 Grades
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan_86Grades *uint32 `protobuf:"varint,132,opt,name=asf_high_temperature_of_drive_system_hydraulics_greater_than_86_grades,json=asfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades,proto3,oneof" json:"asf_high_temperature_of_drive_system_hydraulics_greater_than_86_grades,omitempty"`
	// Parameter ID: 1026
	// Property Name: ASF Ear Auger Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfEarAugerSpeedBelowTheNorm *uint32 `protobuf:"varint,133,opt,name=asf_ear_auger_speed_below_the_norm,json=asfEarAugerSpeedBelowTheNorm,proto3,oneof" json:"asf_ear_auger_speed_below_the_norm,omitempty"`
	// Parameter ID: 1027
	// Property Name: ASF Grain Auger Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainAugerSpeedBelowTheNorm *uint32 `protobuf:"varint,134,opt,name=asf_grain_auger_speed_below_the_norm,json=asfGrainAugerSpeedBelowTheNorm,proto3,oneof" json:"asf_grain_auger_speed_below_the_norm,omitempty"`
	// Parameter ID: 1028
	// Property Name: ASF Straw Chooper Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfStrawChooperSpeedBelowTheNorm *uint32 `protobuf:"varint,135,opt,name=asf_straw_chooper_speed_below_the_norm,json=asfStrawChooperSpeedBelowTheNorm,proto3,oneof" json:"asf_straw_chooper_speed_below_the_norm,omitempty"`
	// Parameter ID: 1029
	// Property Name: ASF Straw Shaker Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfStrawShakerSpeedBelowTheNorm *uint32 `protobuf:"varint,136,opt,name=asf_straw_shaker_speed_below_the_norm,json=asfStrawShakerSpeedBelowTheNorm,proto3,oneof" json:"asf_straw_shaker_speed_below_the_norm,omitempty"`
	// Parameter ID: 1030
	// Property Name: ASF Feeder Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfFeederSpeedBelowTheNorm *uint32 `protobuf:"varint,137,opt,name=asf_feeder_speed_below_the_norm,json=asfFeederSpeedBelowTheNorm,proto3,oneof" json:"asf_feeder_speed_below_the_norm,omitempty"`
	// Parameter ID: 1031
	// Property Name: ASF Straw Chopper Switched On
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfStrawChopperSwitchedOn *uint32 `protobuf:"varint,138,opt,name=asf_straw_chopper_switched_on,json=asfStrawChopperSwitchedOn,proto3,oneof" json:"asf_straw_chopper_switched_on,omitempty"`
	// Parameter ID: 1032
	// Property Name: ASF Corn Header Connected
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfCornHeaderConnected *uint32 `protobuf:"varint,139,opt,name=asf_corn_header_connected,json=asfCornHeaderConnected,proto3,oneof" json:"asf_corn_header_connected,omitempty"`
	// Parameter ID: 1033
	// Property Name: ASF Grain Header Connected
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainHeaderConnected *uint32 `protobuf:"varint,140,opt,name=asf_grain_header_connected,json=asfGrainHeaderConnected,proto3,oneof" json:"asf_grain_header_connected,omitempty"`
	// Parameter ID: 1034
	// Property Name: ASF Feeder Reverse Switched On
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFeederReverseSwitchedOn *uint32 `protobuf:"varint,141,opt,name=asf_feeder_reverse_switched_on,json=asfFeederReverseSwitchedOn,proto3,oneof" json:"asf_feeder_reverse_switched_on,omitempty"`
	// Parameter ID: 1035
	// Property Name: ASF The Pressure Filter Of The Hydraulic Pump Is Clogged
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfThePressureFilterOfTheHydraulicPumpIsClogged *uint32 `protobuf:"varint,142,opt,name=asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged,json=asfThePressureFilterOfTheHydraulicPumpIsClogged,proto3,oneof" json:"asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged,omitempty"`
	// Parameter ID: 1087
	// Property Name: ASF Adapter Pressure Filter Sensor
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfAdapterPressureFilterSensor *uint32 `protobuf:"varint,143,opt,name=asf_adapter_pressure_filter_sensor,json=asfAdapterPressureFilterSensor,proto3,oneof" json:"asf_adapter_pressure_filter_sensor,omitempty"`
	// Parameter ID: 1088
	// Property Name: ASF Service 2 Required Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfService_2RequiredIndicator *uint32 `protobuf:"varint,144,opt,name=asf_service_2_required_indicator,json=asfService2RequiredIndicator,proto3,oneof" json:"asf_service_2_required_indicator,omitempty"`
	// Parameter ID: 1089
	// Property Name: ASF Drain Filter Clogged Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfDrainFilterCloggedIndicator *uint32 `protobuf:"varint,145,opt,name=asf_drain_filter_clogged_indicator,json=asfDrainFilterCloggedIndicator,proto3,oneof" json:"asf_drain_filter_clogged_indicator,omitempty"`
	// Parameter ID: 1090
	// Property Name: ASF Section 1 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_1Spraying *uint32 `protobuf:"varint,146,opt,name=asf_section_1_spraying,json=asfSection1Spraying,proto3,oneof" json:"asf_section_1_spraying,omitempty"`
	// Parameter ID: 1091
	// Property Name: ASF Section 2 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_2Spraying *uint32 `protobuf:"varint,147,opt,name=asf_section_2_spraying,json=asfSection2Spraying,proto3,oneof" json:"asf_section_2_spraying,omitempty"`
	// Parameter ID: 1092
	// Property Name: ASF Section 3 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_3Spraying *uint32 `protobuf:"varint,148,opt,name=asf_section_3_spraying,json=asfSection3Spraying,proto3,oneof" json:"asf_section_3_spraying,omitempty"`
	// Parameter ID: 1093
	// Property Name: ASF Section 4 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_4Spraying *uint32 `protobuf:"varint,149,opt,name=asf_section_4_spraying,json=asfSection4Spraying,proto3,oneof" json:"asf_section_4_spraying,omitempty"`
	// Parameter ID: 1094
	// Property Name: ASF Section 5 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_5Spraying *uint32 `protobuf:"varint,150,opt,name=asf_section_5_spraying,json=asfSection5Spraying,proto3,oneof" json:"asf_section_5_spraying,omitempty"`
	// Parameter ID: 1095
	// Property Name: ASF Section 6 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_6Spraying *uint32 `protobuf:"varint,151,opt,name=asf_section_6_spraying,json=asfSection6Spraying,proto3,oneof" json:"asf_section_6_spraying,omitempty"`
	// Parameter ID: 1096
	// Property Name: ASF Section 7 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_7Spraying *uint32 `protobuf:"varint,152,opt,name=asf_section_7_spraying,json=asfSection7Spraying,proto3,oneof" json:"asf_section_7_spraying,omitempty"`
	// Parameter ID: 1097
	// Property Name: ASF Section 8 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_8Spraying *uint32 `protobuf:"varint,153,opt,name=asf_section_8_spraying,json=asfSection8Spraying,proto3,oneof" json:"asf_section_8_spraying,omitempty"`
	// Parameter ID: 1098
	// Property Name: ASF Section 9 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection_9Spraying *uint32 `protobuf:"varint,154,opt,name=asf_section_9_spraying,json=asfSection9Spraying,proto3,oneof" json:"asf_section_9_spraying,omitempty"`
	// Parameter ID: 1036
	// Property Name: USF Spreading
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfSpreading *uint32 `protobuf:"varint,155,opt,name=usf_spreading,json=usfSpreading,proto3,oneof" json:"usf_spreading,omitempty"`
	// Parameter ID: 1037
	// Property Name: USF Pouring Chemicals
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfPouringChemicals *uint32 `protobuf:"varint,156,opt,name=usf_pouring_chemicals,json=usfPouringChemicals,proto3,oneof" json:"usf_pouring_chemicals,omitempty"`
	// Parameter ID: 1038
	// Property Name: USF Conveyor Belt
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfConveyorBelt *uint32 `protobuf:"varint,157,opt,name=usf_conveyor_belt,json=usfConveyorBelt,proto3,oneof" json:"usf_conveyor_belt,omitempty"`
	// Parameter ID: 1039
	// Property Name: USF Salt Spreader's Drive Wheel
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfSaltSpreaderSDriveWheel *uint32 `protobuf:"varint,158,opt,name=usf_salt_spreader_s_drive_wheel,json=usfSaltSpreaderSDriveWheel,proto3,oneof" json:"usf_salt_spreader_s_drive_wheel,omitempty"`
	// Parameter ID: 1040
	// Property Name: USF Brushes
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfBrushes *uint32 `protobuf:"varint,159,opt,name=usf_brushes,json=usfBrushes,proto3,oneof" json:"usf_brushes,omitempty"`
	// Parameter ID: 1041
	// Property Name: USF Vacuum Cleaner
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfVacuumCleaner *uint32 `protobuf:"varint,160,opt,name=usf_vacuum_cleaner,json=usfVacuumCleaner,proto3,oneof" json:"usf_vacuum_cleaner,omitempty"`
	// Parameter ID: 1042
	// Property Name: USF Water Supply
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfWaterSupply *uint32 `protobuf:"varint,161,opt,name=usf_water_supply,json=usfWaterSupply,proto3,oneof" json:"usf_water_supply,omitempty"`
	// Parameter ID: 1044
	// Property Name: USF Liquid pump
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfLiquidPump *uint32 `protobuf:"varint,163,opt,name=usf_liquid_pump,json=usfLiquidPump,proto3,oneof" json:"usf_liquid_pump,omitempty"`
	// Parameter ID: 1045
	// Property Name: USF Unloading From The Hopper
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfUnloadingFromTheHopper *uint32 `protobuf:"varint,164,opt,name=usf_unloading_from_the_hopper,json=usfUnloadingFromTheHopper,proto3,oneof" json:"usf_unloading_from_the_hopper,omitempty"`
	// Parameter ID: 1046
	// Property Name: USF Low Salt (Sand) Level In Container Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfLowSaltSandLevelInContainerIndicator *uint32 `protobuf:"varint,165,opt,name=usf_low_salt_sand_level_in_container_indicator,json=usfLowSaltSandLevelInContainerIndicator,proto3,oneof" json:"usf_low_salt_sand_level_in_container_indicator,omitempty"`
	// Parameter ID: 1047
	// Property Name: USF Low Water Level in Container Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfLowWaterLevelInContainerIndicator *uint32 `protobuf:"varint,166,opt,name=usf_low_water_level_in_container_indicator,json=usfLowWaterLevelInContainerIndicator,proto3,oneof" json:"usf_low_water_level_in_container_indicator,omitempty"`
	// Parameter ID: 1048
	// Property Name: USF Chemicals
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfChemicals *uint32 `protobuf:"varint,167,opt,name=usf_chemicals,json=usfChemicals,proto3,oneof" json:"usf_chemicals,omitempty"`
	// Parameter ID: 1049
	// Property Name: USF Compressor
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfCompressor *uint32 `protobuf:"varint,168,opt,name=usf_compressor,json=usfCompressor,proto3,oneof" json:"usf_compressor,omitempty"`
	// Parameter ID: 1050
	// Property Name: USF Water Valve Is Opened
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfWaterValveIsOpened *uint32 `protobuf:"varint,169,opt,name=usf_water_valve_is_opened,json=usfWaterValveIsOpened,proto3,oneof" json:"usf_water_valve_is_opened,omitempty"`
	// Parameter ID: 1051
	// Property Name: USF Cabin Moved Up Status Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfCabinMovedUpStatusActive *uint32 `protobuf:"varint,170,opt,name=usf_cabin_moved_up_status_active,json=usfCabinMovedUpStatusActive,proto3,oneof" json:"usf_cabin_moved_up_status_active,omitempty"`
	// Parameter ID: 1052
	// Property Name: USF Cabin Moved Down Status Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfCabinMovedDownStatusActive *uint32 `protobuf:"varint,171,opt,name=usf_cabin_moved_down_status_active,json=usfCabinMovedDownStatusActive,proto3,oneof" json:"usf_cabin_moved_down_status_active,omitempty"`
	// Parameter ID: 1099
	// Property Name: USF Hydraulics Work Not Permitted
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfHydraulicsWorkNotPermitted *uint32 `protobuf:"varint,172,opt,name=usf_hydraulics_work_not_permitted,json=usfHydraulicsWorkNotPermitted,proto3,oneof" json:"usf_hydraulics_work_not_permitted,omitempty"`
	// Parameter ID: 1053
	// Property Name: CiSF Section 1 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_1PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,173,opt,name=cisf_section_1_presence_of_fluid_in_the_downpipe,json=cisfSection1PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_1_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1054
	// Property Name: CiSF Section 1 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_1Filled *uint32 `protobuf:"varint,174,opt,name=cisf_section_1_filled,json=cisfSection1Filled,proto3,oneof" json:"cisf_section_1_filled,omitempty"`
	// Parameter ID: 1055
	// Property Name: CiSF Section 1 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_1Overfilled *uint32 `protobuf:"varint,175,opt,name=cisf_section_1_overfilled,json=cisfSection1Overfilled,proto3,oneof" json:"cisf_section_1_overfilled,omitempty"`
	// Parameter ID: 1056
	// Property Name: CiSF Section 2 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_2PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,176,opt,name=cisf_section_2_presence_of_fluid_in_the_downpipe,json=cisfSection2PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_2_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1057
	// Property Name: CiSF Section 2 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_2Filled *uint32 `protobuf:"varint,177,opt,name=cisf_section_2_filled,json=cisfSection2Filled,proto3,oneof" json:"cisf_section_2_filled,omitempty"`
	// Parameter ID: 1058
	// Property Name: CiSF Section 2 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_2Overfilled *uint32 `protobuf:"varint,178,opt,name=cisf_section_2_overfilled,json=cisfSection2Overfilled,proto3,oneof" json:"cisf_section_2_overfilled,omitempty"`
	// Parameter ID: 1059
	// Property Name: CiSF Section 3 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_3PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,179,opt,name=cisf_section_3_presence_of_fluid_in_the_downpipe,json=cisfSection3PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_3_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1060
	// Property Name: CiSF Section 3 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_3Filled *uint32 `protobuf:"varint,180,opt,name=cisf_section_3_filled,json=cisfSection3Filled,proto3,oneof" json:"cisf_section_3_filled,omitempty"`
	// Parameter ID: 1061
	// Property Name: CiSF Section 3 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_3Overfilled *uint32 `protobuf:"varint,181,opt,name=cisf_section_3_overfilled,json=cisfSection3Overfilled,proto3,oneof" json:"cisf_section_3_overfilled,omitempty"`
	// Parameter ID: 1062
	// Property Name: CiSF Section 4 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_4PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,182,opt,name=cisf_section_4_presence_of_fluid_in_the_downpipe,json=cisfSection4PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_4_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1063
	// Property Name: CiSF Section 4 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_4Filled *uint32 `protobuf:"varint,183,opt,name=cisf_section_4_filled,json=cisfSection4Filled,proto3,oneof" json:"cisf_section_4_filled,omitempty"`
	// Parameter ID: 1064
	// Property Name: CiSF Section 4 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_4Overfilled *uint32 `protobuf:"varint,184,opt,name=cisf_section_4_overfilled,json=cisfSection4Overfilled,proto3,oneof" json:"cisf_section_4_overfilled,omitempty"`
	// Parameter ID: 1065
	// Property Name: CiSF Section 5 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_5PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,185,opt,name=cisf_section_5_presence_of_fluid_in_the_downpipe,json=cisfSection5PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_5_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1066
	// Property Name: CiSF Section 5 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_5Filled *uint32 `protobuf:"varint,186,opt,name=cisf_section_5_filled,json=cisfSection5Filled,proto3,oneof" json:"cisf_section_5_filled,omitempty"`
	// Parameter ID: 1067
	// Property Name: CiSF Section 5 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_5Overfilled *uint32 `protobuf:"varint,187,opt,name=cisf_section_5_overfilled,json=cisfSection5Overfilled,proto3,oneof" json:"cisf_section_5_overfilled,omitempty"`
	// Parameter ID: 1068
	// Property Name: CiSF Section 6 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_6PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,188,opt,name=cisf_section_6_presence_of_fluid_in_the_downpipe,json=cisfSection6PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_6_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1069
	// Property Name: CiSF Section 6 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_6Filled *uint32 `protobuf:"varint,189,opt,name=cisf_section_6_filled,json=cisfSection6Filled,proto3,oneof" json:"cisf_section_6_filled,omitempty"`
	// Parameter ID: 1070
	// Property Name: CiSF Section 6 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_6Overfilled *uint32 `protobuf:"varint,190,opt,name=cisf_section_6_overfilled,json=cisfSection6Overfilled,proto3,oneof" json:"cisf_section_6_overfilled,omitempty"`
	// Parameter ID: 1071
	// Property Name: CiSF Section 7 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_7PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,191,opt,name=cisf_section_7_presence_of_fluid_in_the_downpipe,json=cisfSection7PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_7_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1072
	// Property Name: CiSF Section 7 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_7Filled *uint32 `protobuf:"varint,192,opt,name=cisf_section_7_filled,json=cisfSection7Filled,proto3,oneof" json:"cisf_section_7_filled,omitempty"`
	// Parameter ID: 1073
	// Property Name: CiSF Section 7 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_7Overfilled *uint32 `protobuf:"varint,193,opt,name=cisf_section_7_overfilled,json=cisfSection7Overfilled,proto3,oneof" json:"cisf_section_7_overfilled,omitempty"`
	// Parameter ID: 1074
	// Property Name: CiSF Section 8 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection_8PresenceOfFluidInTheDownpipe *uint32 `protobuf:"varint,194,opt,name=cisf_section_8_presence_of_fluid_in_the_downpipe,json=cisfSection8PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section_8_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1075
	// Property Name: CiSF Section 8 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_8Filled *uint32 `protobuf:"varint,195,opt,name=cisf_section_8_filled,json=cisfSection8Filled,proto3,oneof" json:"cisf_section_8_filled,omitempty"`
	// Parameter ID: 1076
	// Property Name: CiSF Section 8 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection_8Overfilled *uint32 `protobuf:"varint,196,opt,name=cisf_section_8_overfilled,json=cisfSection8Overfilled,proto3,oneof" json:"cisf_section_8_overfilled,omitempty"`
	// Parameter ID: 400
	// Property Name: Distance to Next Service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values:
	DistanceToNextService *uint64 `protobuf:"varint,197,opt,name=distance_to_next_service,json=distanceToNextService,proto3,oneof" json:"distance_to_next_service,omitempty"`
	// Parameter ID: 450
	// Property Name: CNG Level Kg
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 10
	// Units: Kg
	// Values: CNG Level Kg (appears only if CNG level percentage is not available)
	CngLevelKg *uint32 `protobuf:"varint,198,opt,name=cng_level_kg,json=cngLevelKg,proto3,oneof" json:"cng_level_kg,omitempty"`
	// Parameter ID: 859
	// Property Name: Distance from need of service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Service - distance elapsed since the occurrence of the need for servicing
	DistanceFromNeedOfService *uint64 `protobuf:"varint,199,opt,name=distance_from_need_of_service,json=distanceFromNeedOfService,proto3,oneof" json:"distance_from_need_of_service,omitempty"`
	// Parameter ID: 860
	// Property Name: Distance from last service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Service - distance from the last service
	DistanceFromLastService *uint64 `protobuf:"varint,200,opt,name=distance_from_last_service,json=distanceFromLastService,proto3,oneof" json:"distance_from_last_service,omitempty"`
	// Parameter ID: 861
	// Property Name: Time to next service
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time to next service
	TimeToNextService *uint32 `protobuf:"varint,201,opt,name=time_to_next_service,json=timeToNextService,proto3,oneof" json:"time_to_next_service,omitempty"`
	// Parameter ID: 862
	// Property Name: Time from need of service
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time exceeded since the occurrence of the need for servicing
	TimeFromNeedOfService *uint32 `protobuf:"varint,202,opt,name=time_from_need_of_service,json=timeFromNeedOfService,proto3,oneof" json:"time_from_need_of_service,omitempty"`
	// Parameter ID: 863
	// Property Name: Time from last serivce
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time elapsed since the last service
	TimeFromLastSerivce *uint32 `protobuf:"varint,203,opt,name=time_from_last_serivce,json=timeFromLastSerivce,proto3,oneof" json:"time_from_last_serivce,omitempty"`
	// Parameter ID: 864
	// Property Name: Distance to next oil service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Service - distance to next oil service
	DistanceToNextOilService *uint64 `protobuf:"varint,204,opt,name=distance_to_next_oil_service,json=distanceToNextOilService,proto3,oneof" json:"distance_to_next_oil_service,omitempty"`
	// Parameter ID: 865
	// Property Name: Time to next oil service
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time to next oil service
	TimeToNextOilService *uint32 `protobuf:"varint,205,opt,name=time_to_next_oil_service,json=timeToNextOilService,proto3,oneof" json:"time_to_next_oil_service,omitempty"`
	// Parameter ID: 866
	// Property Name: LVCAN Vehicle Range
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Information about vehicle range
	LvcanVehicleRange *uint64 `protobuf:"varint,206,opt,name=lvcan_vehicle_range,json=lvcanVehicleRange,proto3,oneof" json:"lvcan_vehicle_range,omitempty"`
	// Parameter ID: 867
	// Property Name: LVCAN Total CNG counted
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: kg
	// Values: Information about Total CNG used in counted mode
	LvcanTotalCngCounted *uint64 `protobuf:"varint,207,opt,name=lvcan_total_cng_counted,json=lvcanTotalCngCounted,proto3,oneof" json:"lvcan_total_cng_counted,omitempty"`
	// Parameter ID: 1079
	// Property Name: Total Bale Count
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Total Bale Count
	TotalBaleCount *uint64 `protobuf:"varint,208,opt,name=total_bale_count,json=totalBaleCount,proto3,oneof" json:"total_bale_count,omitempty"`
	// Parameter ID: 1080
	// Property Name: Bale Count
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Bale Count
	BaleCount *uint64 `protobuf:"varint,209,opt,name=bale_count,json=baleCount,proto3,oneof" json:"bale_count,omitempty"`
	// Parameter ID: 1081
	// Property Name: Cut Bale Count
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Cut Bale Count
	CutBaleCount *uint64 `protobuf:"varint,210,opt,name=cut_bale_count,json=cutBaleCount,proto3,oneof" json:"cut_bale_count,omitempty"`
	// Parameter ID: 1082
	// Property Name: Bale Slices
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Bale Slices
	BaleSlices *uint64 `protobuf:"varint,211,opt,name=bale_slices,json=baleSlices,proto3,oneof" json:"bale_slices,omitempty"`
	// Parameter ID: 1116
	// Property Name: LVCAN MaxRoadSpeed
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 255
	// Multiplier: -
	// Units: km/h
	// Values: Maximum speed from road signs
	LvcanMaxroadspeed *uint32 `protobuf:"varint,212,opt,name=lvcan_maxroadspeed,json=lvcanMaxroadspeed,proto3,oneof" json:"lvcan_maxroadspeed,omitempty"`
	// Parameter ID: 1117
	// Property Name: LVCAN ExceededRoadSpeed
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 255
	// Multiplier: -
	// Units: km/h
	// Values: Exceeded speed from road signs
	LvcanExceededroadspeed *uint32 `protobuf:"varint,213,opt,name=lvcan_exceededroadspeed,json=lvcanExceededroadspeed,proto3,oneof" json:"lvcan_exceededroadspeed,omitempty"`
	// Parameter ID: 1205
	// Property Name: LVCAN RSF SpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "Speed limit with value" is recognized/canceled
	LvcanRsfSpeedlimitsign *uint32 `protobuf:"varint,214,opt,name=lvcan_rsf_speedlimitsign,json=lvcanRsfSpeedlimitsign,proto3,oneof" json:"lvcan_rsf_speedlimitsign,omitempty"`
	// Parameter ID: 1206
	// Property Name: LVCAN RSF EndOfSpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "End of speed limit with value" is recognized/canceled
	LvcanRsfEndofspeedlimitsign *uint32 `protobuf:"varint,215,opt,name=lvcan_rsf_endofspeedlimitsign,json=lvcanRsfEndofspeedlimitsign,proto3,oneof" json:"lvcan_rsf_endofspeedlimitsign,omitempty"`
	// Parameter ID: 1207
	// Property Name: LVCAN RSF SpeedExceeded
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if speed is exceeded indicated by road sign "Speed limit with value"
	LvcanRsfSpeedexceeded *uint32 `protobuf:"varint,216,opt,name=lvcan_rsf_speedexceeded,json=lvcanRsfSpeedexceeded,proto3,oneof" json:"lvcan_rsf_speedexceeded,omitempty"`
	// Parameter ID: 1208
	// Property Name: LVCAN RSF TimeSpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "Conditional time-specific speed limit with value" is recognized/canceled
	LvcanRsfTimespeedlimitsign *uint32 `protobuf:"varint,217,opt,name=lvcan_rsf_timespeedlimitsign,json=lvcanRsfTimespeedlimitsign,proto3,oneof" json:"lvcan_rsf_timespeedlimitsign,omitempty"`
	// Parameter ID: 1209
	// Property Name: LVCAN RSF WthrSpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "Speed limit with value due to weather conditions" is recognized/cancelled
	LvcanRsfWthrspeedlimitsign *uint32 `protobuf:"varint,218,opt,name=lvcan_rsf_wthrspeedlimitsign,json=lvcanRsfWthrspeedlimitsign,proto3,oneof" json:"lvcan_rsf_wthrspeedlimitsign,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Compact) Reset() {
	*x = Compact{}
	mi := &file_packets_packets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compact) ProtoMessage() {}

func (x *Compact) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compact.ProtoReflect.Descriptor instead.
func (*Compact) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{5}
}

func (x *Compact) GetMovement() bool {
	if x != nil && x.Movement != nil {
		return *x.Movement
	}
	return false
}

func (x *Compact) GetDataMode() uint32 {
	if x != nil && x.DataMode != nil {
		return *x.DataMode
	}
	return 0
}

func (x *Compact) GetGsmSignal() uint32 {
	if x != nil && x.GsmSignal != nil {
		return *x.GsmSignal
	}
	return 0
}

func (x *Compact) GetSleepMode() uint32 {
	if x != nil && x.SleepMode != nil {
		return *x.SleepMode
	}
	return 0
}

func (x *Compact) GetGnssStatus() uint32 {
	if x != nil && x.GnssStatus != nil {
		return *x.GnssStatus
	}
	return 0
}

func (x *Compact) GetGnssPdop() uint32 {
	if x != nil && x.GnssPdop != nil {
		return *x.GnssPdop
	}
	return 0
}

func (x *Compact) GetGnssHdop() uint32 {
	if x != nil && x.GnssHdop != nil {
		return *x.GnssHdop
	}
	return 0
}

func (x *Compact) GetExternalVoltage() uint32 {
	if x != nil && x.ExternalVoltage != nil {
		return *x.ExternalVoltage
	}
	return 0
}

func (x *Compact) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Compact) GetGsmCellId() uint32 {
	if x != nil && x.GsmCellId != nil {
		return *x.GsmCellId
	}
	return 0
}

func (x *Compact) GetGsmAreaCode() uint32 {
	if x != nil && x.GsmAreaCode != nil {
		return *x.GsmAreaCode
	}
	return 0
}

func (x *Compact) GetBatteryVoltage() uint32 {
	if x != nil && x.BatteryVoltage != nil {
		return *x.BatteryVoltage
	}
	return 0
}

func (x *Compact) GetBatteryCurrent() uint32 {
	if x != nil && x.BatteryCurrent != nil {
		return *x.BatteryCurrent
	}
	return 0
}

func (x *Compact) GetActiveGsmOperator() uint32 {
	if x != nil && x.ActiveGsmOperator != nil {
		return *x.ActiveGsmOperator
	}
	return 0
}

func (x *Compact) GetTripOdometer() uint32 {
	if x != nil && x.TripOdometer != nil {
		return *x.TripOdometer
	}
	return 0
}

func (x *Compact) GetTotalOdometer() uint64 {
	if x != nil && x.TotalOdometer != nil {
		return *x.TotalOdometer
	}
	return 0
}

func (x *Compact) GetDigitalInput1() bool {
	if x != nil && x.DigitalInput1 != nil {
		return *x.DigitalInput1
	}
	return false
}

func (x *Compact) GetAnalogInput1() uint32 {
	if x != nil && x.AnalogInput1 != nil {
		return *x.AnalogInput1
	}
	return 0
}

func (x *Compact) GetDigitalOutput1() bool {
	if x != nil && x.DigitalOutput1 != nil {
		return *x.DigitalOutput1
	}
	return false
}

func (x *Compact) GetFuelUsedGps() uint32 {
	if x != nil && x.FuelUsedGps != nil {
		return *x.FuelUsedGps
	}
	return 0
}

func (x *Compact) GetFuelRateGps() uint32 {
	if x != nil && x.FuelRateGps != nil {
		return *x.FuelRateGps
	}
	return 0
}

func (x *Compact) GetAxisX() int32 {
	if x != nil && x.AxisX != nil {
		return *x.AxisX
	}
	return 0
}

func (x *Compact) GetAxisY() int32 {
	if x != nil && x.AxisY != nil {
		return *x.AxisY
	}
	return 0
}

func (x *Compact) GetAxisZ() int32 {
	if x != nil && x.AxisZ != nil {
		return *x.AxisZ
	}
	return 0
}

func (x *Compact) GetIccid1() uint64 {
	if x != nil && x.Iccid1 != nil {
		return *x.Iccid1
	}
	return 0
}

func (x *Compact) GetSdStatus() bool {
	if x != nil && x.SdStatus != nil {
		return *x.SdStatus
	}
	return false
}

func (x *Compact) GetDigitalInput2() bool {
	if x != nil && x.DigitalInput2 != nil {
		return *x.DigitalInput2
	}
	return false
}

func (x *Compact) GetDigitalInput3() bool {
	if x != nil && x.DigitalInput3 != nil {
		return *x.DigitalInput3
	}
	return false
}

func (x *Compact) GetAnalogInput2() uint32 {
	if x != nil && x.AnalogInput2 != nil {
		return *x.AnalogInput2
	}
	return 0
}

func (x *Compact) GetDigitalOutput2() bool {
	if x != nil && x.DigitalOutput2 != nil {
		return *x.DigitalOutput2
	}
	return false
}

func (x *Compact) GetDallasTemperature1() int32 {
	if x != nil && x.DallasTemperature1 != nil {
		return *x.DallasTemperature1
	}
	return 0
}

func (x *Compact) GetDallasTemperature2() int32 {
	if x != nil && x.DallasTemperature2 != nil {
		return *x.DallasTemperature2
	}
	return 0
}

func (x *Compact) GetDallasTemperature3() int32 {
	if x != nil && x.DallasTemperature3 != nil {
		return *x.DallasTemperature3
	}
	return 0
}

func (x *Compact) GetDallasTemperature4() int32 {
	if x != nil && x.DallasTemperature4 != nil {
		return *x.DallasTemperature4
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId1() uint64 {
	if x != nil && x.DallasTemperatureId1 != nil {
		return *x.DallasTemperatureId1
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId2() uint64 {
	if x != nil && x.DallasTemperatureId2 != nil {
		return *x.DallasTemperatureId2
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId3() uint64 {
	if x != nil && x.DallasTemperatureId3 != nil {
		return *x.DallasTemperatureId3
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId4() uint64 {
	if x != nil && x.DallasTemperatureId4 != nil {
		return *x.DallasTemperatureId4
	}
	return 0
}

func (x *Compact) GetIbutton() uint64 {
	if x != nil && x.Ibutton != nil {
		return *x.Ibutton
	}
	return 0
}

func (x *Compact) GetRfid() uint64 {
	if x != nil && x.Rfid != nil {
		return *x.Rfid
	}
	return 0
}

func (x *Compact) GetLls_1FuelLevel() int32 {
	if x != nil && x.Lls_1FuelLevel != nil {
		return *x.Lls_1FuelLevel
	}
	return 0
}

func (x *Compact) GetLls_1Temperature() int32 {
	if x != nil && x.Lls_1Temperature != nil {
		return *x.Lls_1Temperature
	}
	return 0
}

func (x *Compact) GetLls_2FuelLevel() int32 {
	if x != nil && x.Lls_2FuelLevel != nil {
		return *x.Lls_2FuelLevel
	}
	return 0
}

func (x *Compact) GetLls_2Temperature() int32 {
	if x != nil && x.Lls_2Temperature != nil {
		return *x.Lls_2Temperature
	}
	return 0
}

func (x *Compact) GetLls_3FuelLevel() uint32 {
	if x != nil && x.Lls_3FuelLevel != nil {
		return *x.Lls_3FuelLevel
	}
	return 0
}

func (x *Compact) GetLls_3Temperature() int32 {
	if x != nil && x.Lls_3Temperature != nil {
		return *x.Lls_3Temperature
	}
	return 0
}

func (x *Compact) GetLls_4FuelLevel() int32 {
	if x != nil && x.Lls_4FuelLevel != nil {
		return *x.Lls_4FuelLevel
	}
	return 0
}

func (x *Compact) GetLls_4Temperature() int32 {
	if x != nil && x.Lls_4Temperature != nil {
		return *x.Lls_4Temperature
	}
	return 0
}

func (x *Compact) GetLls_5FuelLevel() int32 {
	if x != nil && x.Lls_5FuelLevel != nil {
		return *x.Lls_5FuelLevel
	}
	return 0
}

func (x *Compact) GetLls_5Temperature() int32 {
	if x != nil && x.Lls_5Temperature != nil {
		return *x.Lls_5Temperature
	}
	return 0
}

func (x *Compact) GetEcoScore() uint32 {
	if x != nil && x.EcoScore != nil {
		return *x.EcoScore
	}
	return 0
}

func (x *Compact) GetBatteryLevel() uint32 {
	if x != nil && x.BatteryLevel != nil {
		return *x.BatteryLevel
	}
	return 0
}

func (x *Compact) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Compact) GetNetworkType() uint32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *Compact) GetPulseCounterDin1() uint64 {
	if x != nil && x.PulseCounterDin1 != nil {
		return *x.PulseCounterDin1
	}
	return 0
}

func (x *Compact) GetPulseCounterDin2() uint64 {
	if x != nil && x.PulseCounterDin2 != nil {
		return *x.PulseCounterDin2
	}
	return 0
}

func (x *Compact) GetBtStatus() uint32 {
	if x != nil && x.BtStatus != nil {
		return *x.BtStatus
	}
	return 0
}

func (x *Compact) GetBarcodeId() string {
	if x != nil && x.BarcodeId != nil {
		return *x.BarcodeId
	}
	return ""
}

func (x *Compact) GetInstantMovement() uint32 {
	if x != nil && x.InstantMovement != nil {
		return *x.InstantMovement
	}
	return 0
}

func (x *Compact) GetUl202_02SensorFuelLevel() int32 {
	if x != nil && x.Ul202_02SensorFuelLevel != nil {
		return *x.Ul202_02SensorFuelLevel
	}
	return 0
}

func (x *Compact) GetUl202_02SensorStatus() uint32 {
	if x != nil && x.Ul202_02SensorStatus != nil {
		return *x.Ul202_02SensorStatus
	}
	return 0
}

func (x *Compact) GetDigitalOutput_3() bool {
	if x != nil && x.DigitalOutput_3 != nil {
		return *x.DigitalOutput_3
	}
	return false
}

func (x *Compact) GetGroundSense() uint32 {
	if x != nil && x.GroundSense != nil {
		return *x.GroundSense
	}
	return 0
}

func (x *Compact) GetIso6709Coordinates() []byte {
	if x != nil {
		return x.Iso6709Coordinates
	}
	return nil
}

func (x *Compact) GetUmtsLteCellId() uint64 {
	if x != nil && x.UmtsLteCellId != nil {
		return *x.UmtsLteCellId
	}
	return 0
}

func (x *Compact) GetDriverName() uint64 {
	if x != nil && x.DriverName != nil {
		return *x.DriverName
	}
	return 0
}

func (x *Compact) GetDriverCardLicenseType() uint32 {
	if x != nil && x.DriverCardLicenseType != nil {
		return *x.DriverCardLicenseType
	}
	return 0
}

func (x *Compact) GetDriverGender() uint32 {
	if x != nil && x.DriverGender != nil {
		return *x.DriverGender
	}
	return 0
}

func (x *Compact) GetDriverCardId() uint64 {
	if x != nil && x.DriverCardId != nil {
		return *x.DriverCardId
	}
	return 0
}

func (x *Compact) GetDriverCardExpirationDate() uint32 {
	if x != nil && x.DriverCardExpirationDate != nil {
		return *x.DriverCardExpirationDate
	}
	return 0
}

func (x *Compact) GetDriverCardPlaceOfIssue() uint64 {
	if x != nil && x.DriverCardPlaceOfIssue != nil {
		return *x.DriverCardPlaceOfIssue
	}
	return 0
}

func (x *Compact) GetDriverStatusEvent() uint32 {
	if x != nil && x.DriverStatusEvent != nil {
		return *x.DriverStatusEvent
	}
	return 0
}

func (x *Compact) GetAinSpeed() uint32 {
	if x != nil && x.AinSpeed != nil {
		return *x.AinSpeed
	}
	return 0
}

func (x *Compact) GetMsp500VendorName() string {
	if x != nil && x.Msp500VendorName != nil {
		return *x.Msp500VendorName
	}
	return ""
}

func (x *Compact) GetMsp500VehicleNumber() string {
	if x != nil && x.Msp500VehicleNumber != nil {
		return *x.Msp500VehicleNumber
	}
	return ""
}

func (x *Compact) GetMsp500SpeedSensor() uint32 {
	if x != nil && x.Msp500SpeedSensor != nil {
		return *x.Msp500SpeedSensor
	}
	return 0
}

func (x *Compact) GetWakeReason() uint32 {
	if x != nil && x.WakeReason != nil {
		return *x.WakeReason
	}
	return 0
}

func (x *Compact) GetEyeTemperature_1() int32 {
	if x != nil && x.EyeTemperature_1 != nil {
		return *x.EyeTemperature_1
	}
	return 0
}

func (x *Compact) GetEyeTemperature_2() int32 {
	if x != nil && x.EyeTemperature_2 != nil {
		return *x.EyeTemperature_2
	}
	return 0
}

func (x *Compact) GetEyeTemperature_3() int32 {
	if x != nil && x.EyeTemperature_3 != nil {
		return *x.EyeTemperature_3
	}
	return 0
}

func (x *Compact) GetEyeTemperature_4() int32 {
	if x != nil && x.EyeTemperature_4 != nil {
		return *x.EyeTemperature_4
	}
	return 0
}

func (x *Compact) GetEyeHumidity_1() uint32 {
	if x != nil && x.EyeHumidity_1 != nil {
		return *x.EyeHumidity_1
	}
	return 0
}

func (x *Compact) GetEyeHumidity_2() uint32 {
	if x != nil && x.EyeHumidity_2 != nil {
		return *x.EyeHumidity_2
	}
	return 0
}

func (x *Compact) GetEyeHumidity_3() uint32 {
	if x != nil && x.EyeHumidity_3 != nil {
		return *x.EyeHumidity_3
	}
	return 0
}

func (x *Compact) GetEyeHumidity_4() uint32 {
	if x != nil && x.EyeHumidity_4 != nil {
		return *x.EyeHumidity_4
	}
	return 0
}

func (x *Compact) GetEyeMagnet_1() uint32 {
	if x != nil && x.EyeMagnet_1 != nil {
		return *x.EyeMagnet_1
	}
	return 0
}

func (x *Compact) GetEyeMagnet_2() uint32 {
	if x != nil && x.EyeMagnet_2 != nil {
		return *x.EyeMagnet_2
	}
	return 0
}

func (x *Compact) GetEyeMagnet_3() uint32 {
	if x != nil && x.EyeMagnet_3 != nil {
		return *x.EyeMagnet_3
	}
	return 0
}

func (x *Compact) GetEyeMagnet_4() uint32 {
	if x != nil && x.EyeMagnet_4 != nil {
		return *x.EyeMagnet_4
	}
	return 0
}

func (x *Compact) GetEyeMovement_1() uint32 {
	if x != nil && x.EyeMovement_1 != nil {
		return *x.EyeMovement_1
	}
	return 0
}

func (x *Compact) GetIsfCloggedBrakeSystemFilterIndicator() uint32 {
	if x != nil && x.IsfCloggedBrakeSystemFilterIndicator != nil {
		return *x.IsfCloggedBrakeSystemFilterIndicator
	}
	return 0
}

func (x *Compact) GetIsfLowWasherFluidLevelIndicator() uint32 {
	if x != nil && x.IsfLowWasherFluidLevelIndicator != nil {
		return *x.IsfLowWasherFluidLevelIndicator
	}
	return 0
}

func (x *Compact) GetIsfLowAdblueLevelIndicator() uint32 {
	if x != nil && x.IsfLowAdblueLevelIndicator != nil {
		return *x.IsfLowAdblueLevelIndicator
	}
	return 0
}

func (x *Compact) GetIsfLowTrailerTyrePressureIndicator() uint32 {
	if x != nil && x.IsfLowTrailerTyrePressureIndicator != nil {
		return *x.IsfLowTrailerTyrePressureIndicator
	}
	return 0
}

func (x *Compact) GetIsfWearOfTrailerBrakeLiningIndicator() uint32 {
	if x != nil && x.IsfWearOfTrailerBrakeLiningIndicator != nil {
		return *x.IsfWearOfTrailerBrakeLiningIndicator
	}
	return 0
}

func (x *Compact) GetIsfHighTrailerBrakeTemperatureIndicator() uint32 {
	if x != nil && x.IsfHighTrailerBrakeTemperatureIndicator != nil {
		return *x.IsfHighTrailerBrakeTemperatureIndicator
	}
	return 0
}

func (x *Compact) GetIsfIncorrectTrailerPneumaticSupplyIndicator() uint32 {
	if x != nil && x.IsfIncorrectTrailerPneumaticSupplyIndicator != nil {
		return *x.IsfIncorrectTrailerPneumaticSupplyIndicator
	}
	return 0
}

func (x *Compact) GetIsfLowCngLevelIndicator() uint32 {
	if x != nil && x.IsfLowCngLevelIndicator != nil {
		return *x.IsfLowCngLevelIndicator
	}
	return 0
}

func (x *Compact) GetAsfRightJoystickMovedRightActive() uint32 {
	if x != nil && x.AsfRightJoystickMovedRightActive != nil {
		return *x.AsfRightJoystickMovedRightActive
	}
	return 0
}

func (x *Compact) GetAsfRightJoystickMovedLeftActive() uint32 {
	if x != nil && x.AsfRightJoystickMovedLeftActive != nil {
		return *x.AsfRightJoystickMovedLeftActive
	}
	return 0
}

func (x *Compact) GetAsfRightJoystickMovedForwardActive() uint32 {
	if x != nil && x.AsfRightJoystickMovedForwardActive != nil {
		return *x.AsfRightJoystickMovedForwardActive
	}
	return 0
}

func (x *Compact) GetAsfRightJoystickMovedBackActive() uint32 {
	if x != nil && x.AsfRightJoystickMovedBackActive != nil {
		return *x.AsfRightJoystickMovedBackActive
	}
	return 0
}

func (x *Compact) GetAsfLeftJoystickMovedRightActive() uint32 {
	if x != nil && x.AsfLeftJoystickMovedRightActive != nil {
		return *x.AsfLeftJoystickMovedRightActive
	}
	return 0
}

func (x *Compact) GetAsfLeftJoystickMovedLeftActive() uint32 {
	if x != nil && x.AsfLeftJoystickMovedLeftActive != nil {
		return *x.AsfLeftJoystickMovedLeftActive
	}
	return 0
}

func (x *Compact) GetAsfLeftJoystickMovedForwardActive() uint32 {
	if x != nil && x.AsfLeftJoystickMovedForwardActive != nil {
		return *x.AsfLeftJoystickMovedForwardActive
	}
	return 0
}

func (x *Compact) GetAsfLeftJoystickMovedBackActive() uint32 {
	if x != nil && x.AsfLeftJoystickMovedBackActive != nil {
		return *x.AsfLeftJoystickMovedBackActive
	}
	return 0
}

func (x *Compact) GetAsfFirstRearHydraulic() uint32 {
	if x != nil && x.AsfFirstRearHydraulic != nil {
		return *x.AsfFirstRearHydraulic
	}
	return 0
}

func (x *Compact) GetAsfSecondRearHydraulic() uint32 {
	if x != nil && x.AsfSecondRearHydraulic != nil {
		return *x.AsfSecondRearHydraulic
	}
	return 0
}

func (x *Compact) GetAsfThirdRearHydraulic() uint32 {
	if x != nil && x.AsfThirdRearHydraulic != nil {
		return *x.AsfThirdRearHydraulic
	}
	return 0
}

func (x *Compact) GetAsfFourthRearHydraulic() uint32 {
	if x != nil && x.AsfFourthRearHydraulic != nil {
		return *x.AsfFourthRearHydraulic
	}
	return 0
}

func (x *Compact) GetAsfFirstFrontHydraulic() uint32 {
	if x != nil && x.AsfFirstFrontHydraulic != nil {
		return *x.AsfFirstFrontHydraulic
	}
	return 0
}

func (x *Compact) GetAsfSecondFrontHydraulic() uint32 {
	if x != nil && x.AsfSecondFrontHydraulic != nil {
		return *x.AsfSecondFrontHydraulic
	}
	return 0
}

func (x *Compact) GetAsfThirdFrontHydraulic() uint32 {
	if x != nil && x.AsfThirdFrontHydraulic != nil {
		return *x.AsfThirdFrontHydraulic
	}
	return 0
}

func (x *Compact) GetAsfFourthFrontHydraulic() uint32 {
	if x != nil && x.AsfFourthFrontHydraulic != nil {
		return *x.AsfFourthFrontHydraulic
	}
	return 0
}

func (x *Compact) GetAsfFrontThreePointHitch() uint32 {
	if x != nil && x.AsfFrontThreePointHitch != nil {
		return *x.AsfFrontThreePointHitch
	}
	return 0
}

func (x *Compact) GetAsfRearThreePointHitch() uint32 {
	if x != nil && x.AsfRearThreePointHitch != nil {
		return *x.AsfRearThreePointHitch
	}
	return 0
}

func (x *Compact) GetAsfFrontPowerTakeOff() uint32 {
	if x != nil && x.AsfFrontPowerTakeOff != nil {
		return *x.AsfFrontPowerTakeOff
	}
	return 0
}

func (x *Compact) GetAsfRearPowerTakeOff() uint32 {
	if x != nil && x.AsfRearPowerTakeOff != nil {
		return *x.AsfRearPowerTakeOff
	}
	return 0
}

func (x *Compact) GetAsfMowingActive() uint32 {
	if x != nil && x.AsfMowingActive != nil {
		return *x.AsfMowingActive
	}
	return 0
}

func (x *Compact) GetAsfThreshingActive() uint32 {
	if x != nil && x.AsfThreshingActive != nil {
		return *x.AsfThreshingActive
	}
	return 0
}

func (x *Compact) GetAsfGrainReleaseFromHopper() uint32 {
	if x != nil && x.AsfGrainReleaseFromHopper != nil {
		return *x.AsfGrainReleaseFromHopper
	}
	return 0
}

func (x *Compact) GetAsfGrainTankIs_100Full() uint32 {
	if x != nil && x.AsfGrainTankIs_100Full != nil {
		return *x.AsfGrainTankIs_100Full
	}
	return 0
}

func (x *Compact) GetAsfGrainTankIs_70Full() uint32 {
	if x != nil && x.AsfGrainTankIs_70Full != nil {
		return *x.AsfGrainTankIs_70Full
	}
	return 0
}

func (x *Compact) GetAsfGrainTankIsOpened() uint32 {
	if x != nil && x.AsfGrainTankIsOpened != nil {
		return *x.AsfGrainTankIsOpened
	}
	return 0
}

func (x *Compact) GetAsfUnloaderDrive() uint32 {
	if x != nil && x.AsfUnloaderDrive != nil {
		return *x.AsfUnloaderDrive
	}
	return 0
}

func (x *Compact) GetAsfCleaningFanControlTurnedOff() uint32 {
	if x != nil && x.AsfCleaningFanControlTurnedOff != nil {
		return *x.AsfCleaningFanControlTurnedOff
	}
	return 0
}

func (x *Compact) GetAsfThreshingDrumControlTurnedOff() uint32 {
	if x != nil && x.AsfThreshingDrumControlTurnedOff != nil {
		return *x.AsfThreshingDrumControlTurnedOff
	}
	return 0
}

func (x *Compact) GetAsfStrawWalkerIsClogged() uint32 {
	if x != nil && x.AsfStrawWalkerIsClogged != nil {
		return *x.AsfStrawWalkerIsClogged
	}
	return 0
}

func (x *Compact) GetAsfExcessiveClearanceUnderTheThreshingDrum() uint32 {
	if x != nil && x.AsfExcessiveClearanceUnderTheThreshingDrum != nil {
		return *x.AsfExcessiveClearanceUnderTheThreshingDrum
	}
	return 0
}

func (x *Compact) GetAsfLowTemperatureOfDriveSystemHydraulicsLessThan_5Grades() uint32 {
	if x != nil && x.AsfLowTemperatureOfDriveSystemHydraulicsLessThan_5Grades != nil {
		return *x.AsfLowTemperatureOfDriveSystemHydraulicsLessThan_5Grades
	}
	return 0
}

func (x *Compact) GetAsfHighTemperatureOfDriveSystemHydraulicsGreaterThan_86Grades() uint32 {
	if x != nil && x.AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan_86Grades != nil {
		return *x.AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan_86Grades
	}
	return 0
}

func (x *Compact) GetAsfEarAugerSpeedBelowTheNorm() uint32 {
	if x != nil && x.AsfEarAugerSpeedBelowTheNorm != nil {
		return *x.AsfEarAugerSpeedBelowTheNorm
	}
	return 0
}

func (x *Compact) GetAsfGrainAugerSpeedBelowTheNorm() uint32 {
	if x != nil && x.AsfGrainAugerSpeedBelowTheNorm != nil {
		return *x.AsfGrainAugerSpeedBelowTheNorm
	}
	return 0
}

func (x *Compact) GetAsfStrawChooperSpeedBelowTheNorm() uint32 {
	if x != nil && x.AsfStrawChooperSpeedBelowTheNorm != nil {
		return *x.AsfStrawChooperSpeedBelowTheNorm
	}
	return 0
}

func (x *Compact) GetAsfStrawShakerSpeedBelowTheNorm() uint32 {
	if x != nil && x.AsfStrawShakerSpeedBelowTheNorm != nil {
		return *x.AsfStrawShakerSpeedBelowTheNorm
	}
	return 0
}

func (x *Compact) GetAsfFeederSpeedBelowTheNorm() uint32 {
	if x != nil && x.AsfFeederSpeedBelowTheNorm != nil {
		return *x.AsfFeederSpeedBelowTheNorm
	}
	return 0
}

func (x *Compact) GetAsfStrawChopperSwitchedOn() uint32 {
	if x != nil && x.AsfStrawChopperSwitchedOn != nil {
		return *x.AsfStrawChopperSwitchedOn
	}
	return 0
}

func (x *Compact) GetAsfCornHeaderConnected() uint32 {
	if x != nil && x.AsfCornHeaderConnected != nil {
		return *x.AsfCornHeaderConnected
	}
	return 0
}

func (x *Compact) GetAsfGrainHeaderConnected() uint32 {
	if x != nil && x.AsfGrainHeaderConnected != nil {
		return *x.AsfGrainHeaderConnected
	}
	return 0
}

func (x *Compact) GetAsfFeederReverseSwitchedOn() uint32 {
	if x != nil && x.AsfFeederReverseSwitchedOn != nil {
		return *x.AsfFeederReverseSwitchedOn
	}
	return 0
}

func (x *Compact) GetAsfThePressureFilterOfTheHydraulicPumpIsClogged() uint32 {
	if x != nil && x.AsfThePressureFilterOfTheHydraulicPumpIsClogged != nil {
		return *x.AsfThePressureFilterOfTheHydraulicPumpIsClogged
	}
	return 0
}

func (x *Compact) GetAsfAdapterPressureFilterSensor() uint32 {
	if x != nil && x.AsfAdapterPressureFilterSensor != nil {
		return *x.AsfAdapterPressureFilterSensor
	}
	return 0
}

func (x *Compact) GetAsfService_2RequiredIndicator() uint32 {
	if x != nil && x.AsfService_2RequiredIndicator != nil {
		return *x.AsfService_2RequiredIndicator
	}
	return 0
}

func (x *Compact) GetAsfDrainFilterCloggedIndicator() uint32 {
	if x != nil && x.AsfDrainFilterCloggedIndicator != nil {
		return *x.AsfDrainFilterCloggedIndicator
	}
	return 0
}

func (x *Compact) GetAsfSection_1Spraying() uint32 {
	if x != nil && x.AsfSection_1Spraying != nil {
		return *x.AsfSection_1Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_2Spraying() uint32 {
	if x != nil && x.AsfSection_2Spraying != nil {
		return *x.AsfSection_2Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_3Spraying() uint32 {
	if x != nil && x.AsfSection_3Spraying != nil {
		return *x.AsfSection_3Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_4Spraying() uint32 {
	if x != nil && x.AsfSection_4Spraying != nil {
		return *x.AsfSection_4Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_5Spraying() uint32 {
	if x != nil && x.AsfSection_5Spraying != nil {
		return *x.AsfSection_5Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_6Spraying() uint32 {
	if x != nil && x.AsfSection_6Spraying != nil {
		return *x.AsfSection_6Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_7Spraying() uint32 {
	if x != nil && x.AsfSection_7Spraying != nil {
		return *x.AsfSection_7Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_8Spraying() uint32 {
	if x != nil && x.AsfSection_8Spraying != nil {
		return *x.AsfSection_8Spraying
	}
	return 0
}

func (x *Compact) GetAsfSection_9Spraying() uint32 {
	if x != nil && x.AsfSection_9Spraying != nil {
		return *x.AsfSection_9Spraying
	}
	return 0
}

func (x *Compact) GetUsfSpreading() uint32 {
	if x != nil && x.UsfSpreading != nil {
		return *x.UsfSpreading
	}
	return 0
}

func (x *Compact) GetUsfPouringChemicals() uint32 {
	if x != nil && x.UsfPouringChemicals != nil {
		return *x.UsfPouringChemicals
	}
	return 0
}

func (x *Compact) GetUsfConveyorBelt() uint32 {
	if x != nil && x.UsfConveyorBelt != nil {
		return *x.UsfConveyorBelt
	}
	return 0
}

func (x *Compact) GetUsfSaltSpreaderSDriveWheel() uint32 {
	if x != nil && x.UsfSaltSpreaderSDriveWheel != nil {
		return *x.UsfSaltSpreaderSDriveWheel
	}
	return 0
}

func (x *Compact) GetUsfBrushes() uint32 {
	if x != nil && x.UsfBrushes != nil {
		return *x.UsfBrushes
	}
	return 0
}

func (x *Compact) GetUsfVacuumCleaner() uint32 {
	if x != nil && x.UsfVacuumCleaner != nil {
		return *x.UsfVacuumCleaner
	}
	return 0
}

func (x *Compact) GetUsfWaterSupply() uint32 {
	if x != nil && x.UsfWaterSupply != nil {
		return *x.UsfWaterSupply
	}
	return 0
}

func (x *Compact) GetUsfLiquidPump() uint32 {
	if x != nil && x.UsfLiquidPump != nil {
		return *x.UsfLiquidPump
	}
	return 0
}

func (x *Compact) GetUsfUnloadingFromTheHopper() uint32 {
	if x != nil && x.UsfUnloadingFromTheHopper != nil {
		return *x.UsfUnloadingFromTheHopper
	}
	return 0
}

func (x *Compact) GetUsfLowSaltSandLevelInContainerIndicator() uint32 {
	if x != nil && x.UsfLowSaltSandLevelInContainerIndicator != nil {
		return *x.UsfLowSaltSandLevelInContainerIndicator
	}
	return 0
}

func (x *Compact) GetUsfLowWaterLevelInContainerIndicator() uint32 {
	if x != nil && x.UsfLowWaterLevelInContainerIndicator != nil {
		return *x.UsfLowWaterLevelInContainerIndicator
	}
	return 0
}

func (x *Compact) GetUsfChemicals() uint32 {
	if x != nil && x.UsfChemicals != nil {
		return *x.UsfChemicals
	}
	return 0
}

func (x *Compact) GetUsfCompressor() uint32 {
	if x != nil && x.UsfCompressor != nil {
		return *x.UsfCompressor
	}
	return 0
}

func (x *Compact) GetUsfWaterValveIsOpened() uint32 {
	if x != nil && x.UsfWaterValveIsOpened != nil {
		return *x.UsfWaterValveIsOpened
	}
	return 0
}

func (x *Compact) GetUsfCabinMovedUpStatusActive() uint32 {
	if x != nil && x.UsfCabinMovedUpStatusActive != nil {
		return *x.UsfCabinMovedUpStatusActive
	}
	return 0
}

func (x *Compact) GetUsfCabinMovedDownStatusActive() uint32 {
	if x != nil && x.UsfCabinMovedDownStatusActive != nil {
		return *x.UsfCabinMovedDownStatusActive
	}
	return 0
}

func (x *Compact) GetUsfHydraulicsWorkNotPermitted() uint32 {
	if x != nil && x.UsfHydraulicsWorkNotPermitted != nil {
		return *x.UsfHydraulicsWorkNotPermitted
	}
	return 0
}

func (x *Compact) GetCisfSection_1PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_1PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_1PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_1Filled() uint32 {
	if x != nil && x.CisfSection_1Filled != nil {
		return *x.CisfSection_1Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_1Overfilled() uint32 {
	if x != nil && x.CisfSection_1Overfilled != nil {
		return *x.CisfSection_1Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_2PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_2PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_2PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_2Filled() uint32 {
	if x != nil && x.CisfSection_2Filled != nil {
		return *x.CisfSection_2Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_2Overfilled() uint32 {
	if x != nil && x.CisfSection_2Overfilled != nil {
		return *x.CisfSection_2Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_3PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_3PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_3PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_3Filled() uint32 {
	if x != nil && x.CisfSection_3Filled != nil {
		return *x.CisfSection_3Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_3Overfilled() uint32 {
	if x != nil && x.CisfSection_3Overfilled != nil {
		return *x.CisfSection_3Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_4PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_4PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_4PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_4Filled() uint32 {
	if x != nil && x.CisfSection_4Filled != nil {
		return *x.CisfSection_4Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_4Overfilled() uint32 {
	if x != nil && x.CisfSection_4Overfilled != nil {
		return *x.CisfSection_4Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_5PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_5PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_5PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_5Filled() uint32 {
	if x != nil && x.CisfSection_5Filled != nil {
		return *x.CisfSection_5Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_5Overfilled() uint32 {
	if x != nil && x.CisfSection_5Overfilled != nil {
		return *x.CisfSection_5Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_6PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_6PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_6PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_6Filled() uint32 {
	if x != nil && x.CisfSection_6Filled != nil {
		return *x.CisfSection_6Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_6Overfilled() uint32 {
	if x != nil && x.CisfSection_6Overfilled != nil {
		return *x.CisfSection_6Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_7PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_7PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_7PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_7Filled() uint32 {
	if x != nil && x.CisfSection_7Filled != nil {
		return *x.CisfSection_7Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_7Overfilled() uint32 {
	if x != nil && x.CisfSection_7Overfilled != nil {
		return *x.CisfSection_7Overfilled
	}
	return 0
}

func (x *Compact) GetCisfSection_8PresenceOfFluidInTheDownpipe() uint32 {
	if x != nil && x.CisfSection_8PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection_8PresenceOfFluidInTheDownpipe
	}
	return 0
}

func (x *Compact) GetCisfSection_8Filled() uint32 {
	if x != nil && x.CisfSection_8Filled != nil {
		return *x.CisfSection_8Filled
	}
	return 0
}

func (x *Compact) GetCisfSection_8Overfilled() uint32 {
	if x != nil && x.CisfSection_8Overfilled != nil {
		return *x.CisfSection_8Overfilled
	}
	return 0
}

func (x *Compact) GetDistanceToNextService() uint64 {
	if x != nil && x.DistanceToNextService != nil {
		return *x.DistanceToNextService
	}
	return 0
}

func (x *Compact) GetCngLevelKg() uint32 {
	if x != nil && x.CngLevelKg != nil {
		return *x.CngLevelKg
	}
	return 0
}

func (x *Compact) GetDistanceFromNeedOfService() uint64 {
	if x != nil && x.DistanceFromNeedOfService != nil {
		return *x.DistanceFromNeedOfService
	}
	return 0
}

func (x *Compact) GetDistanceFromLastService() uint64 {
	if x != nil && x.DistanceFromLastService != nil {
		return *x.DistanceFromLastService
	}
	return 0
}

func (x *Compact) GetTimeToNextService() uint32 {
	if x != nil && x.TimeToNextService != nil {
		return *x.TimeToNextService
	}
	return 0
}

func (x *Compact) GetTimeFromNeedOfService() uint32 {
	if x != nil && x.TimeFromNeedOfService != nil {
		return *x.TimeFromNeedOfService
	}
	return 0
}

func (x *Compact) GetTimeFromLastSerivce() uint32 {
	if x != nil && x.TimeFromLastSerivce != nil {
		return *x.TimeFromLastSerivce
	}
	return 0
}

func (x *Compact) GetDistanceToNextOilService() uint64 {
	if x != nil && x.DistanceToNextOilService != nil {
		return *x.DistanceToNextOilService
	}
	return 0
}

func (x *Compact) GetTimeToNextOilService() uint32 {
	if x != nil && x.TimeToNextOilService != nil {
		return *x.TimeToNextOilService
	}
	return 0
}

func (x *Compact) GetLvcanVehicleRange() uint64 {
	if x != nil && x.LvcanVehicleRange != nil {
		return *x.LvcanVehicleRange
	}
	return 0
}

func (x *Compact) GetLvcanTotalCngCounted() uint64 {
	if x != nil && x.LvcanTotalCngCounted != nil {
		return *x.LvcanTotalCngCounted
	}
	return 0
}

func (x *Compact) GetTotalBaleCount() uint64 {
	if x != nil && x.TotalBaleCount != nil {
		return *x.TotalBaleCount
	}
	return 0
}

func (x *Compact) GetBaleCount() uint64 {
	if x != nil && x.BaleCount != nil {
		return *x.BaleCount
	}
	return 0
}

func (x *Compact) GetCutBaleCount() uint64 {
	if x != nil && x.CutBaleCount != nil {
		return *x.CutBaleCount
	}
	return 0
}

func (x *Compact) GetBaleSlices() uint64 {
	if x != nil && x.BaleSlices != nil {
		return *x.BaleSlices
	}
	return 0
}

func (x *Compact) GetLvcanMaxroadspeed() uint32 {
	if x != nil && x.LvcanMaxroadspeed != nil {
		return *x.LvcanMaxroadspeed
	}
	return 0
}

func (x *Compact) GetLvcanExceededroadspeed() uint32 {
	if x != nil && x.LvcanExceededroadspeed != nil {
		return *x.LvcanExceededroadspeed
	}
	return 0
}

func (x *Compact) GetLvcanRsfSpeedlimitsign() uint32 {
	if x != nil && x.LvcanRsfSpeedlimitsign != nil {
		return *x.LvcanRsfSpeedlimitsign
	}
	return 0
}

func (x *Compact) GetLvcanRsfEndofspeedlimitsign() uint32 {
	if x != nil && x.LvcanRsfEndofspeedlimitsign != nil {
		return *x.LvcanRsfEndofspeedlimitsign
	}
	return 0
}

func (x *Compact) GetLvcanRsfSpeedexceeded() uint32 {
	if x != nil && x.LvcanRsfSpeedexceeded != nil {
		return *x.LvcanRsfSpeedexceeded
	}
	return 0
}

func (x *Compact) GetLvcanRsfTimespeedlimitsign() uint32 {
	if x != nil && x.LvcanRsfTimespeedlimitsign != nil {
		return *x.LvcanRsfTimespeedlimitsign
	}
	return 0
}

func (x *Compact) GetLvcanRsfWthrspeedlimitsign() uint32 {
	if x != nil && x.LvcanRsfWthrspeedlimitsign != nil {
		return *x.LvcanRsfWthrspeedlimitsign
	}
	return 0
}

var File_packets_packets_proto protoreflect.FileDescriptor

const file_packets_packets_proto_rawDesc = "" +
	"\n" +
	"\x15packets/packets.proto\x12\x11com.navzy.packets\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15devices/devices.proto\"\xb4\x02\n" +
	"\x06Result\x12\x12\n" +
	"\x04imei\x18\x01 \x01(\x04R\x04imei\x12?\n" +
	"\x04Type\x18\x02 \x01(\x0e2$.com.navzy.packets.Result.PacketTypeR\vpacket_type\x12-\n" +
	"\x04data\x18\x03 \x03(\v2\x19.com.navzy.packets.PacketR\x04data\x12\x1a\n" +
	"\bresponse\x18\x04 \x01(\fR\bresponse\x12\x16\n" +
	"\x06answer\x18\x05 \x01(\fR\x06answer\x12\x18\n" +
	"\apayload\x18\x06 \x01(\fR\apayload\"X\n" +
	"\n" +
	"PacketType\x12\n" +
	"\n" +
	"\x06FAILED\x10\x00\x12\r\n" +
	"\tAUTHORIZE\x10\x01\x12\b\n" +
	"\x04DATA\x10\x02\x12\r\n" +
	"\tHEARTBEAT\x10\x03\x12\n" +
	"\n" +
	"\x06ANSWER\x10\x04\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x05\"\xa0\x01\n" +
	"\x04Task\x122\n" +
	"\x06device\x18\x01 \x01(\v2\x19.com.navzy.devices.DeviceR\adevices\x121\n" +
	"\x06packet\x18\x02 \x01(\v2\x19.com.navzy.packets.PacketR\x06packet\x121\n" +
	"\x06client\x18\x03 \x01(\v2\x19.com.navzy.packets.ClientR\x06client\"l\n" +
	"\x06Client\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12\x1c\n" +
	"\tserver_ip\x18\x03 \x01(\tR\tserver_ip\x12 \n" +
	"\vserver_port\x18\x04 \x01(\rR\vserver_port\"\x8f\x01\n" +
	"\x04Data\x12\x1c\n" +
	"\tdevice_id\x18\x01 \x01(\tR\tdevice_id\x126\n" +
	"\breceived\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\breceived\x121\n" +
	"\x06packet\x18\x03 \x01(\v2\x19.com.navzy.packets.PacketR\x06packet\"\xcd\x03\n" +
	"\x06Packet\x12\x17\n" +
	"\x04imei\x18\x01 \x01(\x04R\tdevice_id\x126\n" +
	"\bdatetime\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\bdatetime\x12\x1a\n" +
	"\blatitude\x18\x03 \x01(\x02R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x04 \x01(\x02R\tlongitude\x12\x1a\n" +
	"\baltitude\x18\x05 \x01(\rR\baltitude\x12\x14\n" +
	"\x05angle\x18\x06 \x01(\rR\x05angle\x12\x14\n" +
	"\x05speed\x18\a \x01(\rR\x05speed\x12!\n" +
	"\tsatellite\x18\b \x01(\rH\x00R\tsatellite\x88\x01\x01\x12\x1f\n" +
	"\bignition\x18\t \x01(\bH\x01R\bignition\x88\x01\x01\x12\x1d\n" +
	"\amileage\x18\n" +
	" \x01(\x04H\x02R\amileage\x88\x01\x01\x124\n" +
	"\acompact\x18\v \x01(\v2\x1a.com.navzy.packets.CompactR\acompact\x120\n" +
	"\x06events\x18\f \x03(\x0e2\x18.com.navzy.packets.EventR\x06alertsB\f\n" +
	"\n" +
	"_satelliteB\v\n" +
	"\t_ignitionB\n" +
	"\n" +
	"\b_mileage\"\x81\x95\x01\n" +
	"\aCompact\x12\x1f\n" +
	"\bmovement\x18\x02 \x01(\bH\x00R\bmovement\x88\x01\x01\x12 \n" +
	"\tdata_mode\x18\x03 \x01(\rH\x01R\bdataMode\x88\x01\x01\x12\"\n" +
	"\n" +
	"gsm_signal\x18\x04 \x01(\rH\x02R\tgsmSignal\x88\x01\x01\x12\"\n" +
	"\n" +
	"sleep_mode\x18\x05 \x01(\rH\x03R\tsleepMode\x88\x01\x01\x12$\n" +
	"\vgnss_status\x18\x06 \x01(\rH\x04R\n" +
	"gnssStatus\x88\x01\x01\x12 \n" +
	"\tgnss_pdop\x18\a \x01(\rH\x05R\bgnssPdop\x88\x01\x01\x12 \n" +
	"\tgnss_hdop\x18\b \x01(\rH\x06R\bgnssHdop\x88\x01\x01\x12.\n" +
	"\x10external_voltage\x18\t \x01(\rH\aR\x0fexternalVoltage\x88\x01\x01\x12\x19\n" +
	"\x05speed\x18\n" +
	" \x01(\rH\bR\x05speed\x88\x01\x01\x12#\n" +
	"\vgsm_cell_id\x18\v \x01(\rH\tR\tgsmCellId\x88\x01\x01\x12'\n" +
	"\rgsm_area_code\x18\f \x01(\rH\n" +
	"R\vgsmAreaCode\x88\x01\x01\x12,\n" +
	"\x0fbattery_voltage\x18\r \x01(\rH\vR\x0ebatteryVoltage\x88\x01\x01\x12,\n" +
	"\x0fbattery_current\x18\x0e \x01(\rH\fR\x0ebatteryCurrent\x88\x01\x01\x123\n" +
	"\x13active_gsm_operator\x18\x0f \x01(\rH\rR\x11activeGsmOperator\x88\x01\x01\x12(\n" +
	"\rtrip_odometer\x18\x10 \x01(\rH\x0eR\ftripOdometer\x88\x01\x01\x12*\n" +
	"\x0etotal_odometer\x18\x11 \x01(\x04H\x0fR\rtotalOdometer\x88\x01\x01\x12*\n" +
	"\x0edigital_input1\x18\x12 \x01(\bH\x10R\rdigitalInput1\x88\x01\x01\x12(\n" +
	"\ranalog_input1\x18\x13 \x01(\rH\x11R\fanalogInput1\x88\x01\x01\x12,\n" +
	"\x0fdigital_output1\x18\x14 \x01(\bH\x12R\x0edigitalOutput1\x88\x01\x01\x12'\n" +
	"\rfuel_used_gps\x18\x15 \x01(\rH\x13R\vfuelUsedGps\x88\x01\x01\x12'\n" +
	"\rfuel_rate_gps\x18\x16 \x01(\rH\x14R\vfuelRateGps\x88\x01\x01\x12\x1a\n" +
	"\x06axis_x\x18\x17 \x01(\x05H\x15R\x05axisX\x88\x01\x01\x12\x1a\n" +
	"\x06axis_y\x18\x18 \x01(\x05H\x16R\x05axisY\x88\x01\x01\x12\x1a\n" +
	"\x06axis_z\x18\x19 \x01(\x05H\x17R\x05axisZ\x88\x01\x01\x12\x1b\n" +
	"\x06iccid1\x18\x1a \x01(\x04H\x18R\x06iccid1\x88\x01\x01\x12 \n" +
	"\tsd_status\x18\x1b \x01(\bH\x19R\bsdStatus\x88\x01\x01\x12*\n" +
	"\x0edigital_input2\x18\x1c \x01(\bH\x1aR\rdigitalInput2\x88\x01\x01\x12*\n" +
	"\x0edigital_input3\x18\x1d \x01(\bH\x1bR\rdigitalInput3\x88\x01\x01\x12(\n" +
	"\ranalog_input2\x18\x1e \x01(\rH\x1cR\fanalogInput2\x88\x01\x01\x12,\n" +
	"\x0fdigital_output2\x18\x1f \x01(\bH\x1dR\x0edigitalOutput2\x88\x01\x01\x124\n" +
	"\x13dallas_temperature1\x18  \x01(\x05H\x1eR\x12dallasTemperature1\x88\x01\x01\x124\n" +
	"\x13dallas_temperature2\x18! \x01(\x05H\x1fR\x12dallasTemperature2\x88\x01\x01\x124\n" +
	"\x13dallas_temperature3\x18\" \x01(\x05H R\x12dallasTemperature3\x88\x01\x01\x124\n" +
	"\x13dallas_temperature4\x18# \x01(\x05H!R\x12dallasTemperature4\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id1\x18$ \x01(\x04H\"R\x14dallasTemperatureId1\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id2\x18% \x01(\x04H#R\x14dallasTemperatureId2\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id3\x18& \x01(\x04H$R\x14dallasTemperatureId3\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id4\x18' \x01(\x04H%R\x14dallasTemperatureId4\x88\x01\x01\x12\x1d\n" +
	"\aibutton\x18( \x01(\x04H&R\aibutton\x88\x01\x01\x12\x17\n" +
	"\x04rfid\x18) \x01(\x04H'R\x04rfid\x88\x01\x01\x12,\n" +
	"\x10lls_1_fuel_level\x18* \x01(\x05H(R\rlls1FuelLevel\x88\x01\x01\x12/\n" +
	"\x11lls_1_temperature\x18+ \x01(\x05H)R\x0flls1Temperature\x88\x01\x01\x12,\n" +
	"\x10lls_2_fuel_level\x18, \x01(\x05H*R\rlls2FuelLevel\x88\x01\x01\x12/\n" +
	"\x11lls_2_temperature\x18- \x01(\x05H+R\x0flls2Temperature\x88\x01\x01\x12,\n" +
	"\x10lls_3_fuel_level\x18. \x01(\rH,R\rlls3FuelLevel\x88\x01\x01\x12/\n" +
	"\x11lls_3_temperature\x18/ \x01(\x05H-R\x0flls3Temperature\x88\x01\x01\x12,\n" +
	"\x10lls_4_fuel_level\x180 \x01(\x05H.R\rlls4FuelLevel\x88\x01\x01\x12/\n" +
	"\x11lls_4_temperature\x181 \x01(\x05H/R\x0flls4Temperature\x88\x01\x01\x12,\n" +
	"\x10lls_5_fuel_level\x182 \x01(\x05H0R\rlls5FuelLevel\x88\x01\x01\x12/\n" +
	"\x11lls_5_temperature\x183 \x01(\x05H1R\x0flls5Temperature\x88\x01\x01\x12 \n" +
	"\teco_score\x184 \x01(\rH2R\becoScore\x88\x01\x01\x12(\n" +
	"\rbattery_level\x185 \x01(\rH3R\fbatteryLevel\x88\x01\x01\x12\x1c\n" +
	"\auser_id\x186 \x01(\x04H4R\x06userId\x88\x01\x01\x12&\n" +
	"\fnetwork_type\x187 \x01(\rH5R\vnetworkType\x88\x01\x01\x121\n" +
	"\x12pulse_counter_din1\x188 \x01(\x04H6R\x10pulseCounterDin1\x88\x01\x01\x121\n" +
	"\x12pulse_counter_din2\x189 \x01(\x04H7R\x10pulseCounterDin2\x88\x01\x01\x12 \n" +
	"\tbt_status\x18: \x01(\rH8R\bbtStatus\x88\x01\x01\x12\"\n" +
	"\n" +
	"barcode_id\x18; \x01(\tH9R\tbarcodeId\x88\x01\x01\x12.\n" +
	"\x10instant_movement\x18< \x01(\rH:R\x0finstantMovement\x88\x01\x01\x12?\n" +
	"\x1aul202_02_sensor_fuel_level\x18= \x01(\x05H;R\x16ul20202SensorFuelLevel\x88\x01\x01\x128\n" +
	"\x16ul202_02_sensor_status\x18> \x01(\rH<R\x13ul20202SensorStatus\x88\x01\x01\x12-\n" +
	"\x10digital_output_3\x18? \x01(\bH=R\x0edigitalOutput3\x88\x01\x01\x12&\n" +
	"\fground_sense\x18@ \x01(\rH>R\vgroundSense\x88\x01\x01\x124\n" +
	"\x13iso6709_coordinates\x18A \x01(\fH?R\x12iso6709Coordinates\x88\x01\x01\x12,\n" +
	"\x10umts_lte_cell_id\x18B \x01(\x04H@R\rumtsLteCellId\x88\x01\x01\x12$\n" +
	"\vdriver_name\x18C \x01(\x04HAR\n" +
	"driverName\x88\x01\x01\x12<\n" +
	"\x18driver_card_license_type\x18D \x01(\rHBR\x15driverCardLicenseType\x88\x01\x01\x12(\n" +
	"\rdriver_gender\x18E \x01(\rHCR\fdriverGender\x88\x01\x01\x12)\n" +
	"\x0edriver_card_id\x18F \x01(\x04HDR\fdriverCardId\x88\x01\x01\x12B\n" +
	"\x1bdriver_card_expiration_date\x18G \x01(\rHER\x18driverCardExpirationDate\x88\x01\x01\x12?\n" +
	"\x1adriver_card_place_of_issue\x18H \x01(\x04HFR\x16driverCardPlaceOfIssue\x88\x01\x01\x123\n" +
	"\x13driver_status_event\x18I \x01(\rHGR\x11driverStatusEvent\x88\x01\x01\x12 \n" +
	"\tain_speed\x18J \x01(\rHHR\bainSpeed\x88\x01\x01\x121\n" +
	"\x12msp500_vendor_name\x18K \x01(\tHIR\x10msp500VendorName\x88\x01\x01\x127\n" +
	"\x15msp500_vehicle_number\x18L \x01(\tHJR\x13msp500VehicleNumber\x88\x01\x01\x123\n" +
	"\x13msp500_speed_sensor\x18M \x01(\rHKR\x11msp500SpeedSensor\x88\x01\x01\x12$\n" +
	"\vwake_reason\x18N \x01(\rHLR\n" +
	"wakeReason\x88\x01\x01\x12/\n" +
	"\x11eye_temperature_1\x18O \x01(\x05HMR\x0feyeTemperature1\x88\x01\x01\x12/\n" +
	"\x11eye_temperature_2\x18P \x01(\x05HNR\x0feyeTemperature2\x88\x01\x01\x12/\n" +
	"\x11eye_temperature_3\x18Q \x01(\x05HOR\x0feyeTemperature3\x88\x01\x01\x12/\n" +
	"\x11eye_temperature_4\x18R \x01(\x05HPR\x0feyeTemperature4\x88\x01\x01\x12)\n" +
	"\x0eeye_humidity_1\x18S \x01(\rHQR\feyeHumidity1\x88\x01\x01\x12)\n" +
	"\x0eeye_humidity_2\x18T \x01(\rHRR\feyeHumidity2\x88\x01\x01\x12)\n" +
	"\x0eeye_humidity_3\x18U \x01(\rHSR\feyeHumidity3\x88\x01\x01\x12)\n" +
	"\x0eeye_humidity_4\x18V \x01(\rHTR\feyeHumidity4\x88\x01\x01\x12%\n" +
	"\feye_magnet_1\x18W \x01(\rHUR\n" +
	"eyeMagnet1\x88\x01\x01\x12%\n" +
	"\feye_magnet_2\x18X \x01(\rHVR\n" +
	"eyeMagnet2\x88\x01\x01\x12%\n" +
	"\feye_magnet_3\x18Y \x01(\rHWR\n" +
	"eyeMagnet3\x88\x01\x01\x12%\n" +
	"\feye_magnet_4\x18Z \x01(\rHXR\n" +
	"eyeMagnet4\x88\x01\x01\x12)\n" +
	"\x0eeye_movement_1\x18[ \x01(\rHYR\feyeMovement1\x88\x01\x01\x12\\\n" +
	")isf_clogged_brake_system_filter_indicator\x18\\ \x01(\rHZR$isfCloggedBrakeSystemFilterIndicator\x88\x01\x01\x12R\n" +
	"$isf_low_washer_fluid_level_indicator\x18] \x01(\rH[R\x1fisfLowWasherFluidLevelIndicator\x88\x01\x01\x12G\n" +
	"\x1eisf_low_adblue_level_indicator\x18^ \x01(\rH\\R\x1aisfLowAdblueLevelIndicator\x88\x01\x01\x12X\n" +
	"'isf_low_trailer_tyre_pressure_indicator\x18_ \x01(\rH]R\"isfLowTrailerTyrePressureIndicator\x88\x01\x01\x12]\n" +
	"*isf_wear_of_trailer_brake_lining_indicator\x18` \x01(\rH^R$isfWearOfTrailerBrakeLiningIndicator\x88\x01\x01\x12b\n" +
	",isf_high_trailer_brake_temperature_indicator\x18a \x01(\rH_R'isfHighTrailerBrakeTemperatureIndicator\x88\x01\x01\x12j\n" +
	"0isf_incorrect_trailer_pneumatic_supply_indicator\x18b \x01(\rH`R+isfIncorrectTrailerPneumaticSupplyIndicator\x88\x01\x01\x12A\n" +
	"\x1bisf_low_cng_level_indicator\x18c \x01(\rHaR\x17isfLowCngLevelIndicator\x88\x01\x01\x12T\n" +
	"%asf_right_joystick_moved_right_active\x18d \x01(\rHbR asfRightJoystickMovedRightActive\x88\x01\x01\x12R\n" +
	"$asf_right_joystick_moved_left_active\x18e \x01(\rHcR\x1fasfRightJoystickMovedLeftActive\x88\x01\x01\x12X\n" +
	"'asf_right_joystick_moved_forward_active\x18f \x01(\rHdR\"asfRightJoystickMovedForwardActive\x88\x01\x01\x12R\n" +
	"$asf_right_joystick_moved_back_active\x18g \x01(\rHeR\x1fasfRightJoystickMovedBackActive\x88\x01\x01\x12R\n" +
	"$asf_left_joystick_moved_right_active\x18h \x01(\rHfR\x1fasfLeftJoystickMovedRightActive\x88\x01\x01\x12P\n" +
	"#asf_left_joystick_moved_left_active\x18i \x01(\rHgR\x1easfLeftJoystickMovedLeftActive\x88\x01\x01\x12V\n" +
	"&asf_left_joystick_moved_forward_active\x18j \x01(\rHhR!asfLeftJoystickMovedForwardActive\x88\x01\x01\x12P\n" +
	"#asf_left_joystick_moved_back_active\x18k \x01(\rHiR\x1easfLeftJoystickMovedBackActive\x88\x01\x01\x12<\n" +
	"\x18asf_first_rear_hydraulic\x18l \x01(\rHjR\x15asfFirstRearHydraulic\x88\x01\x01\x12>\n" +
	"\x19asf_second_rear_hydraulic\x18m \x01(\rHkR\x16asfSecondRearHydraulic\x88\x01\x01\x12<\n" +
	"\x18asf_third_rear_hydraulic\x18n \x01(\rHlR\x15asfThirdRearHydraulic\x88\x01\x01\x12>\n" +
	"\x19asf_fourth_rear_hydraulic\x18o \x01(\rHmR\x16asfFourthRearHydraulic\x88\x01\x01\x12>\n" +
	"\x19asf_first_front_hydraulic\x18p \x01(\rHnR\x16asfFirstFrontHydraulic\x88\x01\x01\x12@\n" +
	"\x1aasf_second_front_hydraulic\x18q \x01(\rHoR\x17asfSecondFrontHydraulic\x88\x01\x01\x12>\n" +
	"\x19asf_third_front_hydraulic\x18r \x01(\rHpR\x16asfThirdFrontHydraulic\x88\x01\x01\x12@\n" +
	"\x1aasf_fourth_front_hydraulic\x18s \x01(\rHqR\x17asfFourthFrontHydraulic\x88\x01\x01\x12A\n" +
	"\x1basf_front_three_point_hitch\x18t \x01(\rHrR\x17asfFrontThreePointHitch\x88\x01\x01\x12?\n" +
	"\x1aasf_rear_three_point_hitch\x18u \x01(\rHsR\x16asfRearThreePointHitch\x88\x01\x01\x12;\n" +
	"\x18asf_front_power_take_off\x18v \x01(\rHtR\x14asfFrontPowerTakeOff\x88\x01\x01\x129\n" +
	"\x17asf_rear_power_take_off\x18w \x01(\rHuR\x13asfRearPowerTakeOff\x88\x01\x01\x12/\n" +
	"\x11asf_mowing_active\x18x \x01(\rHvR\x0fasfMowingActive\x88\x01\x01\x125\n" +
	"\x14asf_threshing_active\x18y \x01(\rHwR\x12asfThreshingActive\x88\x01\x01\x12E\n" +
	"\x1dasf_grain_release_from_hopper\x18z \x01(\rHxR\x19asfGrainReleaseFromHopper\x88\x01\x01\x12>\n" +
	"\x1aasf_grain_tank_is_100_full\x18{ \x01(\rHyR\x15asfGrainTankIs100Full\x88\x01\x01\x12<\n" +
	"\x19asf_grain_tank_is_70_full\x18| \x01(\rHzR\x14asfGrainTankIs70Full\x88\x01\x01\x12;\n" +
	"\x18asf_grain_tank_is_opened\x18} \x01(\rH{R\x14asfGrainTankIsOpened\x88\x01\x01\x121\n" +
	"\x12asf_unloader_drive\x18~ \x01(\rH|R\x10asfUnloaderDrive\x88\x01\x01\x12P\n" +
	"#asf_cleaning_fan_control_turned_off\x18\x7f \x01(\rH}R\x1easfCleaningFanControlTurnedOff\x88\x01\x01\x12U\n" +
	"%asf_threshing_drum_control_turned_off\x18\x80\x01 \x01(\rH~R asfThreshingDrumControlTurnedOff\x88\x01\x01\x12B\n" +
	"\x1basf_straw_walker_is_clogged\x18\x81\x01 \x01(\rH\x7fR\x17asfStrawWalkerIsClogged\x88\x01\x01\x12k\n" +
	"0asf_excessive_clearance_under_the_threshing_drum\x18\x82\x01 \x01(\rH\x80\x01R*asfExcessiveClearanceUnderTheThreshingDrum\x88\x01\x01\x12\x89\x01\n" +
	"Aasf_low_temperature_of_drive_system_hydraulics_less_than_5_grades\x18\x83\x01 \x01(\rH\x81\x01R7asfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades\x88\x01\x01\x12\x93\x01\n" +
	"Fasf_high_temperature_of_drive_system_hydraulics_greater_than_86_grades\x18\x84\x01 \x01(\rH\x82\x01R<asfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades\x88\x01\x01\x12O\n" +
	"\"asf_ear_auger_speed_below_the_norm\x18\x85\x01 \x01(\rH\x83\x01R\x1casfEarAugerSpeedBelowTheNorm\x88\x01\x01\x12S\n" +
	"$asf_grain_auger_speed_below_the_norm\x18\x86\x01 \x01(\rH\x84\x01R\x1easfGrainAugerSpeedBelowTheNorm\x88\x01\x01\x12W\n" +
	"&asf_straw_chooper_speed_below_the_norm\x18\x87\x01 \x01(\rH\x85\x01R asfStrawChooperSpeedBelowTheNorm\x88\x01\x01\x12U\n" +
	"%asf_straw_shaker_speed_below_the_norm\x18\x88\x01 \x01(\rH\x86\x01R\x1fasfStrawShakerSpeedBelowTheNorm\x88\x01\x01\x12J\n" +
	"\x1fasf_feeder_speed_below_the_norm\x18\x89\x01 \x01(\rH\x87\x01R\x1aasfFeederSpeedBelowTheNorm\x88\x01\x01\x12G\n" +
	"\x1dasf_straw_chopper_switched_on\x18\x8a\x01 \x01(\rH\x88\x01R\x19asfStrawChopperSwitchedOn\x88\x01\x01\x12@\n" +
	"\x19asf_corn_header_connected\x18\x8b\x01 \x01(\rH\x89\x01R\x16asfCornHeaderConnected\x88\x01\x01\x12B\n" +
	"\x1aasf_grain_header_connected\x18\x8c\x01 \x01(\rH\x8a\x01R\x17asfGrainHeaderConnected\x88\x01\x01\x12I\n" +
	"\x1easf_feeder_reverse_switched_on\x18\x8d\x01 \x01(\rH\x8b\x01R\x1aasfFeederReverseSwitchedOn\x88\x01\x01\x12x\n" +
	"8asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged\x18\x8e\x01 \x01(\rH\x8c\x01R/asfThePressureFilterOfTheHydraulicPumpIsClogged\x88\x01\x01\x12Q\n" +
	"\"asf_adapter_pressure_filter_sensor\x18\x8f\x01 \x01(\rH\x8d\x01R\x1easfAdapterPressureFilterSensor\x88\x01\x01\x12M\n" +
	" asf_service_2_required_indicator\x18\x90\x01 \x01(\rH\x8e\x01R\x1casfService2RequiredIndicator\x88\x01\x01\x12Q\n" +
	"\"asf_drain_filter_clogged_indicator\x18\x91\x01 \x01(\rH\x8f\x01R\x1easfDrainFilterCloggedIndicator\x88\x01\x01\x12:\n" +
	"\x16asf_section_1_spraying\x18\x92\x01 \x01(\rH\x90\x01R\x13asfSection1Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_2_spraying\x18\x93\x01 \x01(\rH\x91\x01R\x13asfSection2Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_3_spraying\x18\x94\x01 \x01(\rH\x92\x01R\x13asfSection3Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_4_spraying\x18\x95\x01 \x01(\rH\x93\x01R\x13asfSection4Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_5_spraying\x18\x96\x01 \x01(\rH\x94\x01R\x13asfSection5Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_6_spraying\x18\x97\x01 \x01(\rH\x95\x01R\x13asfSection6Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_7_spraying\x18\x98\x01 \x01(\rH\x96\x01R\x13asfSection7Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_8_spraying\x18\x99\x01 \x01(\rH\x97\x01R\x13asfSection8Spraying\x88\x01\x01\x12:\n" +
	"\x16asf_section_9_spraying\x18\x9a\x01 \x01(\rH\x98\x01R\x13asfSection9Spraying\x88\x01\x01\x12*\n" +
	"\rusf_spreading\x18\x9b\x01 \x01(\rH\x99\x01R\fusfSpreading\x88\x01\x01\x129\n" +
	"\x15usf_pouring_chemicals\x18\x9c\x01 \x01(\rH\x9a\x01R\x13usfPouringChemicals\x88\x01\x01\x121\n" +
	"\x11usf_conveyor_belt\x18\x9d\x01 \x01(\rH\x9b\x01R\x0fusfConveyorBelt\x88\x01\x01\x12J\n" +
	"\x1fusf_salt_spreader_s_drive_wheel\x18\x9e\x01 \x01(\rH\x9c\x01R\x1ausfSaltSpreaderSDriveWheel\x88\x01\x01\x12&\n" +
	"\vusf_brushes\x18\x9f\x01 \x01(\rH\x9d\x01R\n" +
	"usfBrushes\x88\x01\x01\x123\n" +
	"\x12usf_vacuum_cleaner\x18\xa0\x01 \x01(\rH\x9e\x01R\x10usfVacuumCleaner\x88\x01\x01\x12/\n" +
	"\x10usf_water_supply\x18\xa1\x01 \x01(\rH\x9f\x01R\x0eusfWaterSupply\x88\x01\x01\x12-\n" +
	"\x0fusf_liquid_pump\x18\xa3\x01 \x01(\rH\xa0\x01R\rusfLiquidPump\x88\x01\x01\x12G\n" +
	"\x1dusf_unloading_from_the_hopper\x18\xa4\x01 \x01(\rH\xa1\x01R\x19usfUnloadingFromTheHopper\x88\x01\x01\x12f\n" +
	".usf_low_salt_sand_level_in_container_indicator\x18\xa5\x01 \x01(\rH\xa2\x01R'usfLowSaltSandLevelInContainerIndicator\x88\x01\x01\x12_\n" +
	"*usf_low_water_level_in_container_indicator\x18\xa6\x01 \x01(\rH\xa3\x01R$usfLowWaterLevelInContainerIndicator\x88\x01\x01\x12*\n" +
	"\rusf_chemicals\x18\xa7\x01 \x01(\rH\xa4\x01R\fusfChemicals\x88\x01\x01\x12,\n" +
	"\x0eusf_compressor\x18\xa8\x01 \x01(\rH\xa5\x01R\rusfCompressor\x88\x01\x01\x12?\n" +
	"\x19usf_water_valve_is_opened\x18\xa9\x01 \x01(\rH\xa6\x01R\x15usfWaterValveIsOpened\x88\x01\x01\x12L\n" +
	" usf_cabin_moved_up_status_active\x18\xaa\x01 \x01(\rH\xa7\x01R\x1busfCabinMovedUpStatusActive\x88\x01\x01\x12P\n" +
	"\"usf_cabin_moved_down_status_active\x18\xab\x01 \x01(\rH\xa8\x01R\x1dusfCabinMovedDownStatusActive\x88\x01\x01\x12O\n" +
	"!usf_hydraulics_work_not_permitted\x18\xac\x01 \x01(\rH\xa9\x01R\x1dusfHydraulicsWorkNotPermitted\x88\x01\x01\x12i\n" +
	"0cisf_section_1_presence_of_fluid_in_the_downpipe\x18\xad\x01 \x01(\rH\xaa\x01R(cisfSection1PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_1_filled\x18\xae\x01 \x01(\rH\xab\x01R\x12cisfSection1Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_1_overfilled\x18\xaf\x01 \x01(\rH\xac\x01R\x16cisfSection1Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_2_presence_of_fluid_in_the_downpipe\x18\xb0\x01 \x01(\rH\xad\x01R(cisfSection2PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_2_filled\x18\xb1\x01 \x01(\rH\xae\x01R\x12cisfSection2Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_2_overfilled\x18\xb2\x01 \x01(\rH\xaf\x01R\x16cisfSection2Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_3_presence_of_fluid_in_the_downpipe\x18\xb3\x01 \x01(\rH\xb0\x01R(cisfSection3PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_3_filled\x18\xb4\x01 \x01(\rH\xb1\x01R\x12cisfSection3Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_3_overfilled\x18\xb5\x01 \x01(\rH\xb2\x01R\x16cisfSection3Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_4_presence_of_fluid_in_the_downpipe\x18\xb6\x01 \x01(\rH\xb3\x01R(cisfSection4PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_4_filled\x18\xb7\x01 \x01(\rH\xb4\x01R\x12cisfSection4Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_4_overfilled\x18\xb8\x01 \x01(\rH\xb5\x01R\x16cisfSection4Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_5_presence_of_fluid_in_the_downpipe\x18\xb9\x01 \x01(\rH\xb6\x01R(cisfSection5PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_5_filled\x18\xba\x01 \x01(\rH\xb7\x01R\x12cisfSection5Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_5_overfilled\x18\xbb\x01 \x01(\rH\xb8\x01R\x16cisfSection5Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_6_presence_of_fluid_in_the_downpipe\x18\xbc\x01 \x01(\rH\xb9\x01R(cisfSection6PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_6_filled\x18\xbd\x01 \x01(\rH\xba\x01R\x12cisfSection6Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_6_overfilled\x18\xbe\x01 \x01(\rH\xbb\x01R\x16cisfSection6Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_7_presence_of_fluid_in_the_downpipe\x18\xbf\x01 \x01(\rH\xbc\x01R(cisfSection7PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_7_filled\x18\xc0\x01 \x01(\rH\xbd\x01R\x12cisfSection7Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_7_overfilled\x18\xc1\x01 \x01(\rH\xbe\x01R\x16cisfSection7Overfilled\x88\x01\x01\x12i\n" +
	"0cisf_section_8_presence_of_fluid_in_the_downpipe\x18\xc2\x01 \x01(\rH\xbf\x01R(cisfSection8PresenceOfFluidInTheDownpipe\x88\x01\x01\x128\n" +
	"\x15cisf_section_8_filled\x18\xc3\x01 \x01(\rH\xc0\x01R\x12cisfSection8Filled\x88\x01\x01\x12@\n" +
	"\x19cisf_section_8_overfilled\x18\xc4\x01 \x01(\rH\xc1\x01R\x16cisfSection8Overfilled\x88\x01\x01\x12>\n" +
	"\x18distance_to_next_service\x18\xc5\x01 \x01(\x04H\xc2\x01R\x15distanceToNextService\x88\x01\x01\x12'\n" +
	"\fcng_level_kg\x18\xc6\x01 \x01(\rH\xc3\x01R\n" +
	"cngLevelKg\x88\x01\x01\x12G\n" +
	"\x1ddistance_from_need_of_service\x18\xc7\x01 \x01(\x04H\xc4\x01R\x19distanceFromNeedOfService\x88\x01\x01\x12B\n" +
	"\x1adistance_from_last_service\x18\xc8\x01 \x01(\x04H\xc5\x01R\x17distanceFromLastService\x88\x01\x01\x126\n" +
	"\x14time_to_next_service\x18\xc9\x01 \x01(\rH\xc6\x01R\x11timeToNextService\x88\x01\x01\x12?\n" +
	"\x19time_from_need_of_service\x18\xca\x01 \x01(\rH\xc7\x01R\x15timeFromNeedOfService\x88\x01\x01\x12:\n" +
	"\x16time_from_last_serivce\x18\xcb\x01 \x01(\rH\xc8\x01R\x13timeFromLastSerivce\x88\x01\x01\x12E\n" +
	"\x1cdistance_to_next_oil_service\x18\xcc\x01 \x01(\x04H\xc9\x01R\x18distanceToNextOilService\x88\x01\x01\x12=\n" +
	"\x18time_to_next_oil_service\x18\xcd\x01 \x01(\rH\xca\x01R\x14timeToNextOilService\x88\x01\x01\x125\n" +
	"\x13lvcan_vehicle_range\x18\xce\x01 \x01(\x04H\xcb\x01R\x11lvcanVehicleRange\x88\x01\x01\x12<\n" +
	"\x17lvcan_total_cng_counted\x18\xcf\x01 \x01(\x04H\xcc\x01R\x14lvcanTotalCngCounted\x88\x01\x01\x12/\n" +
	"\x10total_bale_count\x18\xd0\x01 \x01(\x04H\xcd\x01R\x0etotalBaleCount\x88\x01\x01\x12$\n" +
	"\n" +
	"bale_count\x18\xd1\x01 \x01(\x04H\xce\x01R\tbaleCount\x88\x01\x01\x12+\n" +
	"\x0ecut_bale_count\x18\xd2\x01 \x01(\x04H\xcf\x01R\fcutBaleCount\x88\x01\x01\x12&\n" +
	"\vbale_slices\x18\xd3\x01 \x01(\x04H\xd0\x01R\n" +
	"baleSlices\x88\x01\x01\x124\n" +
	"\x12lvcan_maxroadspeed\x18\xd4\x01 \x01(\rH\xd1\x01R\x11lvcanMaxroadspeed\x88\x01\x01\x12>\n" +
	"\x17lvcan_exceededroadspeed\x18\xd5\x01 \x01(\rH\xd2\x01R\x16lvcanExceededroadspeed\x88\x01\x01\x12?\n" +
	"\x18lvcan_rsf_speedlimitsign\x18\xd6\x01 \x01(\rH\xd3\x01R\x16lvcanRsfSpeedlimitsign\x88\x01\x01\x12I\n" +
	"\x1dlvcan_rsf_endofspeedlimitsign\x18\xd7\x01 \x01(\rH\xd4\x01R\x1blvcanRsfEndofspeedlimitsign\x88\x01\x01\x12=\n" +
	"\x17lvcan_rsf_speedexceeded\x18\xd8\x01 \x01(\rH\xd5\x01R\x15lvcanRsfSpeedexceeded\x88\x01\x01\x12G\n" +
	"\x1clvcan_rsf_timespeedlimitsign\x18\xd9\x01 \x01(\rH\xd6\x01R\x1alvcanRsfTimespeedlimitsign\x88\x01\x01\x12G\n" +
	"\x1clvcan_rsf_wthrspeedlimitsign\x18\xda\x01 \x01(\rH\xd7\x01R\x1alvcanRsfWthrspeedlimitsign\x88\x01\x01B\v\n" +
	"\t_movementB\f\n" +
	"\n" +
	"_data_modeB\r\n" +
	"\v_gsm_signalB\r\n" +
	"\v_sleep_modeB\x0e\n" +
	"\f_gnss_statusB\f\n" +
	"\n" +
	"_gnss_pdopB\f\n" +
	"\n" +
	"_gnss_hdopB\x13\n" +
	"\x11_external_voltageB\b\n" +
	"\x06_speedB\x0e\n" +
	"\f_gsm_cell_idB\x10\n" +
	"\x0e_gsm_area_codeB\x12\n" +
	"\x10_battery_voltageB\x12\n" +
	"\x10_battery_currentB\x16\n" +
	"\x14_active_gsm_operatorB\x10\n" +
	"\x0e_trip_odometerB\x11\n" +
	"\x0f_total_odometerB\x11\n" +
	"\x0f_digital_input1B\x10\n" +
	"\x0e_analog_input1B\x12\n" +
	"\x10_digital_output1B\x10\n" +
	"\x0e_fuel_used_gpsB\x10\n" +
	"\x0e_fuel_rate_gpsB\t\n" +
	"\a_axis_xB\t\n" +
	"\a_axis_yB\t\n" +
	"\a_axis_zB\t\n" +
	"\a_iccid1B\f\n" +
	"\n" +
	"_sd_statusB\x11\n" +
	"\x0f_digital_input2B\x11\n" +
	"\x0f_digital_input3B\x10\n" +
	"\x0e_analog_input2B\x12\n" +
	"\x10_digital_output2B\x16\n" +
	"\x14_dallas_temperature1B\x16\n" +
	"\x14_dallas_temperature2B\x16\n" +
	"\x14_dallas_temperature3B\x16\n" +
	"\x14_dallas_temperature4B\x19\n" +
	"\x17_dallas_temperature_id1B\x19\n" +
	"\x17_dallas_temperature_id2B\x19\n" +
	"\x17_dallas_temperature_id3B\x19\n" +
	"\x17_dallas_temperature_id4B\n" +
	"\n" +
	"\b_ibuttonB\a\n" +
	"\x05_rfidB\x13\n" +
	"\x11_lls_1_fuel_levelB\x14\n" +
	"\x12_lls_1_temperatureB\x13\n" +
	"\x11_lls_2_fuel_levelB\x14\n" +
	"\x12_lls_2_temperatureB\x13\n" +
	"\x11_lls_3_fuel_levelB\x14\n" +
	"\x12_lls_3_temperatureB\x13\n" +
	"\x11_lls_4_fuel_levelB\x14\n" +
	"\x12_lls_4_temperatureB\x13\n" +
	"\x11_lls_5_fuel_levelB\x14\n" +
	"\x12_lls_5_temperatureB\f\n" +
	"\n" +
	"_eco_scoreB\x10\n" +
	"\x0e_battery_levelB\n" +
	"\n" +
	"\b_user_idB\x0f\n" +
	"\r_network_typeB\x15\n" +
	"\x13_pulse_counter_din1B\x15\n" +
	"\x13_pulse_counter_din2B\f\n" +
	"\n" +
	"_bt_statusB\r\n" +
	"\v_barcode_idB\x13\n" +
	"\x11_instant_movementB\x1d\n" +
	"\x1b_ul202_02_sensor_fuel_levelB\x19\n" +
	"\x17_ul202_02_sensor_statusB\x13\n" +
	"\x11_digital_output_3B\x0f\n" +
	"\r_ground_senseB\x16\n" +
	"\x14_iso6709_coordinatesB\x13\n" +
	"\x11_umts_lte_cell_idB\x0e\n" +
	"\f_driver_nameB\x1b\n" +
	"\x19_driver_card_license_typeB\x10\n" +
	"\x0e_driver_genderB\x11\n" +
	"\x0f_driver_card_idB\x1e\n" +
	"\x1c_driver_card_expiration_dateB\x1d\n" +
	"\x1b_driver_card_place_of_issueB\x16\n" +
	"\x14_driver_status_eventB\f\n" +
	"\n" +
	"_ain_speedB\x15\n" +
	"\x13_msp500_vendor_nameB\x18\n" +
	"\x16_msp500_vehicle_numberB\x16\n" +
	"\x14_msp500_speed_sensorB\x0e\n" +
	"\f_wake_reasonB\x14\n" +
	"\x12_eye_temperature_1B\x14\n" +
	"\x12_eye_temperature_2B\x14\n" +
	"\x12_eye_temperature_3B\x14\n" +
	"\x12_eye_temperature_4B\x11\n" +
	"\x0f_eye_humidity_1B\x11\n" +
	"\x0f_eye_humidity_2B\x11\n" +
	"\x0f_eye_humidity_3B\x11\n" +
	"\x0f_eye_humidity_4B\x0f\n" +
	"\r_eye_magnet_1B\x0f\n" +
	"\r_eye_magnet_2B\x0f\n" +
	"\r_eye_magnet_3B\x0f\n" +
	"\r_eye_magnet_4B\x11\n" +
	"\x0f_eye_movement_1B,\n" +
	"*_isf_clogged_brake_system_filter_indicatorB'\n" +
	"%_isf_low_washer_fluid_level_indicatorB!\n" +
	"\x1f_isf_low_adblue_level_indicatorB*\n" +
	"(_isf_low_trailer_tyre_pressure_indicatorB-\n" +
	"+_isf_wear_of_trailer_brake_lining_indicatorB/\n" +
	"-_isf_high_trailer_brake_temperature_indicatorB3\n" +
	"1_isf_incorrect_trailer_pneumatic_supply_indicatorB\x1e\n" +
	"\x1c_isf_low_cng_level_indicatorB(\n" +
	"&_asf_right_joystick_moved_right_activeB'\n" +
	"%_asf_right_joystick_moved_left_activeB*\n" +
	"(_asf_right_joystick_moved_forward_activeB'\n" +
	"%_asf_right_joystick_moved_back_activeB'\n" +
	"%_asf_left_joystick_moved_right_activeB&\n" +
	"$_asf_left_joystick_moved_left_activeB)\n" +
	"'_asf_left_joystick_moved_forward_activeB&\n" +
	"$_asf_left_joystick_moved_back_activeB\x1b\n" +
	"\x19_asf_first_rear_hydraulicB\x1c\n" +
	"\x1a_asf_second_rear_hydraulicB\x1b\n" +
	"\x19_asf_third_rear_hydraulicB\x1c\n" +
	"\x1a_asf_fourth_rear_hydraulicB\x1c\n" +
	"\x1a_asf_first_front_hydraulicB\x1d\n" +
	"\x1b_asf_second_front_hydraulicB\x1c\n" +
	"\x1a_asf_third_front_hydraulicB\x1d\n" +
	"\x1b_asf_fourth_front_hydraulicB\x1e\n" +
	"\x1c_asf_front_three_point_hitchB\x1d\n" +
	"\x1b_asf_rear_three_point_hitchB\x1b\n" +
	"\x19_asf_front_power_take_offB\x1a\n" +
	"\x18_asf_rear_power_take_offB\x14\n" +
	"\x12_asf_mowing_activeB\x17\n" +
	"\x15_asf_threshing_activeB \n" +
	"\x1e_asf_grain_release_from_hopperB\x1d\n" +
	"\x1b_asf_grain_tank_is_100_fullB\x1c\n" +
	"\x1a_asf_grain_tank_is_70_fullB\x1b\n" +
	"\x19_asf_grain_tank_is_openedB\x15\n" +
	"\x13_asf_unloader_driveB&\n" +
	"$_asf_cleaning_fan_control_turned_offB(\n" +
	"&_asf_threshing_drum_control_turned_offB\x1e\n" +
	"\x1c_asf_straw_walker_is_cloggedB3\n" +
	"1_asf_excessive_clearance_under_the_threshing_drumBD\n" +
	"B_asf_low_temperature_of_drive_system_hydraulics_less_than_5_gradesBI\n" +
	"G_asf_high_temperature_of_drive_system_hydraulics_greater_than_86_gradesB%\n" +
	"#_asf_ear_auger_speed_below_the_normB'\n" +
	"%_asf_grain_auger_speed_below_the_normB)\n" +
	"'_asf_straw_chooper_speed_below_the_normB(\n" +
	"&_asf_straw_shaker_speed_below_the_normB\"\n" +
	" _asf_feeder_speed_below_the_normB \n" +
	"\x1e_asf_straw_chopper_switched_onB\x1c\n" +
	"\x1a_asf_corn_header_connectedB\x1d\n" +
	"\x1b_asf_grain_header_connectedB!\n" +
	"\x1f_asf_feeder_reverse_switched_onB;\n" +
	"9_asf_the_pressure_filter_of_the_hydraulic_pump_is_cloggedB%\n" +
	"#_asf_adapter_pressure_filter_sensorB#\n" +
	"!_asf_service_2_required_indicatorB%\n" +
	"#_asf_drain_filter_clogged_indicatorB\x19\n" +
	"\x17_asf_section_1_sprayingB\x19\n" +
	"\x17_asf_section_2_sprayingB\x19\n" +
	"\x17_asf_section_3_sprayingB\x19\n" +
	"\x17_asf_section_4_sprayingB\x19\n" +
	"\x17_asf_section_5_sprayingB\x19\n" +
	"\x17_asf_section_6_sprayingB\x19\n" +
	"\x17_asf_section_7_sprayingB\x19\n" +
	"\x17_asf_section_8_sprayingB\x19\n" +
	"\x17_asf_section_9_sprayingB\x10\n" +
	"\x0e_usf_spreadingB\x18\n" +
	"\x16_usf_pouring_chemicalsB\x14\n" +
	"\x12_usf_conveyor_beltB\"\n" +
	" _usf_salt_spreader_s_drive_wheelB\x0e\n" +
	"\f_usf_brushesB\x15\n" +
	"\x13_usf_vacuum_cleanerB\x13\n" +
	"\x11_usf_water_supplyB\x12\n" +
	"\x10_usf_liquid_pumpB \n" +
	"\x1e_usf_unloading_from_the_hopperB1\n" +
	"/_usf_low_salt_sand_level_in_container_indicatorB-\n" +
	"+_usf_low_water_level_in_container_indicatorB\x10\n" +
	"\x0e_usf_chemicalsB\x11\n" +
	"\x0f_usf_compressorB\x1c\n" +
	"\x1a_usf_water_valve_is_openedB#\n" +
	"!_usf_cabin_moved_up_status_activeB%\n" +
	"#_usf_cabin_moved_down_status_activeB$\n" +
	"\"_usf_hydraulics_work_not_permittedB3\n" +
	"1_cisf_section_1_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_1_filledB\x1c\n" +
	"\x1a_cisf_section_1_overfilledB3\n" +
	"1_cisf_section_2_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_2_filledB\x1c\n" +
	"\x1a_cisf_section_2_overfilledB3\n" +
	"1_cisf_section_3_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_3_filledB\x1c\n" +
	"\x1a_cisf_section_3_overfilledB3\n" +
	"1_cisf_section_4_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_4_filledB\x1c\n" +
	"\x1a_cisf_section_4_overfilledB3\n" +
	"1_cisf_section_5_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_5_filledB\x1c\n" +
	"\x1a_cisf_section_5_overfilledB3\n" +
	"1_cisf_section_6_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_6_filledB\x1c\n" +
	"\x1a_cisf_section_6_overfilledB3\n" +
	"1_cisf_section_7_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_7_filledB\x1c\n" +
	"\x1a_cisf_section_7_overfilledB3\n" +
	"1_cisf_section_8_presence_of_fluid_in_the_downpipeB\x18\n" +
	"\x16_cisf_section_8_filledB\x1c\n" +
	"\x1a_cisf_section_8_overfilledB\x1b\n" +
	"\x19_distance_to_next_serviceB\x0f\n" +
	"\r_cng_level_kgB \n" +
	"\x1e_distance_from_need_of_serviceB\x1d\n" +
	"\x1b_distance_from_last_serviceB\x17\n" +
	"\x15_time_to_next_serviceB\x1c\n" +
	"\x1a_time_from_need_of_serviceB\x19\n" +
	"\x17_time_from_last_serivceB\x1f\n" +
	"\x1d_distance_to_next_oil_serviceB\x1b\n" +
	"\x19_time_to_next_oil_serviceB\x16\n" +
	"\x14_lvcan_vehicle_rangeB\x1a\n" +
	"\x18_lvcan_total_cng_countedB\x13\n" +
	"\x11_total_bale_countB\r\n" +
	"\v_bale_countB\x11\n" +
	"\x0f_cut_bale_countB\x0e\n" +
	"\f_bale_slicesB\x15\n" +
	"\x13_lvcan_maxroadspeedB\x1a\n" +
	"\x18_lvcan_exceededroadspeedB\x1b\n" +
	"\x19_lvcan_rsf_speedlimitsignB \n" +
	"\x1e_lvcan_rsf_endofspeedlimitsignB\x1a\n" +
	"\x18_lvcan_rsf_speedexceededB\x1f\n" +
	"\x1d_lvcan_rsf_timespeedlimitsignB\x1f\n" +
	"\x1d_lvcan_rsf_wthrspeedlimitsign*\xb8\x06\n" +
	"\x05Event\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\x0f\n" +
	"\vIGNITION_ON\x10\x01\x12\x10\n" +
	"\fIGNITION_OFF\x10\x02\x12\f\n" +
	"\bMOVEMENT\x10\x03\x12\b\n" +
	"\x04PLUG\x10\x04\x12\n" +
	"\n" +
	"\x06UNPLUG\x10\x05\x12\n" +
	"\n" +
	"\x06TOWING\x10\x06\x12\v\n" +
	"\aJAMMING\x10\a\x12\x0e\n" +
	"\n" +
	"OVER_SPEED\x10\b\x12\n" +
	"\n" +
	"\x06IDLING\x10\t\x12\x0f\n" +
	"\vLOW_BATTERY\x10\n" +
	"\x12\t\n" +
	"\x05CRASH\x10\v\x12\f\n" +
	"\bHUMIDITY\x10\f\x12\r\n" +
	"\tDOOR_OPEN\x10\r\x12\x14\n" +
	"\x10ENGINE_DOOR_OPEN\x10\x0e\x12\x13\n" +
	"\x0fTRUNK_DOOR_OPEN\x10\x0f\x12\x13\n" +
	"\x0fDIGITAL_INPUT_1\x10\x10\x12\x13\n" +
	"\x0fDIGITAL_INPUT_2\x10\x11\x12\x13\n" +
	"\x0fDIGITAL_INPUT_3\x10\x12\x12\x14\n" +
	"\x10DIGITAL_OUTPUT_1\x10\x13\x12\x14\n" +
	"\x10DIGITAL_OUTPUT_2\x10\x14\x12\x14\n" +
	"\x10DIGITAL_OUTPUT_3\x10\x15\x12\x12\n" +
	"\x0eANALOG_INPUT_1\x10\x16\x12\x12\n" +
	"\x0eANALOG_INPUT_2\x10\x17\x12\x0e\n" +
	"\n" +
	"FOOT_BRAKE\x10\x18\x12\x0f\n" +
	"\vTEMPERATURE\x10\x19\x12\b\n" +
	"\x04FUEL\x10\x1a\x12\x0f\n" +
	"\vCRASH_TRACE\x10\x1b\x12\r\n" +
	"\tDATA_MODE\x10\x1c\x12\a\n" +
	"\x03GSM\x10\x1d\x12\x0e\n" +
	"\n" +
	"SLEEP_MODE\x10\x1e\x12\b\n" +
	"\x04GNSS\x10\x1f\x12\a\n" +
	"\x03GPS\x10 \x12\x14\n" +
	"\x10EXTERNAL_VOLTAGE\x10!\x12\t\n" +
	"\x05SPEED\x10\"\x12\x13\n" +
	"\x0fBATTERY_VOLTAGE\x10#\x12\x13\n" +
	"\x0fBATTERY_CURRENT\x10$\x12\t\n" +
	"\x05TRIPS\x10%\x12\f\n" +
	"\bODOMETER\x10&\x12\n" +
	"\n" +
	"\x06AXIS_X\x10'\x12\n" +
	"\n" +
	"\x06AXIS_Y\x10(\x12\n" +
	"\n" +
	"\x06AXIS_Z\x10)\x12\r\n" +
	"\tSD_STATUS\x10*\x12\x1f\n" +
	"\x1bACCELERATION_PEDAL_POSITION\x10+\x12\x0e\n" +
	"\n" +
	"FUEL_LEVEL\x10,\x12\a\n" +
	"\x03DTC\x10-\x12\v\n" +
	"\aDRIVING\x10.\x12\x16\n" +
	"\x12HARSH_ACCELERATION\x10/\x12\x11\n" +
	"\rHARSH_BRAKING\x100\x12\x10\n" +
	"\fHARSH_CORNER\x101\x12\b\n" +
	"\x04FALL\x102BD\n" +
	"\x19com.fatehan.navzy.packetsP\x01Z%github.com/fatehan-navzy/strc/packetsb\x06proto3"

var (
	file_packets_packets_proto_rawDescOnce sync.Once
	file_packets_packets_proto_rawDescData []byte
)

func file_packets_packets_proto_rawDescGZIP() []byte {
	file_packets_packets_proto_rawDescOnce.Do(func() {
		file_packets_packets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packets_packets_proto_rawDesc), len(file_packets_packets_proto_rawDesc)))
	})
	return file_packets_packets_proto_rawDescData
}

var file_packets_packets_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_packets_packets_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_packets_packets_proto_goTypes = []any{
	(Event)(0),                    // 0: com.navzy.packets.Event
	(Result_PacketType)(0),        // 1: com.navzy.packets.Result.PacketType
	(*Result)(nil),                // 2: com.navzy.packets.Result
	(*Task)(nil),                  // 3: com.navzy.packets.Task
	(*Client)(nil),                // 4: com.navzy.packets.Client
	(*Data)(nil),                  // 5: com.navzy.packets.Data
	(*Packet)(nil),                // 6: com.navzy.packets.Packet
	(*Compact)(nil),               // 7: com.navzy.packets.Compact
	(*devices.Device)(nil),        // 8: com.navzy.devices.Device
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_packets_packets_proto_depIdxs = []int32{
	1,  // 0: com.navzy.packets.Result.Type:type_name -> com.navzy.packets.Result.PacketType
	6,  // 1: com.navzy.packets.Result.data:type_name -> com.navzy.packets.Packet
	8,  // 2: com.navzy.packets.Task.device:type_name -> com.navzy.devices.Device
	6,  // 3: com.navzy.packets.Task.packet:type_name -> com.navzy.packets.Packet
	4,  // 4: com.navzy.packets.Task.client:type_name -> com.navzy.packets.Client
	9,  // 5: com.navzy.packets.Data.received:type_name -> google.protobuf.Timestamp
	6,  // 6: com.navzy.packets.Data.packet:type_name -> com.navzy.packets.Packet
	9,  // 7: com.navzy.packets.Packet.datetime:type_name -> google.protobuf.Timestamp
	7,  // 8: com.navzy.packets.Packet.compact:type_name -> com.navzy.packets.Compact
	0,  // 9: com.navzy.packets.Packet.events:type_name -> com.navzy.packets.Event
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_packets_packets_proto_init() }
func file_packets_packets_proto_init() {
	if File_packets_packets_proto != nil {
		return
	}
	file_packets_packets_proto_msgTypes[4].OneofWrappers = []any{}
	file_packets_packets_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packets_packets_proto_rawDesc), len(file_packets_packets_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packets_packets_proto_goTypes,
		DependencyIndexes: file_packets_packets_proto_depIdxs,
		EnumInfos:         file_packets_packets_proto_enumTypes,
		MessageInfos:      file_packets_packets_proto_msgTypes,
	}.Build()
	File_packets_packets_proto = out.File
	file_packets_packets_proto_goTypes = nil
	file_packets_packets_proto_depIdxs = nil
}
