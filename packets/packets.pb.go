// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.31.1
// source: packets/packets.proto

package packets

import (
	devices "github.com/fatehan-navzy/strc/devices"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event int32

const (
	Event_NORMAL                      Event = 0
	Event_IGNITION_ON                 Event = 1
	Event_IGNITION_OFF                Event = 2
	Event_MOVEMENT                    Event = 3
	Event_PLUG                        Event = 4
	Event_UNPLUG                      Event = 5
	Event_TOWING                      Event = 6
	Event_JAMMING                     Event = 7
	Event_OVER_SPEED                  Event = 8
	Event_IDLING                      Event = 9
	Event_LOW_BATTERY                 Event = 10
	Event_CRASH                       Event = 11
	Event_HUMIDITY                    Event = 12
	Event_DOOR_OPEN                   Event = 13
	Event_ENGINE_DOOR_OPEN            Event = 14
	Event_TRUNK_DOOR_OPEN             Event = 15
	Event_DIGITAL_INPUT1              Event = 16
	Event_DIGITAL_INPUT2              Event = 17
	Event_DIGITAL_INPUT3              Event = 18
	Event_DIGITAL_OUTPUT1             Event = 19
	Event_DIGITAL_OUTPUT2             Event = 20
	Event_DIGITAL_OUTPUT3             Event = 21
	Event_ANALOG_INPUT1               Event = 22
	Event_ANALOG_INPUT2               Event = 23
	Event_FOOT_BRAKE                  Event = 24
	Event_TEMPERATURE                 Event = 25
	Event_FUEL                        Event = 26
	Event_CRASH_TRACE                 Event = 27
	Event_DATA_MODE                   Event = 28
	Event_GSM                         Event = 29
	Event_SLEEP_MODE                  Event = 30
	Event_GNSS                        Event = 31
	Event_GPS                         Event = 32
	Event_EXTERNAL_VOLTAGE            Event = 33
	Event_SPEED                       Event = 34
	Event_BATTERY_VOLTAGE             Event = 35
	Event_BATTERY_CURRENT             Event = 36
	Event_TRIPS                       Event = 37
	Event_ODOMETER                    Event = 38
	Event_AXIS_X                      Event = 39
	Event_AXIS_Y                      Event = 40
	Event_AXIS_Z                      Event = 41
	Event_SD_STATUS                   Event = 42
	Event_ACCELERATION_PEDAL_POSITION Event = 43
	Event_FUEL_LEVEL                  Event = 44
	Event_DTC                         Event = 45
	Event_DRIVING                     Event = 46
	Event_HARSH_ACCELERATION          Event = 47
	Event_HARSH_BRAKING               Event = 48
	Event_HARSH_CORNER                Event = 49
	Event_FALL                        Event = 50
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0:  "NORMAL",
		1:  "IGNITION_ON",
		2:  "IGNITION_OFF",
		3:  "MOVEMENT",
		4:  "PLUG",
		5:  "UNPLUG",
		6:  "TOWING",
		7:  "JAMMING",
		8:  "OVER_SPEED",
		9:  "IDLING",
		10: "LOW_BATTERY",
		11: "CRASH",
		12: "HUMIDITY",
		13: "DOOR_OPEN",
		14: "ENGINE_DOOR_OPEN",
		15: "TRUNK_DOOR_OPEN",
		16: "DIGITAL_INPUT1",
		17: "DIGITAL_INPUT2",
		18: "DIGITAL_INPUT3",
		19: "DIGITAL_OUTPUT1",
		20: "DIGITAL_OUTPUT2",
		21: "DIGITAL_OUTPUT3",
		22: "ANALOG_INPUT1",
		23: "ANALOG_INPUT2",
		24: "FOOT_BRAKE",
		25: "TEMPERATURE",
		26: "FUEL",
		27: "CRASH_TRACE",
		28: "DATA_MODE",
		29: "GSM",
		30: "SLEEP_MODE",
		31: "GNSS",
		32: "GPS",
		33: "EXTERNAL_VOLTAGE",
		34: "SPEED",
		35: "BATTERY_VOLTAGE",
		36: "BATTERY_CURRENT",
		37: "TRIPS",
		38: "ODOMETER",
		39: "AXIS_X",
		40: "AXIS_Y",
		41: "AXIS_Z",
		42: "SD_STATUS",
		43: "ACCELERATION_PEDAL_POSITION",
		44: "FUEL_LEVEL",
		45: "DTC",
		46: "DRIVING",
		47: "HARSH_ACCELERATION",
		48: "HARSH_BRAKING",
		49: "HARSH_CORNER",
		50: "FALL",
	}
	Event_value = map[string]int32{
		"NORMAL":                      0,
		"IGNITION_ON":                 1,
		"IGNITION_OFF":                2,
		"MOVEMENT":                    3,
		"PLUG":                        4,
		"UNPLUG":                      5,
		"TOWING":                      6,
		"JAMMING":                     7,
		"OVER_SPEED":                  8,
		"IDLING":                      9,
		"LOW_BATTERY":                 10,
		"CRASH":                       11,
		"HUMIDITY":                    12,
		"DOOR_OPEN":                   13,
		"ENGINE_DOOR_OPEN":            14,
		"TRUNK_DOOR_OPEN":             15,
		"DIGITAL_INPUT1":              16,
		"DIGITAL_INPUT2":              17,
		"DIGITAL_INPUT3":              18,
		"DIGITAL_OUTPUT1":             19,
		"DIGITAL_OUTPUT2":             20,
		"DIGITAL_OUTPUT3":             21,
		"ANALOG_INPUT1":               22,
		"ANALOG_INPUT2":               23,
		"FOOT_BRAKE":                  24,
		"TEMPERATURE":                 25,
		"FUEL":                        26,
		"CRASH_TRACE":                 27,
		"DATA_MODE":                   28,
		"GSM":                         29,
		"SLEEP_MODE":                  30,
		"GNSS":                        31,
		"GPS":                         32,
		"EXTERNAL_VOLTAGE":            33,
		"SPEED":                       34,
		"BATTERY_VOLTAGE":             35,
		"BATTERY_CURRENT":             36,
		"TRIPS":                       37,
		"ODOMETER":                    38,
		"AXIS_X":                      39,
		"AXIS_Y":                      40,
		"AXIS_Z":                      41,
		"SD_STATUS":                   42,
		"ACCELERATION_PEDAL_POSITION": 43,
		"FUEL_LEVEL":                  44,
		"DTC":                         45,
		"DRIVING":                     46,
		"HARSH_ACCELERATION":          47,
		"HARSH_BRAKING":               48,
		"HARSH_CORNER":                49,
		"FALL":                        50,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_packets_packets_proto_enumTypes[0].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_packets_packets_proto_enumTypes[0]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{0}
}

type Result_PacketType int32

const (
	Result_FAILED    Result_PacketType = 0
	Result_AUTHORIZE Result_PacketType = 1
	Result_DATA      Result_PacketType = 2
	Result_HEARTBEAT Result_PacketType = 3
	Result_ANSWER    Result_PacketType = 4
	Result_CUSTOM    Result_PacketType = 5
)

// Enum value maps for Result_PacketType.
var (
	Result_PacketType_name = map[int32]string{
		0: "FAILED",
		1: "AUTHORIZE",
		2: "DATA",
		3: "HEARTBEAT",
		4: "ANSWER",
		5: "CUSTOM",
	}
	Result_PacketType_value = map[string]int32{
		"FAILED":    0,
		"AUTHORIZE": 1,
		"DATA":      2,
		"HEARTBEAT": 3,
		"ANSWER":    4,
		"CUSTOM":    5,
	}
)

func (x Result_PacketType) Enum() *Result_PacketType {
	p := new(Result_PacketType)
	*p = x
	return p
}

func (x Result_PacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result_PacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_packets_packets_proto_enumTypes[1].Descriptor()
}

func (Result_PacketType) Type() protoreflect.EnumType {
	return &file_packets_packets_proto_enumTypes[1]
}

func (x Result_PacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result_PacketType.Descriptor instead.
func (Result_PacketType) EnumDescriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{0, 0}
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imei          uint64                 `protobuf:"varint,1,opt,name=imei,proto3" json:"imei,omitempty"`
	Type          Result_PacketType      `protobuf:"varint,2,opt,name=Type,json=packet_type,proto3,enum=com.navzy.packets.Result_PacketType" json:"Type,omitempty"`
	Data          []*Packet              `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	Response      []byte                 `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	Answer        []byte                 `protobuf:"bytes,5,opt,name=answer,proto3" json:"answer,omitempty"`
	Payload       []byte                 `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_packets_packets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetImei() uint64 {
	if x != nil {
		return x.Imei
	}
	return 0
}

func (x *Result) GetType() Result_PacketType {
	if x != nil {
		return x.Type
	}
	return Result_FAILED
}

func (x *Result) GetData() []*Packet {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Result) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Result) GetAnswer() []byte {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *Result) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Device        *devices.Device        `protobuf:"bytes,1,opt,name=device,json=devices,proto3" json:"device,omitempty"`
	Packet        *Packet                `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
	Client        *Client                `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_packets_packets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetDevice() *devices.Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Task) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *Task) GetClient() *Client {
	if x != nil {
		return x.Client
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ServerIp      string                 `protobuf:"bytes,3,opt,name=server_ip,proto3" json:"server_ip,omitempty"`
	ServerPort    uint32                 `protobuf:"varint,4,opt,name=server_port,proto3" json:"server_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Client) Reset() {
	*x = Client{}
	mi := &file_packets_packets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{2}
}

func (x *Client) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Client) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Client) GetServerIp() string {
	if x != nil {
		return x.ServerIp
	}
	return ""
}

func (x *Client) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceId      string                 `protobuf:"bytes,1,opt,name=device_id,proto3" json:"device_id,omitempty"`
	Received      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=received,proto3" json:"received,omitempty"`
	Packet        *Packet                `protobuf:"bytes,3,opt,name=packet,proto3" json:"packet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_packets_packets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Data) GetReceived() *timestamppb.Timestamp {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *Data) GetPacket() *Packet {
	if x != nil {
		return x.Packet
	}
	return nil
}

type Packet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imei          uint64                 `protobuf:"varint,1,opt,name=imei,json=device_id,proto3" json:"imei,omitempty"`
	Datetime      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Latitude      float32                `protobuf:"fixed32,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float32                `protobuf:"fixed32,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude      uint32                 `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Angle         uint32                 `protobuf:"varint,6,opt,name=angle,proto3" json:"angle,omitempty"`
	Speed         uint32                 `protobuf:"varint,7,opt,name=speed,proto3" json:"speed,omitempty"`
	Satellite     *uint32                `protobuf:"varint,8,opt,name=satellite,proto3,oneof" json:"satellite,omitempty"`
	Ignition      *bool                  `protobuf:"varint,9,opt,name=ignition,proto3,oneof" json:"ignition,omitempty"`
	Mileage       *uint32                `protobuf:"varint,10,opt,name=mileage,proto3,oneof" json:"mileage,omitempty"`
	Compact       *Compact               `protobuf:"bytes,11,opt,name=compact,proto3" json:"compact,omitempty"`
	Events        []Event                `protobuf:"varint,12,rep,packed,name=events,json=alerts,proto3,enum=com.navzy.packets.Event" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Packet) Reset() {
	*x = Packet{}
	mi := &file_packets_packets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{4}
}

func (x *Packet) GetImei() uint64 {
	if x != nil {
		return x.Imei
	}
	return 0
}

func (x *Packet) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *Packet) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Packet) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Packet) GetAltitude() uint32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Packet) GetAngle() uint32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

func (x *Packet) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Packet) GetSatellite() uint32 {
	if x != nil && x.Satellite != nil {
		return *x.Satellite
	}
	return 0
}

func (x *Packet) GetIgnition() bool {
	if x != nil && x.Ignition != nil {
		return *x.Ignition
	}
	return false
}

func (x *Packet) GetMileage() uint32 {
	if x != nil && x.Mileage != nil {
		return *x.Mileage
	}
	return 0
}

func (x *Packet) GetCompact() *Compact {
	if x != nil {
		return x.Compact
	}
	return nil
}

func (x *Packet) GetEvents() []Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Compact struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parameter ID: 240
	// Property Name: Movement
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 – Movement Off, 1 – Movement On
	Movement *bool `protobuf:"varint,2,opt,name=movement,proto3,oneof" json:"movement,omitempty"`
	// Parameter ID: 80
	// Property Name: Data Mode
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 5
	// Multiplier: -
	// Units: -
	// Values: 0 – Home On Stop, 1 – Home On Moving, 2 – Roaming On Stop, 3 – Roaming On Moving, 4 – Unknown On Stop, 5 – Unknown On Moving
	DataMode *uint32 `protobuf:"varint,3,opt,name=data_mode,json=dataMode,proto3,oneof" json:"data_mode,omitempty"`
	// Parameter ID: 21
	// Property Name: GSM Signal
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 5
	// Multiplier: -
	// Units: -
	// Values: Value in range 1-5 Explanation
	GsmSignal *uint32 `protobuf:"varint,4,opt,name=gsm_signal,json=gsmSignal,proto3,oneof" json:"gsm_signal,omitempty"`
	// Parameter ID: 200
	// Property Name: Sleep Mode
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 4
	// Multiplier: -
	// Units: -
	// Values: 0 - No Sleep, 1 – GPS Sleep, 2 – Deep Sleep, 3 – Online Sleep, 4 - Ultra Sleep
	SleepMode *uint32 `protobuf:"varint,5,opt,name=sleep_mode,json=sleepMode,proto3,oneof" json:"sleep_mode,omitempty"`
	// Parameter ID: 69
	// Property Name: GNSS Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 3
	// Multiplier: -
	// Units: -
	// Values: 0 - GNSS OFF, 1 – GNSS ON with fix, 2 - GNSS ON without fix, 3 - GNSS sleep
	GnssStatus *uint32 `protobuf:"varint,6,opt,name=gnss_status,json=gnssStatus,proto3,oneof" json:"gnss_status,omitempty"`
	// Parameter ID: 181
	// Property Name: GNSS PDOP
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 500
	// Multiplier: 0.1
	// Units:
	// Values: Coefficient, calculation formula
	GnssPdop *uint32 `protobuf:"varint,7,opt,name=gnss_pdop,json=gnssPdop,proto3,oneof" json:"gnss_pdop,omitempty"`
	// Parameter ID: 182
	// Property Name: GNSS HDOP
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 500
	// Multiplier: 0.1
	// Units:
	// Values: Coefficient, calculation formula
	GnssHdop *uint32 `protobuf:"varint,8,opt,name=gnss_hdop,json=gnssHdop,proto3,oneof" json:"gnss_hdop,omitempty"`
	// Parameter ID: 66
	// Property Name: External Voltage
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	ExternalVoltage *uint32 `protobuf:"varint,9,opt,name=external_voltage,json=externalVoltage,proto3,oneof" json:"external_voltage,omitempty"`
	// Parameter ID: 24
	// Property Name: Speed
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 350
	// Multiplier: -
	// Units: km/h
	// Values: GNSS Speed
	Speed *uint32 `protobuf:"varint,10,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	// Parameter ID: 205
	// Property Name: GSM Cell ID
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values: GSM base station ID
	GsmCellId *uint32 `protobuf:"varint,11,opt,name=gsm_cell_id,json=gsmCellId,proto3,oneof" json:"gsm_cell_id,omitempty"`
	// Parameter ID: 206
	// Property Name: GSM Area Code
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values: Location Area code (LAC), it depends on GSM operator. It provides unique number which assigned to a set of base GSM stations.
	GsmAreaCode *uint32 `protobuf:"varint,12,opt,name=gsm_area_code,json=gsmAreaCode,proto3,oneof" json:"gsm_area_code,omitempty"`
	// Parameter ID: 67
	// Property Name: Battery Voltage
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	BatteryVoltage *uint32 `protobuf:"varint,13,opt,name=battery_voltage,json=batteryVoltage,proto3,oneof" json:"battery_voltage,omitempty"`
	// Parameter ID: 68
	// Property Name: Battery Current
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: A
	// Values: Current
	BatteryCurrent *uint32 `protobuf:"varint,14,opt,name=battery_current,json=batteryCurrent,proto3,oneof" json:"battery_current,omitempty"`
	// Parameter ID: 241
	// Property Name: Active GSM Operator
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: Currently used GSM Operator code
	ActiveGsmOperator *uint32 `protobuf:"varint,15,opt,name=active_gsm_operator,json=activeGsmOperator,proto3,oneof" json:"active_gsm_operator,omitempty"`
	// Parameter ID: 199
	// Property Name: Trip Odometer
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 2147483647
	// Multiplier: -
	// Units: m
	// Values: Trip Odometer value
	TripOdometer *uint32 `protobuf:"varint,16,opt,name=trip_odometer,json=tripOdometer,proto3,oneof" json:"trip_odometer,omitempty"`
	// Parameter ID: 16
	// Property Name: Total Odometer
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 2147483647
	// Multiplier: -
	// Units: -
	// Values: Total Odometer value in meters
	TotalOdometer *uint32 `protobuf:"varint,17,opt,name=total_odometer,json=totalOdometer,proto3,oneof" json:"total_odometer,omitempty"`
	// Parameter ID: 1
	// Property Name: Digital Input 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalInput1 *bool `protobuf:"varint,18,opt,name=digital_input1,json=digitalInput1,proto3,oneof" json:"digital_input1,omitempty"`
	// Parameter ID: 9
	// Property Name: Analog Input 1
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	AnalogInput1 *uint32 `protobuf:"varint,19,opt,name=analog_input1,json=analogInput1,proto3,oneof" json:"analog_input1,omitempty"`
	// Parameter ID: 179
	// Property Name: Digital Output 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalOutput1 *bool `protobuf:"varint,20,opt,name=digital_output1,json=digitalOutput1,proto3,oneof" json:"digital_output1,omitempty"`
	// Parameter ID: 12
	// Property Name: Fuel Used GPS
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: 0.001
	// Units: l
	// Values: Fuel Used
	FuelUsedGps *uint32 `protobuf:"varint,21,opt,name=fuel_used_gps,json=fuelUsedGps,proto3,oneof" json:"fuel_used_gps,omitempty"`
	// Parameter ID: 13
	// Property Name: Fuel Rate GPS
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 32767
	// Multiplier: 0.01
	// Units: l/100km
	// Values: Average Fuel Use
	FuelRateGps *uint32 `protobuf:"varint,22,opt,name=fuel_rate_gps,json=fuelRateGps,proto3,oneof" json:"fuel_rate_gps,omitempty"`
	// Parameter ID: 17
	// Property Name: Axis X
	// Type: Signed
	// Bytes: 2
	// Min: -8000
	// Max: 8000
	// Multiplier: -
	// Units: mG
	// Values: X axis value
	AxisX *int32 `protobuf:"varint,23,opt,name=axis_x,json=axisX,proto3,oneof" json:"axis_x,omitempty"`
	// Parameter ID: 18
	// Property Name: Axis Y
	// Type: Signed
	// Bytes: 2
	// Min: -8000
	// Max: 8000
	// Multiplier: -
	// Units: mG
	// Values: Y axis value
	AxisY *int32 `protobuf:"varint,24,opt,name=axis_y,json=axisY,proto3,oneof" json:"axis_y,omitempty"`
	// Parameter ID: 19
	// Property Name: Axis Z
	// Type: Signed
	// Bytes: 2
	// Min: -8000
	// Max: 8000
	// Multiplier: -
	// Units: mG
	// Values: Z axis value
	AxisZ *int32 `protobuf:"varint,25,opt,name=axis_z,json=axisZ,proto3,oneof" json:"axis_z,omitempty"`
	// Parameter ID: 11
	// Property Name: ICCID1
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Value of SIM ICCID, MSB
	Iccid1 *uint64 `protobuf:"varint,26,opt,name=iccid1,proto3,oneof" json:"iccid1,omitempty"`
	// Parameter ID: 10
	// Property Name: SD Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - not present, 1 - present
	SdStatus *bool `protobuf:"varint,27,opt,name=sd_status,json=sdStatus,proto3,oneof" json:"sd_status,omitempty"`
	// Parameter ID: 2
	// Property Name: Digital Input 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalInput2 *bool `protobuf:"varint,28,opt,name=digital_input2,json=digitalInput2,proto3,oneof" json:"digital_input2,omitempty"`
	// Parameter ID: 3
	// Property Name: Digital Input 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalInput3 *bool `protobuf:"varint,29,opt,name=digital_input3,json=digitalInput3,proto3,oneof" json:"digital_input3,omitempty"`
	// Parameter ID: 6
	// Property Name: Analog Input 2
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.001
	// Units: V
	// Values: Voltage
	AnalogInput2 *uint32 `protobuf:"varint,30,opt,name=analog_input2,json=analogInput2,proto3,oneof" json:"analog_input2,omitempty"`
	// Parameter ID: 180
	// Property Name: Digital Output 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic 0/1
	DigitalOutput2 *bool `protobuf:"varint,31,opt,name=digital_output2,json=digitalOutput2,proto3,oneof" json:"digital_output2,omitempty"`
	// Parameter ID: 72
	// Property Name: Dallas Temperature 1
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature1 *int32 `protobuf:"varint,32,opt,name=dallas_temperature1,json=dallasTemperature1,proto3,oneof" json:"dallas_temperature1,omitempty"`
	// Parameter ID: 73
	// Property Name: Dallas Temperature 2
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature2 *int32 `protobuf:"varint,33,opt,name=dallas_temperature2,json=dallasTemperature2,proto3,oneof" json:"dallas_temperature2,omitempty"`
	// Parameter ID: 74
	// Property Name: Dallas Temperature 3
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature3 *int32 `protobuf:"varint,34,opt,name=dallas_temperature3,json=dallasTemperature3,proto3,oneof" json:"dallas_temperature3,omitempty"`
	// Parameter ID: 75
	// Property Name: Dallas Temperature 4
	// Type: Signed
	// Bytes: 4
	// Min: -550
	// Max: 1150
	// Multiplier: 0.1
	// Units: °C
	// Values: Degrees ( °C ), -55 - +115, if 850 – Sensor not ready, if 2000 – Value read error, if 3000 – Not connected, if 4000 – ID failed, if 5000 – same as 850
	DallasTemperature4 *int32 `protobuf:"varint,35,opt,name=dallas_temperature4,json=dallasTemperature4,proto3,oneof" json:"dallas_temperature4,omitempty"`
	// Parameter ID: 76
	// Property Name: Dallas Temperature ID 1
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId1 *uint64 `protobuf:"varint,36,opt,name=dallas_temperature_id1,json=dallasTemperatureId1,proto3,oneof" json:"dallas_temperature_id1,omitempty"`
	// Parameter ID: 77
	// Property Name: Dallas Temperature ID 2
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId2 *uint64 `protobuf:"varint,37,opt,name=dallas_temperature_id2,json=dallasTemperatureId2,proto3,oneof" json:"dallas_temperature_id2,omitempty"`
	// Parameter ID: 79
	// Property Name: Dallas Temperature ID 3
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId3 *uint64 `protobuf:"varint,38,opt,name=dallas_temperature_id3,json=dallasTemperatureId3,proto3,oneof" json:"dallas_temperature_id3,omitempty"`
	// Parameter ID: 71
	// Property Name: Dallas Temperature ID 4
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: Dallas sensor ID
	DallasTemperatureId4 *uint64 `protobuf:"varint,39,opt,name=dallas_temperature_id4,json=dallasTemperatureId4,proto3,oneof" json:"dallas_temperature_id4,omitempty"`
	// Parameter ID: 78
	// Property Name: iButton
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: iButton ID
	Ibutton *uint64 `protobuf:"varint,40,opt,name=ibutton,proto3,oneof" json:"ibutton,omitempty"`
	// Parameter ID: 207
	// Property Name: RFID
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: RFID ID
	Rfid *uint64 `protobuf:"varint,41,opt,name=rfid,proto3,oneof" json:"rfid,omitempty"`
	// Parameter ID: 201
	// Property Name: LLS 1 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS232/RS485
	Lls1FuelLevel *int32 `protobuf:"varint,42,opt,name=lls1_fuel_level,json=lls1FuelLevel,proto3,oneof" json:"lls1_fuel_level,omitempty"`
	// Parameter ID: 202
	// Property Name: LLS 1 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS232/RS485
	Lls1Temperature *int32 `protobuf:"varint,43,opt,name=lls1_temperature,json=lls1Temperature,proto3,oneof" json:"lls1_temperature,omitempty"`
	// Parameter ID: 203
	// Property Name: LLS 2 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls2FuelLevel *int32 `protobuf:"varint,44,opt,name=lls2_fuel_level,json=lls2FuelLevel,proto3,oneof" json:"lls2_fuel_level,omitempty"`
	// Parameter ID: 204
	// Property Name: LLS 2 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls2Temperature *int32 `protobuf:"varint,45,opt,name=lls2_temperature,json=lls2Temperature,proto3,oneof" json:"lls2_temperature,omitempty"`
	// Parameter ID: 210
	// Property Name: LLS 3 Fuel Level
	// Type: Unsigned
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls3FuelLevel *uint32 `protobuf:"varint,46,opt,name=lls3_fuel_level,json=lls3FuelLevel,proto3,oneof" json:"lls3_fuel_level,omitempty"`
	// Parameter ID: 211
	// Property Name: LLS 3 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls3Temperature *int32 `protobuf:"varint,47,opt,name=lls3_temperature,json=lls3Temperature,proto3,oneof" json:"lls3_temperature,omitempty"`
	// Parameter ID: 212
	// Property Name: LLS 4 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls4FuelLevel *int32 `protobuf:"varint,48,opt,name=lls4_fuel_level,json=lls4FuelLevel,proto3,oneof" json:"lls4_fuel_level,omitempty"`
	// Parameter ID: 213
	// Property Name: LLS 4 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls4Temperature *int32 `protobuf:"varint,49,opt,name=lls4_temperature,json=lls4Temperature,proto3,oneof" json:"lls4_temperature,omitempty"`
	// Parameter ID: 214
	// Property Name: LLS 5 Fuel Level
	// Type: Signed
	// Bytes: 2
	// Min: -4
	// Max: 32767
	// Multiplier: -
	// Units: kvants or ltr
	// Values: Fuel level measured by LLS sensor via RS485
	Lls5FuelLevel *int32 `protobuf:"varint,50,opt,name=lls5_fuel_level,json=lls5FuelLevel,proto3,oneof" json:"lls5_fuel_level,omitempty"`
	// Parameter ID: 215
	// Property Name: LLS 5 Temperature
	// Type: Signed
	// Bytes: 1
	// Min: -128
	// Max: 127
	// Multiplier: -
	// Units: °C
	// Values: Fuel temperature measured by LLS via RS485
	Lls5Temperature *int32 `protobuf:"varint,51,opt,name=lls5_temperature,json=lls5Temperature,proto3,oneof" json:"lls5_temperature,omitempty"`
	// Parameter ID: 15
	// Property Name: Eco Score
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 0.01
	// Units: -
	// Values: Average amount of events on some distance
	EcoScore *uint32 `protobuf:"varint,52,opt,name=eco_score,json=ecoScore,proto3,oneof" json:"eco_score,omitempty"`
	// Parameter ID: 113
	// Property Name: Battery Level
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Battery capacity level
	BatteryLevel *uint32 `protobuf:"varint,53,opt,name=battery_level,json=batteryLevel,proto3,oneof" json:"battery_level,omitempty"`
	// Parameter ID: 238
	// Property Name: User ID
	// Type: Unsigned
	// Bytes: 8
	// Min: 0
	// Max: 0xffffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: MAC address of NMEA receiver device connected via Bluetooth
	UserId *uint64 `protobuf:"varint,54,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Parameter ID: 237
	// Property Name: Network Type
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - 3G, 1 - GSM, 2 - 4G, 3 - LTE CAT M1, 4 - LTE CAT NB1, 99 - Unknown
	NetworkType *uint32 `protobuf:"varint,55,opt,name=network_type,json=networkType,proto3,oneof" json:"network_type,omitempty"`
	// Parameter ID: 4
	// Property Name: Pulse Counter Din1
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: Counts pulses, count is reset when records are saved
	PulseCounterDin1 *uint32 `protobuf:"varint,56,opt,name=pulse_counter_din1,json=pulseCounterDin1,proto3,oneof" json:"pulse_counter_din1,omitempty"`
	// Parameter ID: 5
	// Property Name: Pulse Counter Din2
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: Counts pulses, count is reset when records are saved
	PulseCounterDin2 *uint32 `protobuf:"varint,57,opt,name=pulse_counter_din2,json=pulseCounterDin2,proto3,oneof" json:"pulse_counter_din2,omitempty"`
	// Parameter ID: 263
	// Property Name: BT Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 4
	// Multiplier: -
	// Units: -
	// Values: 0 - BT is disabled, 1 - BT Enabled, not device connected, 2 - Device connected, BTv3 Only, 3 - Device connected, BLE only, 4 - Device connected, BLE + BT
	BtStatus *uint32 `protobuf:"varint,58,opt,name=bt_status,json=btStatus,proto3,oneof" json:"bt_status,omitempty"`
	// Parameter ID: 264
	// Property Name: Barcode ID
	// Type: ASCII
	// Bytes: Variable
	// Min: 0
	// Max: 32
	// Multiplier: -
	// Units: -
	// Values: Barcode ID
	BarcodeId *string `protobuf:"bytes,59,opt,name=barcode_id,json=barcodeId,proto3,oneof" json:"barcode_id,omitempty"`
	// Parameter ID: 303
	// Property Name: Instant Movement
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1 returns movement value
	InstantMovement *bool `protobuf:"varint,60,opt,name=instant_movement,json=instantMovement,proto3,oneof" json:"instant_movement,omitempty"`
	// Parameter ID: 327
	// Property Name: UL202-02 Sensor Fuel level
	// Type: Signed
	// Bytes: 2
	// Min: -150
	// Max: 32767
	// Multiplier: 0.1
	// Units: mm
	// Values: UL202-02 Sensor Fuel level
	Ul202_02SensorFuelLevel *int32 `protobuf:"varint,61,opt,name=ul202_02_sensor_fuel_level,json=ul20202SensorFuelLevel,proto3,oneof" json:"ul202_02_sensor_fuel_level,omitempty"`
	// Parameter ID: 483
	// Property Name: UL202-02 Sensor Status
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 255
	// Multiplier: -
	// Units: -
	// Values: UL202-02 sensor status codes
	Ul202_02SensorStatus *uint32 `protobuf:"varint,62,opt,name=ul202_02_sensor_status,json=ul20202SensorStatus,proto3,oneof" json:"ul202_02_sensor_status,omitempty"`
	// Parameter ID: 380
	// Property Name: Digital output 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	DigitalOutput3 *bool `protobuf:"varint,63,opt,name=digital_output3,json=digitalOutput3,proto3,oneof" json:"digital_output3,omitempty"`
	// Parameter ID: 381
	// Property Name: Ground Sense
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Logic: 0/1
	GroundSense *bool `protobuf:"varint,64,opt,name=ground_sense,json=groundSense,proto3,oneof" json:"ground_sense,omitempty"`
	// Parameter ID: 387
	// Property Name: ISO6709 Coordinates
	// Type: HEX
	// Bytes: 34
	// Min: 0
	// Max: 0x7fffffffffffffff
	// Multiplier: -
	// Units: -
	// Values: ISO6709 Coordinates Latitude, Longitude (in Degrees, Minutes and Seconds) and Altitude: IO value format: ±DDMMSS.SSSS±DDDMMSS.SSSS±AAA.AAA/
	Iso6709Coordinates *string `protobuf:"bytes,65,opt,name=iso6709_coordinates,json=iso6709Coordinates,proto3,oneof" json:"iso6709_coordinates,omitempty"`
	// Parameter ID: 636
	// Property Name: UMTS/LTE Cell ID
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values:
	UmtsLteCellId *uint32 `protobuf:"varint,66,opt,name=umts_lte_cell_id,json=umtsLteCellId,proto3,oneof" json:"umts_lte_cell_id,omitempty"`
	// Parameter ID: 403
	// Property Name: Driver Name
	// Type: Unsigned
	// Bytes: 35
	// Min: -
	// Max: -
	// Multiplier: -
	// Units: -
	// Values: Driver name extracted from card, displayed without delimiters ($ signs)
	DriverName *string `protobuf:"bytes,67,opt,name=driver_name,json=driverName,proto3,oneof" json:"driver_name,omitempty"` // Note: Unsigned but seems like string, but per type Unsigned, perhaps treat as uint64 for simplicity, but bytes 35 suggest bytes
	// Parameter ID: 404
	// Property Name: Driver card license type
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 8
	// Multiplier: -
	// Units: -
	// Values: None - 0, B.1 license type - 1, B.2 license type - 2, B.3 license type - 3, B.4 license type - 4, T.1 license type - 5, T.2 license type - 6, T.3 license type - 7, T.4 license type - 8
	DriverCardLicenseType *uint32 `protobuf:"varint,68,opt,name=driver_card_license_type,json=driverCardLicenseType,proto3,oneof" json:"driver_card_license_type,omitempty"`
	// Parameter ID: 405
	// Property Name: Driver Gender
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 2
	// Multiplier: -
	// Units: -
	// Values: None - 0, Male - 1, Female - 2
	DriverGender *uint32 `protobuf:"varint,69,opt,name=driver_gender,json=driverGender,proto3,oneof" json:"driver_gender,omitempty"`
	// Parameter ID: 406
	// Property Name: Driver Card ID
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values: None - 0, Male - 1, Female - 2  // Note: Seems typo in document, values from previous?
	DriverCardId *uint32 `protobuf:"varint,70,opt,name=driver_card_id,json=driverCardId,proto3,oneof" json:"driver_card_id,omitempty"`
	// Parameter ID: 407
	// Property Name: Driver Card expiration date
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 9999
	// Multiplier: -
	// Units: -
	// Values:
	DriverCardExpirationDate *uint32 `protobuf:"varint,71,opt,name=driver_card_expiration_date,json=driverCardExpirationDate,proto3,oneof" json:"driver_card_expiration_date,omitempty"`
	// Parameter ID: 408
	// Property Name: Driver Card place of issue
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values: Extracted from card
	DriverCardPlaceOfIssue *uint32 `protobuf:"varint,72,opt,name=driver_card_place_of_issue,json=driverCardPlaceOfIssue,proto3,oneof" json:"driver_card_place_of_issue,omitempty"`
	// Parameter ID: 409
	// Property Name: Driver Status Event
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 2
	// Multiplier: -
	// Units: -
	// Values: Registered - 0, Deregistered - 1, Swapping - 2
	DriverStatusEvent *uint32 `protobuf:"varint,73,opt,name=driver_status_event,json=driverStatusEvent,proto3,oneof" json:"driver_status_event,omitempty"`
	// Parameter ID: 329
	// Property Name: AIN Speed
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: -
	// Values:
	AinSpeed *uint32 `protobuf:"varint,74,opt,name=ain_speed,json=ainSpeed,proto3,oneof" json:"ain_speed,omitempty"`
	// Parameter ID: 500
	// Property Name: MSP500 vendor name
	// Type: ASCII
	// Bytes: 40
	// Min: 0
	// Max: 40
	// Multiplier: -
	// Units: -
	// Values: Name of the integrator who installed the device
	Msp500VendorName *string `protobuf:"bytes,75,opt,name=msp500_vendor_name,json=msp500VendorName,proto3,oneof" json:"msp500_vendor_name,omitempty"`
	// Parameter ID: 501
	// Property Name: MSP500 vehicle number
	// Type: ASCII
	// Bytes: 40
	// Min: 0
	// Max: 40
	// Multiplier: -
	// Units: -
	// Values: Vehicle number on which the device is installed
	Msp500VehicleNumber *string `protobuf:"bytes,76,opt,name=msp500_vehicle_number,json=msp500VehicleNumber,proto3,oneof" json:"msp500_vehicle_number,omitempty"`
	// Parameter ID: 502
	// Property Name: MSP500 speed sensor
	// Type: unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Status of the speed sensor
	Msp500SpeedSensor *bool `protobuf:"varint,77,opt,name=msp500_speed_sensor,json=msp500SpeedSensor,proto3,oneof" json:"msp500_speed_sensor,omitempty"`
	// Parameter ID: 637
	// Property Name: Wake Reason
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: True if device was woken by RTC alarm
	WakeReason *bool `protobuf:"varint,78,opt,name=wake_reason,json=wakeReason,proto3,oneof" json:"wake_reason,omitempty"`
	// Parameter ID: 10800
	// Property Name: EYE Temperature 1
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 1
	EyeTemperature1 *int32 `protobuf:"varint,79,opt,name=eye_temperature1,json=eyeTemperature1,proto3,oneof" json:"eye_temperature1,omitempty"`
	// Parameter ID: 10801
	// Property Name: EYE Temperature 2
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 2
	EyeTemperature2 *int32 `protobuf:"varint,80,opt,name=eye_temperature2,json=eyeTemperature2,proto3,oneof" json:"eye_temperature2,omitempty"`
	// Parameter ID: 10802
	// Property Name: EYE Temperature 3
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 3
	EyeTemperature3 *int32 `protobuf:"varint,81,opt,name=eye_temperature3,json=eyeTemperature3,proto3,oneof" json:"eye_temperature3,omitempty"`
	// Parameter ID: 10803
	// Property Name: EYE Temperature 4
	// Type: Signed
	// Bytes: 2
	// Min: -32768
	// Max: 32767
	// Multiplier: 0.01
	// Units: °C
	// Values: Temperature measured by EYE Sensor 4
	EyeTemperature4 *int32 `protobuf:"varint,82,opt,name=eye_temperature4,json=eyeTemperature4,proto3,oneof" json:"eye_temperature4,omitempty"`
	// Parameter ID: 10804
	// Property Name: EYE Humidity 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 1
	EyeHumidity1 *uint32 `protobuf:"varint,83,opt,name=eye_humidity1,json=eyeHumidity1,proto3,oneof" json:"eye_humidity1,omitempty"`
	// Parameter ID: 10805
	// Property Name: EYE Humidity 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 2
	EyeHumidity2 *uint32 `protobuf:"varint,84,opt,name=eye_humidity2,json=eyeHumidity2,proto3,oneof" json:"eye_humidity2,omitempty"`
	// Parameter ID: 10806
	// Property Name: EYE Humidity 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 3
	EyeHumidity3 *uint32 `protobuf:"varint,85,opt,name=eye_humidity3,json=eyeHumidity3,proto3,oneof" json:"eye_humidity3,omitempty"`
	// Parameter ID: 10807
	// Property Name: EYE Humidity 4
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 100
	// Multiplier: -
	// Units: %
	// Values: Humidity measured by EYE Sensor 4
	EyeHumidity4 *uint32 `protobuf:"varint,86,opt,name=eye_humidity4,json=eyeHumidity4,proto3,oneof" json:"eye_humidity4,omitempty"`
	// Parameter ID: 10808
	// Property Name: EYE Magnet 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 1
	EyeMagnet1 *bool `protobuf:"varint,87,opt,name=eye_magnet1,json=eyeMagnet1,proto3,oneof" json:"eye_magnet1,omitempty"`
	// Parameter ID: 10809
	// Property Name: EYE Magnet 2
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 2
	EyeMagnet2 *bool `protobuf:"varint,88,opt,name=eye_magnet2,json=eyeMagnet2,proto3,oneof" json:"eye_magnet2,omitempty"`
	// Parameter ID: 10810
	// Property Name: EYE Magnet 3
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 3
	EyeMagnet3 *bool `protobuf:"varint,89,opt,name=eye_magnet3,json=eyeMagnet3,proto3,oneof" json:"eye_magnet3,omitempty"`
	// Parameter ID: 10811
	// Property Name: EYE Magnet 4
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Magnet measured by EYE Sensor by EYE Sensor 4
	EyeMagnet4 *bool `protobuf:"varint,90,opt,name=eye_magnet4,json=eyeMagnet4,proto3,oneof" json:"eye_magnet4,omitempty"`
	// Parameter ID: 10812
	// Property Name: EYE Movement 1
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Movement state measure by EYE Sensor 1
	EyeMovement1       *bool   `protobuf:"varint,91,opt,name=eye_movement1,json=eyeMovement1,proto3,oneof" json:"eye_movement1,omitempty"`
	EyeMovement2       *bool   `protobuf:"varint,219,opt,name=eye_movement2,json=eyeMovement2,proto3,oneof" json:"eye_movement2,omitempty"`
	EyeMovement3       *bool   `protobuf:"varint,220,opt,name=eye_movement3,json=eyeMovement3,proto3,oneof" json:"eye_movement3,omitempty"`
	EyeMovement4       *bool   `protobuf:"varint,221,opt,name=eye_movement4,json=eyeMovement4,proto3,oneof" json:"eye_movement4,omitempty"`
	EyePitch1          *int32  `protobuf:"varint,222,opt,name=eye_pitch1,json=eyePitch1,proto3,oneof" json:"eye_pitch1,omitempty"`
	EyePitch2          *int32  `protobuf:"varint,223,opt,name=eye_pitch2,json=eyePitch2,proto3,oneof" json:"eye_pitch2,omitempty"`
	EyePitch3          *int32  `protobuf:"varint,224,opt,name=eye_pitch3,json=eyePitch3,proto3,oneof" json:"eye_pitch3,omitempty"`
	EyePitch4          *int32  `protobuf:"varint,225,opt,name=eye_pitch4,json=eyePitch4,proto3,oneof" json:"eye_pitch4,omitempty"`
	EyeLowBattery1     *bool   `protobuf:"varint,229,opt,name=eye_low_battery1,json=eyeLowBattery1,proto3,oneof" json:"eye_low_battery1,omitempty"`
	EyeLowBattery2     *bool   `protobuf:"varint,226,opt,name=eye_low_battery2,json=eyeLowBattery2,proto3,oneof" json:"eye_low_battery2,omitempty"`
	EyeLowBattery3     *bool   `protobuf:"varint,227,opt,name=eye_low_battery3,json=eyeLowBattery3,proto3,oneof" json:"eye_low_battery3,omitempty"`
	EyeLowBattery4     *bool   `protobuf:"varint,228,opt,name=eye_low_battery4,json=eyeLowBattery4,proto3,oneof" json:"eye_low_battery4,omitempty"`
	EyeBatteryVoltage1 *uint32 `protobuf:"varint,233,opt,name=eye_battery_voltage1,json=eyeBatteryVoltage1,proto3,oneof" json:"eye_battery_voltage1,omitempty"`
	EyeBatteryVoltage2 *uint32 `protobuf:"varint,230,opt,name=eye_battery_voltage2,json=eyeBatteryVoltage2,proto3,oneof" json:"eye_battery_voltage2,omitempty"`
	EyeBatteryVoltage3 *uint32 `protobuf:"varint,231,opt,name=eye_battery_voltage3,json=eyeBatteryVoltage3,proto3,oneof" json:"eye_battery_voltage3,omitempty"`
	EyeBatteryVoltage4 *uint32 `protobuf:"varint,232,opt,name=eye_battery_voltage4,json=eyeBatteryVoltage4,proto3,oneof" json:"eye_battery_voltage4,omitempty"`
	EyeRoll1           *int32  `protobuf:"varint,234,opt,name=eye_roll1,json=eyeRoll1,proto3,oneof" json:"eye_roll1,omitempty"`
	EyeRoll2           *int32  `protobuf:"varint,235,opt,name=eye_roll2,json=eyeRoll2,proto3,oneof" json:"eye_roll2,omitempty"`
	EyeRoll3           *int32  `protobuf:"varint,236,opt,name=eye_roll3,json=eyeRoll3,proto3,oneof" json:"eye_roll3,omitempty"`
	EyeRoll4           *int32  `protobuf:"varint,237,opt,name=eye_roll4,json=eyeRoll4,proto3,oneof" json:"eye_roll4,omitempty"`
	EyeMovementCount1  *uint32 `protobuf:"varint,238,opt,name=eye_movement_count1,json=eyeMovementCount1,proto3,oneof" json:"eye_movement_count1,omitempty"`
	EyeMovementCount2  *uint32 `protobuf:"varint,239,opt,name=eye_movement_count2,json=eyeMovementCount2,proto3,oneof" json:"eye_movement_count2,omitempty"`
	EyeMovementCount3  *uint32 `protobuf:"varint,240,opt,name=eye_movement_count3,json=eyeMovementCount3,proto3,oneof" json:"eye_movement_count3,omitempty"`
	EyeMovementCount4  *uint32 `protobuf:"varint,241,opt,name=eye_movement_count4,json=eyeMovementCount4,proto3,oneof" json:"eye_movement_count4,omitempty"`
	EyeMagnetCount1    *uint32 `protobuf:"varint,245,opt,name=eye_magnet_count1,json=eyeMagnetCount1,proto3,oneof" json:"eye_magnet_count1,omitempty"`
	EyeMagnetCount2    *uint32 `protobuf:"varint,242,opt,name=eye_magnet_count2,json=eyeMagnetCount2,proto3,oneof" json:"eye_magnet_count2,omitempty"`
	EyeMagnetCount3    *uint32 `protobuf:"varint,243,opt,name=eye_magnet_count3,json=eyeMagnetCount3,proto3,oneof" json:"eye_magnet_count3,omitempty"`
	EyeMagnetCount4    *uint32 `protobuf:"varint,244,opt,name=eye_magnet_count4,json=eyeMagnetCount4,proto3,oneof" json:"eye_magnet_count4,omitempty"`
	// Parameter ID: 985
	// Property Name: ISF Clogged Brake System Filter Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfCloggedBrakeSystemFilterIndicator *bool `protobuf:"varint,92,opt,name=isf_clogged_brake_system_filter_indicator,json=isfCloggedBrakeSystemFilterIndicator,proto3,oneof" json:"isf_clogged_brake_system_filter_indicator,omitempty"`
	// Parameter ID: 986
	// Property Name: ISF Low Washer Fluid Level Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowWasherFluidLevelIndicator *bool `protobuf:"varint,93,opt,name=isf_low_washer_fluid_level_indicator,json=isfLowWasherFluidLevelIndicator,proto3,oneof" json:"isf_low_washer_fluid_level_indicator,omitempty"`
	// Parameter ID: 987
	// Property Name: ISF Low AdBlue Level Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowAdblueLevelIndicator *bool `protobuf:"varint,94,opt,name=isf_low_adblue_level_indicator,json=isfLowAdblueLevelIndicator,proto3,oneof" json:"isf_low_adblue_level_indicator,omitempty"`
	// Parameter ID: 988
	// Property Name: ISF Low Trailer Tyre Pressure Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowTrailerTyrePressureIndicator *bool `protobuf:"varint,95,opt,name=isf_low_trailer_tyre_pressure_indicator,json=isfLowTrailerTyrePressureIndicator,proto3,oneof" json:"isf_low_trailer_tyre_pressure_indicator,omitempty"`
	// Parameter ID: 989
	// Property Name: ISF Wear Of Trailer Brake Lining Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfWearOfTrailerBrakeLiningIndicator *bool `protobuf:"varint,96,opt,name=isf_wear_of_trailer_brake_lining_indicator,json=isfWearOfTrailerBrakeLiningIndicator,proto3,oneof" json:"isf_wear_of_trailer_brake_lining_indicator,omitempty"`
	// Parameter ID: 990
	// Property Name: ISF High Trailer Brake Temperature Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfHighTrailerBrakeTemperatureIndicator *bool `protobuf:"varint,97,opt,name=isf_high_trailer_brake_temperature_indicator,json=isfHighTrailerBrakeTemperatureIndicator,proto3,oneof" json:"isf_high_trailer_brake_temperature_indicator,omitempty"`
	// Parameter ID: 991
	// Property Name: ISF Incorrect Trailer Pneumatic Supply Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfIncorrectTrailerPneumaticSupplyIndicator *bool `protobuf:"varint,98,opt,name=isf_incorrect_trailer_pneumatic_supply_indicator,json=isfIncorrectTrailerPneumaticSupplyIndicator,proto3,oneof" json:"isf_incorrect_trailer_pneumatic_supply_indicator,omitempty"`
	// Parameter ID: 992
	// Property Name: ISF Low CNG Level Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	IsfLowCngLevelIndicator *bool `protobuf:"varint,99,opt,name=isf_low_cng_level_indicator,json=isfLowCngLevelIndicator,proto3,oneof" json:"isf_low_cng_level_indicator,omitempty"`
	// Parameter ID: 993
	// Property Name: ASF Right Joystick Moved Right Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedRightActive *bool `protobuf:"varint,100,opt,name=asf_right_joystick_moved_right_active,json=asfRightJoystickMovedRightActive,proto3,oneof" json:"asf_right_joystick_moved_right_active,omitempty"`
	// Parameter ID: 994
	// Property Name: ASF Right Joystick Moved Left Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedLeftActive *bool `protobuf:"varint,101,opt,name=asf_right_joystick_moved_left_active,json=asfRightJoystickMovedLeftActive,proto3,oneof" json:"asf_right_joystick_moved_left_active,omitempty"`
	// Parameter ID: 995
	// Property Name: ASF Right Joystick Moved Forward Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedForwardActive *bool `protobuf:"varint,102,opt,name=asf_right_joystick_moved_forward_active,json=asfRightJoystickMovedForwardActive,proto3,oneof" json:"asf_right_joystick_moved_forward_active,omitempty"`
	// Parameter ID: 996
	// Property Name: ASF Right Joystick Moved Back Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfRightJoystickMovedBackActive *bool `protobuf:"varint,103,opt,name=asf_right_joystick_moved_back_active,json=asfRightJoystickMovedBackActive,proto3,oneof" json:"asf_right_joystick_moved_back_active,omitempty"`
	// Parameter ID: 997
	// Property Name: ASF Left Joystick Moved Right Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedRightActive *bool `protobuf:"varint,104,opt,name=asf_left_joystick_moved_right_active,json=asfLeftJoystickMovedRightActive,proto3,oneof" json:"asf_left_joystick_moved_right_active,omitempty"`
	// Parameter ID: 998
	// Property Name: ASF Left Joystick Moved Left Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedLeftActive *bool `protobuf:"varint,105,opt,name=asf_left_joystick_moved_left_active,json=asfLeftJoystickMovedLeftActive,proto3,oneof" json:"asf_left_joystick_moved_left_active,omitempty"`
	// Parameter ID: 999
	// Property Name: ASF Left Joystick Moved Forward Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedForwardActive *bool `protobuf:"varint,106,opt,name=asf_left_joystick_moved_forward_active,json=asfLeftJoystickMovedForwardActive,proto3,oneof" json:"asf_left_joystick_moved_forward_active,omitempty"`
	// Parameter ID: 1000
	// Property Name: ASF Left Joystick Moved Back Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfLeftJoystickMovedBackActive *bool `protobuf:"varint,107,opt,name=asf_left_joystick_moved_back_active,json=asfLeftJoystickMovedBackActive,proto3,oneof" json:"asf_left_joystick_moved_back_active,omitempty"`
	// Parameter ID: 1001
	// Property Name: ASF First Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFirstRearHydraulic *bool `protobuf:"varint,108,opt,name=asf_first_rear_hydraulic,json=asfFirstRearHydraulic,proto3,oneof" json:"asf_first_rear_hydraulic,omitempty"`
	// Parameter ID: 1002
	// Property Name: ASF Second Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSecondRearHydraulic *bool `protobuf:"varint,109,opt,name=asf_second_rear_hydraulic,json=asfSecondRearHydraulic,proto3,oneof" json:"asf_second_rear_hydraulic,omitempty"`
	// Parameter ID: 1003
	// Property Name: ASF Third Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfThirdRearHydraulic *bool `protobuf:"varint,110,opt,name=asf_third_rear_hydraulic,json=asfThirdRearHydraulic,proto3,oneof" json:"asf_third_rear_hydraulic,omitempty"`
	// Parameter ID: 1004
	// Property Name: ASF Fourth Rear hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFourthRearHydraulic *bool `protobuf:"varint,111,opt,name=asf_fourth_rear_hydraulic,json=asfFourthRearHydraulic,proto3,oneof" json:"asf_fourth_rear_hydraulic,omitempty"`
	// Parameter ID: 1005
	// Property Name: ASF First Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFirstFrontHydraulic *bool `protobuf:"varint,112,opt,name=asf_first_front_hydraulic,json=asfFirstFrontHydraulic,proto3,oneof" json:"asf_first_front_hydraulic,omitempty"`
	// Parameter ID: 1006
	// Property Name: ASF Second Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSecondFrontHydraulic *bool `protobuf:"varint,113,opt,name=asf_second_front_hydraulic,json=asfSecondFrontHydraulic,proto3,oneof" json:"asf_second_front_hydraulic,omitempty"`
	// Parameter ID: 1007
	// Property Name: ASF Third Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfThirdFrontHydraulic *bool `protobuf:"varint,114,opt,name=asf_third_front_hydraulic,json=asfThirdFrontHydraulic,proto3,oneof" json:"asf_third_front_hydraulic,omitempty"`
	// Parameter ID: 1008
	// Property Name: ASF Fourth Front hydraulic
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFourthFrontHydraulic *bool `protobuf:"varint,115,opt,name=asf_fourth_front_hydraulic,json=asfFourthFrontHydraulic,proto3,oneof" json:"asf_fourth_front_hydraulic,omitempty"`
	// Parameter ID: 1009
	// Property Name: ASF Front Three-point Hitch
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFrontThreePointHitch *bool `protobuf:"varint,116,opt,name=asf_front_three_point_hitch,json=asfFrontThreePointHitch,proto3,oneof" json:"asf_front_three_point_hitch,omitempty"`
	// Parameter ID: 1010
	// Property Name: ASF Rear Three-point Hitch
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfRearThreePointHitch *bool `protobuf:"varint,117,opt,name=asf_rear_three_point_hitch,json=asfRearThreePointHitch,proto3,oneof" json:"asf_rear_three_point_hitch,omitempty"`
	// Parameter ID: 1011
	// Property Name: ASF Front Power Take-off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFrontPowerTakeOff *bool `protobuf:"varint,118,opt,name=asf_front_power_take_off,json=asfFrontPowerTakeOff,proto3,oneof" json:"asf_front_power_take_off,omitempty"`
	// Parameter ID: 1012
	// Property Name: ASF Rear Power Take-off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfRearPowerTakeOff *bool `protobuf:"varint,119,opt,name=asf_rear_power_take_off,json=asfRearPowerTakeOff,proto3,oneof" json:"asf_rear_power_take_off,omitempty"`
	// Parameter ID: 1013
	// Property Name: ASF Mowing Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfMowingActive *bool `protobuf:"varint,120,opt,name=asf_mowing_active,json=asfMowingActive,proto3,oneof" json:"asf_mowing_active,omitempty"`
	// Parameter ID: 1014
	// Property Name: ASF Threshing Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Inactive, 1 - Active
	AsfThreshingActive *bool `protobuf:"varint,121,opt,name=asf_threshing_active,json=asfThreshingActive,proto3,oneof" json:"asf_threshing_active,omitempty"`
	// Parameter ID: 1015
	// Property Name: ASF Grain Release From Hopper
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfGrainReleaseFromHopper *bool `protobuf:"varint,122,opt,name=asf_grain_release_from_hopper,json=asfGrainReleaseFromHopper,proto3,oneof" json:"asf_grain_release_from_hopper,omitempty"`
	// Parameter ID: 1016
	// Property Name: ASF Grain Tank Is 100% Full
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainTankIs100Full *bool `protobuf:"varint,123,opt,name=asf_grain_tank_is100_full,json=asfGrainTankIs100Full,proto3,oneof" json:"asf_grain_tank_is100_full,omitempty"`
	// Parameter ID: 1017
	// Property Name: ASF Grain Tank Is 70% Full
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainTankIs70Full *bool `protobuf:"varint,124,opt,name=asf_grain_tank_is70_full,json=asfGrainTankIs70Full,proto3,oneof" json:"asf_grain_tank_is70_full,omitempty"`
	// Parameter ID: 1018
	// Property Name: ASF Grain Tank Is Opened
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Closed, 1 - Opened
	AsfGrainTankIsOpened *bool `protobuf:"varint,125,opt,name=asf_grain_tank_is_opened,json=asfGrainTankIsOpened,proto3,oneof" json:"asf_grain_tank_is_opened,omitempty"`
	// Parameter ID: 1019
	// Property Name: ASF Unloader Drive
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfUnloaderDrive *bool `protobuf:"varint,126,opt,name=asf_unloader_drive,json=asfUnloaderDrive,proto3,oneof" json:"asf_unloader_drive,omitempty"`
	// Parameter ID: 1020
	// Property Name: ASF Cleaning Fan Control Turned Off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfCleaningFanControlTurnedOff *bool `protobuf:"varint,127,opt,name=asf_cleaning_fan_control_turned_off,json=asfCleaningFanControlTurnedOff,proto3,oneof" json:"asf_cleaning_fan_control_turned_off,omitempty"`
	// Parameter ID: 1021
	// Property Name: ASF Threshing Drum Control Turned Off
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfThreshingDrumControlTurnedOff *bool `protobuf:"varint,128,opt,name=asf_threshing_drum_control_turned_off,json=asfThreshingDrumControlTurnedOff,proto3,oneof" json:"asf_threshing_drum_control_turned_off,omitempty"`
	// Parameter ID: 1022
	// Property Name: ASF Straw Walker Is Clogged
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfStrawWalkerIsClogged *bool `protobuf:"varint,129,opt,name=asf_straw_walker_is_clogged,json=asfStrawWalkerIsClogged,proto3,oneof" json:"asf_straw_walker_is_clogged,omitempty"`
	// Parameter ID: 1023
	// Property Name: ASF Excessive Clearance Under The Threshing Drum
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfExcessiveClearanceUnderTheThreshingDrum *bool `protobuf:"varint,130,opt,name=asf_excessive_clearance_under_the_threshing_drum,json=asfExcessiveClearanceUnderTheThreshingDrum,proto3,oneof" json:"asf_excessive_clearance_under_the_threshing_drum,omitempty"`
	// Parameter ID: 1024
	// Property Name: ASF Low Temperature Of Drive System Hydraulics Less Than 5 Grades
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades *bool `protobuf:"varint,131,opt,name=asf_low_temperature_of_drive_system_hydraulics_less_than5_grades,json=asfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades,proto3,oneof" json:"asf_low_temperature_of_drive_system_hydraulics_less_than5_grades,omitempty"`
	// Parameter ID: 1025
	// Property Name: ASF High Temperature Of Drive System Hydraulics Greater Than 86 Grades
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades *bool `protobuf:"varint,132,opt,name=asf_high_temperature_of_drive_system_hydraulics_greater_than86_grades,json=asfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades,proto3,oneof" json:"asf_high_temperature_of_drive_system_hydraulics_greater_than86_grades,omitempty"`
	// Parameter ID: 1026
	// Property Name: ASF Ear Auger Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfEarAugerSpeedBelowTheNorm *bool `protobuf:"varint,133,opt,name=asf_ear_auger_speed_below_the_norm,json=asfEarAugerSpeedBelowTheNorm,proto3,oneof" json:"asf_ear_auger_speed_below_the_norm,omitempty"`
	// Parameter ID: 1027
	// Property Name: ASF Grain Auger Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainAugerSpeedBelowTheNorm *bool `protobuf:"varint,134,opt,name=asf_grain_auger_speed_below_the_norm,json=asfGrainAugerSpeedBelowTheNorm,proto3,oneof" json:"asf_grain_auger_speed_below_the_norm,omitempty"`
	// Parameter ID: 1028
	// Property Name: ASF Straw Chooper Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfStrawChooperSpeedBelowTheNorm *bool `protobuf:"varint,135,opt,name=asf_straw_chooper_speed_below_the_norm,json=asfStrawChooperSpeedBelowTheNorm,proto3,oneof" json:"asf_straw_chooper_speed_below_the_norm,omitempty"`
	// Parameter ID: 1029
	// Property Name: ASF Straw Shaker Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfStrawShakerSpeedBelowTheNorm *bool `protobuf:"varint,136,opt,name=asf_straw_shaker_speed_below_the_norm,json=asfStrawShakerSpeedBelowTheNorm,proto3,oneof" json:"asf_straw_shaker_speed_below_the_norm,omitempty"`
	// Parameter ID: 1030
	// Property Name: ASF Feeder Speed Below The Norm
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfFeederSpeedBelowTheNorm *bool `protobuf:"varint,137,opt,name=asf_feeder_speed_below_the_norm,json=asfFeederSpeedBelowTheNorm,proto3,oneof" json:"asf_feeder_speed_below_the_norm,omitempty"`
	// Parameter ID: 1031
	// Property Name: ASF Straw Chopper Switched On
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfStrawChopperSwitchedOn *bool `protobuf:"varint,138,opt,name=asf_straw_chopper_switched_on,json=asfStrawChopperSwitchedOn,proto3,oneof" json:"asf_straw_chopper_switched_on,omitempty"`
	// Parameter ID: 1032
	// Property Name: ASF Corn Header Connected
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfCornHeaderConnected *bool `protobuf:"varint,139,opt,name=asf_corn_header_connected,json=asfCornHeaderConnected,proto3,oneof" json:"asf_corn_header_connected,omitempty"`
	// Parameter ID: 1033
	// Property Name: ASF Grain Header Connected
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfGrainHeaderConnected *bool `protobuf:"varint,140,opt,name=asf_grain_header_connected,json=asfGrainHeaderConnected,proto3,oneof" json:"asf_grain_header_connected,omitempty"`
	// Parameter ID: 1034
	// Property Name: ASF Feeder Reverse Switched On
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfFeederReverseSwitchedOn *bool `protobuf:"varint,141,opt,name=asf_feeder_reverse_switched_on,json=asfFeederReverseSwitchedOn,proto3,oneof" json:"asf_feeder_reverse_switched_on,omitempty"`
	// Parameter ID: 1035
	// Property Name: ASF The Pressure Filter Of The Hydraulic Pump Is Clogged
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	AsfThePressureFilterOfTheHydraulicPumpIsClogged *bool `protobuf:"varint,142,opt,name=asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged,json=asfThePressureFilterOfTheHydraulicPumpIsClogged,proto3,oneof" json:"asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged,omitempty"`
	// Parameter ID: 1087
	// Property Name: ASF Adapter Pressure Filter Sensor
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfAdapterPressureFilterSensor *bool `protobuf:"varint,143,opt,name=asf_adapter_pressure_filter_sensor,json=asfAdapterPressureFilterSensor,proto3,oneof" json:"asf_adapter_pressure_filter_sensor,omitempty"`
	// Parameter ID: 1088
	// Property Name: ASF Service 2 Required Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfService2RequiredIndicator *bool `protobuf:"varint,144,opt,name=asf_service2_required_indicator,json=asfService2RequiredIndicator,proto3,oneof" json:"asf_service2_required_indicator,omitempty"`
	// Parameter ID: 1089
	// Property Name: ASF Drain Filter Clogged Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfDrainFilterCloggedIndicator *bool `protobuf:"varint,145,opt,name=asf_drain_filter_clogged_indicator,json=asfDrainFilterCloggedIndicator,proto3,oneof" json:"asf_drain_filter_clogged_indicator,omitempty"`
	// Parameter ID: 1090
	// Property Name: ASF Section 1 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection1Spraying *bool `protobuf:"varint,146,opt,name=asf_section1_spraying,json=asfSection1Spraying,proto3,oneof" json:"asf_section1_spraying,omitempty"`
	// Parameter ID: 1091
	// Property Name: ASF Section 2 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection2Spraying *bool `protobuf:"varint,147,opt,name=asf_section2_spraying,json=asfSection2Spraying,proto3,oneof" json:"asf_section2_spraying,omitempty"`
	// Parameter ID: 1092
	// Property Name: ASF Section 3 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection3Spraying *bool `protobuf:"varint,148,opt,name=asf_section3_spraying,json=asfSection3Spraying,proto3,oneof" json:"asf_section3_spraying,omitempty"`
	// Parameter ID: 1093
	// Property Name: ASF Section 4 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection4Spraying *bool `protobuf:"varint,149,opt,name=asf_section4_spraying,json=asfSection4Spraying,proto3,oneof" json:"asf_section4_spraying,omitempty"`
	// Parameter ID: 1094
	// Property Name: ASF Section 5 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection5Spraying *bool `protobuf:"varint,150,opt,name=asf_section5_spraying,json=asfSection5Spraying,proto3,oneof" json:"asf_section5_spraying,omitempty"`
	// Parameter ID: 1095
	// Property Name: ASF Section 6 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection6Spraying *bool `protobuf:"varint,151,opt,name=asf_section6_spraying,json=asfSection6Spraying,proto3,oneof" json:"asf_section6_spraying,omitempty"`
	// Parameter ID: 1096
	// Property Name: ASF Section 7 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection7Spraying *bool `protobuf:"varint,152,opt,name=asf_section7_spraying,json=asfSection7Spraying,proto3,oneof" json:"asf_section7_spraying,omitempty"`
	// Parameter ID: 1097
	// Property Name: ASF Section 8 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection8Spraying *bool `protobuf:"varint,153,opt,name=asf_section8_spraying,json=asfSection8Spraying,proto3,oneof" json:"asf_section8_spraying,omitempty"`
	// Parameter ID: 1098
	// Property Name: ASF Section 9 Spraying
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	AsfSection9Spraying *bool `protobuf:"varint,154,opt,name=asf_section9_spraying,json=asfSection9Spraying,proto3,oneof" json:"asf_section9_spraying,omitempty"`
	// Parameter ID: 1036
	// Property Name: USF Spreading
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfSpreading *bool `protobuf:"varint,155,opt,name=usf_spreading,json=usfSpreading,proto3,oneof" json:"usf_spreading,omitempty"`
	// Parameter ID: 1037
	// Property Name: USF Pouring Chemicals
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfPouringChemicals *bool `protobuf:"varint,156,opt,name=usf_pouring_chemicals,json=usfPouringChemicals,proto3,oneof" json:"usf_pouring_chemicals,omitempty"`
	// Parameter ID: 1038
	// Property Name: USF Conveyor Belt
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfConveyorBelt *bool `protobuf:"varint,157,opt,name=usf_conveyor_belt,json=usfConveyorBelt,proto3,oneof" json:"usf_conveyor_belt,omitempty"`
	// Parameter ID: 1039
	// Property Name: USF Salt Spreader's Drive Wheel
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfSaltSpreadersDriveWheel *bool `protobuf:"varint,158,opt,name=usf_salt_spreaders_drive_wheel,json=usfSaltSpreadersDriveWheel,proto3,oneof" json:"usf_salt_spreaders_drive_wheel,omitempty"`
	// Parameter ID: 1040
	// Property Name: USF Brushes
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfBrushes *bool `protobuf:"varint,159,opt,name=usf_brushes,json=usfBrushes,proto3,oneof" json:"usf_brushes,omitempty"`
	// Parameter ID: 1041
	// Property Name: USF Vacuum Cleaner
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfVacuumCleaner *bool `protobuf:"varint,160,opt,name=usf_vacuum_cleaner,json=usfVacuumCleaner,proto3,oneof" json:"usf_vacuum_cleaner,omitempty"`
	// Parameter ID: 1042
	// Property Name: USF Water Supply
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfWaterSupply *bool `protobuf:"varint,161,opt,name=usf_water_supply,json=usfWaterSupply,proto3,oneof" json:"usf_water_supply,omitempty"`
	// Parameter ID: 1044
	// Property Name: USF Liquid pump
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfLiquidPump *bool `protobuf:"varint,163,opt,name=usf_liquid_pump,json=usfLiquidPump,proto3,oneof" json:"usf_liquid_pump,omitempty"`
	// Parameter ID: 1045
	// Property Name: USF Unloading From The Hopper
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfUnloadingFromTheHopper *bool `protobuf:"varint,164,opt,name=usf_unloading_from_the_hopper,json=usfUnloadingFromTheHopper,proto3,oneof" json:"usf_unloading_from_the_hopper,omitempty"`
	// Parameter ID: 1046
	// Property Name: USF Low Salt (Sand) Level In Container Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfLowSaltSandLevelInContainerIndicator *bool `protobuf:"varint,165,opt,name=usf_low_salt_sand_level_in_container_indicator,json=usfLowSaltSandLevelInContainerIndicator,proto3,oneof" json:"usf_low_salt_sand_level_in_container_indicator,omitempty"`
	// Parameter ID: 1047
	// Property Name: USF Low Water Level in Container Indicator
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfLowWaterLevelInContainerIndicator *bool `protobuf:"varint,166,opt,name=usf_low_water_level_in_container_indicator,json=usfLowWaterLevelInContainerIndicator,proto3,oneof" json:"usf_low_water_level_in_container_indicator,omitempty"`
	// Parameter ID: 1048
	// Property Name: USF Chemicals
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfChemicals *bool `protobuf:"varint,167,opt,name=usf_chemicals,json=usfChemicals,proto3,oneof" json:"usf_chemicals,omitempty"`
	// Parameter ID: 1049
	// Property Name: USF Compressor
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfCompressor *bool `protobuf:"varint,168,opt,name=usf_compressor,json=usfCompressor,proto3,oneof" json:"usf_compressor,omitempty"`
	// Parameter ID: 1050
	// Property Name: USF Water Valve Is Opened
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfWaterValveIsOpened *bool `protobuf:"varint,169,opt,name=usf_water_valve_is_opened,json=usfWaterValveIsOpened,proto3,oneof" json:"usf_water_valve_is_opened,omitempty"`
	// Parameter ID: 1051
	// Property Name: USF Cabin Moved Up Status Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfCabinMovedUpStatusActive *bool `protobuf:"varint,170,opt,name=usf_cabin_moved_up_status_active,json=usfCabinMovedUpStatusActive,proto3,oneof" json:"usf_cabin_moved_up_status_active,omitempty"`
	// Parameter ID: 1052
	// Property Name: USF Cabin Moved Down Status Active
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfCabinMovedDownStatusActive *bool `protobuf:"varint,171,opt,name=usf_cabin_moved_down_status_active,json=usfCabinMovedDownStatusActive,proto3,oneof" json:"usf_cabin_moved_down_status_active,omitempty"`
	// Parameter ID: 1099
	// Property Name: USF Hydraulics Work Not Permitted
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - Off, 1 - On
	UsfHydraulicsWorkNotPermitted *bool `protobuf:"varint,172,opt,name=usf_hydraulics_work_not_permitted,json=usfHydraulicsWorkNotPermitted,proto3,oneof" json:"usf_hydraulics_work_not_permitted,omitempty"`
	// Parameter ID: 1053
	// Property Name: CiSF Section 1 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection1PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,173,opt,name=cisf_section1_presence_of_fluid_in_the_downpipe,json=cisfSection1PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section1_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1054
	// Property Name: CiSF Section 1 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection1Filled *bool `protobuf:"varint,174,opt,name=cisf_section1_filled,json=cisfSection1Filled,proto3,oneof" json:"cisf_section1_filled,omitempty"`
	// Parameter ID: 1055
	// Property Name: CiSF Section 1 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection1Overfilled *bool `protobuf:"varint,175,opt,name=cisf_section1_overfilled,json=cisfSection1Overfilled,proto3,oneof" json:"cisf_section1_overfilled,omitempty"`
	// Parameter ID: 1056
	// Property Name: CiSF Section 2 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection2PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,176,opt,name=cisf_section2_presence_of_fluid_in_the_downpipe,json=cisfSection2PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section2_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1057
	// Property Name: CiSF Section 2 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection2Filled *bool `protobuf:"varint,177,opt,name=cisf_section2_filled,json=cisfSection2Filled,proto3,oneof" json:"cisf_section2_filled,omitempty"`
	// Parameter ID: 1058
	// Property Name: CiSF Section 2 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection2Overfilled *bool `protobuf:"varint,178,opt,name=cisf_section2_overfilled,json=cisfSection2Overfilled,proto3,oneof" json:"cisf_section2_overfilled,omitempty"`
	// Parameter ID: 1059
	// Property Name: CiSF Section 3 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection3PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,179,opt,name=cisf_section3_presence_of_fluid_in_the_downpipe,json=cisfSection3PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section3_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1060
	// Property Name: CiSF Section 3 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection3Filled *bool `protobuf:"varint,180,opt,name=cisf_section3_filled,json=cisfSection3Filled,proto3,oneof" json:"cisf_section3_filled,omitempty"`
	// Parameter ID: 1061
	// Property Name: CiSF Section 3 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection3Overfilled *bool `protobuf:"varint,181,opt,name=cisf_section3_overfilled,json=cisfSection3Overfilled,proto3,oneof" json:"cisf_section3_overfilled,omitempty"`
	// Parameter ID: 1062
	// Property Name: CiSF Section 4 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection4PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,182,opt,name=cisf_section4_presence_of_fluid_in_the_downpipe,json=cisfSection4PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section4_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1063
	// Property Name: CiSF Section 4 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection4Filled *bool `protobuf:"varint,183,opt,name=cisf_section4_filled,json=cisfSection4Filled,proto3,oneof" json:"cisf_section4_filled,omitempty"`
	// Parameter ID: 1064
	// Property Name: CiSF Section 4 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection4Overfilled *bool `protobuf:"varint,184,opt,name=cisf_section4_overfilled,json=cisfSection4Overfilled,proto3,oneof" json:"cisf_section4_overfilled,omitempty"`
	// Parameter ID: 1065
	// Property Name: CiSF Section 5 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection5PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,185,opt,name=cisf_section5_presence_of_fluid_in_the_downpipe,json=cisfSection5PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section5_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1066
	// Property Name: CiSF Section 5 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection5Filled *bool `protobuf:"varint,186,opt,name=cisf_section5_filled,json=cisfSection5Filled,proto3,oneof" json:"cisf_section5_filled,omitempty"`
	// Parameter ID: 1067
	// Property Name: CiSF Section 5 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection5Overfilled *bool `protobuf:"varint,187,opt,name=cisf_section5_overfilled,json=cisfSection5Overfilled,proto3,oneof" json:"cisf_section5_overfilled,omitempty"`
	// Parameter ID: 1068
	// Property Name: CiSF Section 6 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection6PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,188,opt,name=cisf_section6_presence_of_fluid_in_the_downpipe,json=cisfSection6PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section6_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1069
	// Property Name: CiSF Section 6 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection6Filled *bool `protobuf:"varint,189,opt,name=cisf_section6_filled,json=cisfSection6Filled,proto3,oneof" json:"cisf_section6_filled,omitempty"`
	// Parameter ID: 1070
	// Property Name: CiSF Section 6 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection6Overfilled *bool `protobuf:"varint,190,opt,name=cisf_section6_overfilled,json=cisfSection6Overfilled,proto3,oneof" json:"cisf_section6_overfilled,omitempty"`
	// Parameter ID: 1071
	// Property Name: CiSF Section 7 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection7PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,191,opt,name=cisf_section7_presence_of_fluid_in_the_downpipe,json=cisfSection7PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section7_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1072
	// Property Name: CiSF Section 7 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection7Filled *bool `protobuf:"varint,192,opt,name=cisf_section7_filled,json=cisfSection7Filled,proto3,oneof" json:"cisf_section7_filled,omitempty"`
	// Parameter ID: 1073
	// Property Name: CiSF Section 7 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection7Overfilled *bool `protobuf:"varint,193,opt,name=cisf_section7_overfilled,json=cisfSection7Overfilled,proto3,oneof" json:"cisf_section7_overfilled,omitempty"`
	// Parameter ID: 1074
	// Property Name: CiSF Section 8 Presence Of Fluid In The Downpipe
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No presence, 1 - Present
	CisfSection8PresenceOfFluidInTheDownpipe *bool `protobuf:"varint,194,opt,name=cisf_section8_presence_of_fluid_in_the_downpipe,json=cisfSection8PresenceOfFluidInTheDownpipe,proto3,oneof" json:"cisf_section8_presence_of_fluid_in_the_downpipe,omitempty"`
	// Parameter ID: 1075
	// Property Name: CiSF Section 8 Filled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection8Filled *bool `protobuf:"varint,195,opt,name=cisf_section8_filled,json=cisfSection8Filled,proto3,oneof" json:"cisf_section8_filled,omitempty"`
	// Parameter ID: 1076
	// Property Name: CiSF Section 8 Overfilled
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: 0 - No, 1 - Yes
	CisfSection8Overfilled *bool `protobuf:"varint,196,opt,name=cisf_section8_overfilled,json=cisfSection8Overfilled,proto3,oneof" json:"cisf_section8_overfilled,omitempty"`
	// Parameter ID: 400
	// Property Name: Distance to Next Service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: -
	// Values:
	DistanceToNextService *uint32 `protobuf:"varint,197,opt,name=distance_to_next_service,json=distanceToNextService,proto3,oneof" json:"distance_to_next_service,omitempty"`
	// Parameter ID: 450
	// Property Name: CNG Level Kg
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: 10
	// Units: Kg
	// Values: CNG Level Kg (appears only if CNG level percentage is not available)
	CngLevelKg *uint32 `protobuf:"varint,198,opt,name=cng_level_kg,json=cngLevelKg,proto3,oneof" json:"cng_level_kg,omitempty"`
	// Parameter ID: 859
	// Property Name: Distance from need of service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Service - distance elapsed since the occurrence of the need for servicing
	DistanceFromNeedOfService *uint32 `protobuf:"varint,199,opt,name=distance_from_need_of_service,json=distanceFromNeedOfService,proto3,oneof" json:"distance_from_need_of_service,omitempty"`
	// Parameter ID: 860
	// Property Name: Distance from last service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Service - distance from the last service
	DistanceFromLastService *uint32 `protobuf:"varint,200,opt,name=distance_from_last_service,json=distanceFromLastService,proto3,oneof" json:"distance_from_last_service,omitempty"`
	// Parameter ID: 861
	// Property Name: Time to next service
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time to next service
	TimeToNextService *uint32 `protobuf:"varint,201,opt,name=time_to_next_service,json=timeToNextService,proto3,oneof" json:"time_to_next_service,omitempty"`
	// Parameter ID: 862
	// Property Name: Time from need of service
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time exceeded since the occurrence of the need for servicing
	TimeFromNeedOfService *uint32 `protobuf:"varint,202,opt,name=time_from_need_of_service,json=timeFromNeedOfService,proto3,oneof" json:"time_from_need_of_service,omitempty"`
	// Parameter ID: 863
	// Property Name: Time from last serivce
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time elapsed since the last service
	TimeFromLastSerivce *uint32 `protobuf:"varint,203,opt,name=time_from_last_serivce,json=timeFromLastSerivce,proto3,oneof" json:"time_from_last_serivce,omitempty"`
	// Parameter ID: 864
	// Property Name: Distance to next oil service
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Service - distance to next oil service
	DistanceToNextOilService *uint32 `protobuf:"varint,204,opt,name=distance_to_next_oil_service,json=distanceToNextOilService,proto3,oneof" json:"distance_to_next_oil_service,omitempty"`
	// Parameter ID: 865
	// Property Name: Time to next oil service
	// Type: Unsigned
	// Bytes: 2
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: day
	// Values: Service - time to next oil service
	TimeToNextOilService *uint32 `protobuf:"varint,205,opt,name=time_to_next_oil_service,json=timeToNextOilService,proto3,oneof" json:"time_to_next_oil_service,omitempty"`
	// Parameter ID: 866
	// Property Name: LVCAN Vehicle Range
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 4294967295
	// Multiplier: -
	// Units: km
	// Values: Information about vehicle range
	LvcanVehicleRange *uint32 `protobuf:"varint,206,opt,name=lvcan_vehicle_range,json=lvcanVehicleRange,proto3,oneof" json:"lvcan_vehicle_range,omitempty"`
	// Parameter ID: 867
	// Property Name: LVCAN Total CNG counted
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 65535
	// Multiplier: -
	// Units: kg
	// Values: Information about Total CNG used in counted mode
	LvcanTotalCngCounted *uint32 `protobuf:"varint,207,opt,name=lvcan_total_cng_counted,json=lvcanTotalCngCounted,proto3,oneof" json:"lvcan_total_cng_counted,omitempty"`
	// Parameter ID: 1079
	// Property Name: Total Bale Count
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Total Bale Count
	TotalBaleCount *uint32 `protobuf:"varint,208,opt,name=total_bale_count,json=totalBaleCount,proto3,oneof" json:"total_bale_count,omitempty"`
	// Parameter ID: 1080
	// Property Name: Bale Count
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Bale Count
	BaleCount *uint32 `protobuf:"varint,209,opt,name=bale_count,json=baleCount,proto3,oneof" json:"bale_count,omitempty"`
	// Parameter ID: 1081
	// Property Name: Cut Bale Count
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Cut Bale Count
	CutBaleCount *uint32 `protobuf:"varint,210,opt,name=cut_bale_count,json=cutBaleCount,proto3,oneof" json:"cut_bale_count,omitempty"`
	// Parameter ID: 1082
	// Property Name: Bale Slices
	// Type: Unsigned
	// Bytes: 4
	// Min: 0
	// Max: 0xFFFFFFFF
	// Multiplier: -
	// Units: -
	// Values: Bale Slices
	BaleSlices *uint32 `protobuf:"varint,211,opt,name=bale_slices,json=baleSlices,proto3,oneof" json:"bale_slices,omitempty"`
	// Parameter ID: 1116
	// Property Name: LVCAN MaxRoadSpeed
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 255
	// Multiplier: -
	// Units: km/h
	// Values: Maximum speed from road signs
	LvcanMaxroadspeed *uint32 `protobuf:"varint,212,opt,name=lvcan_maxroadspeed,json=lvcanMaxroadspeed,proto3,oneof" json:"lvcan_maxroadspeed,omitempty"`
	// Parameter ID: 1117
	// Property Name: LVCAN ExceededRoadSpeed
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 255
	// Multiplier: -
	// Units: km/h
	// Values: Exceeded speed from road signs
	LvcanExceededroadspeed *uint32 `protobuf:"varint,213,opt,name=lvcan_exceededroadspeed,json=lvcanExceededroadspeed,proto3,oneof" json:"lvcan_exceededroadspeed,omitempty"`
	// Parameter ID: 1205
	// Property Name: LVCAN RSF SpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "Speed limit with value" is recognized/canceled
	LvcanRsfSpeedlimitsign *bool `protobuf:"varint,214,opt,name=lvcan_rsf_speedlimitsign,json=lvcanRsfSpeedlimitsign,proto3,oneof" json:"lvcan_rsf_speedlimitsign,omitempty"`
	// Parameter ID: 1206
	// Property Name: LVCAN RSF EndOfSpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "End of speed limit with value" is recognized/canceled
	LvcanRsfEndOfSpeedLimitsign *bool `protobuf:"varint,215,opt,name=lvcan_rsf_end_of_speed_limitsign,json=lvcanRsfEndOfSpeedLimitsign,proto3,oneof" json:"lvcan_rsf_end_of_speed_limitsign,omitempty"`
	// Parameter ID: 1207
	// Property Name: LVCAN RSF SpeedExceeded
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if speed is exceeded indicated by road sign "Speed limit with value"
	LvcanRsfSpeedExceeded *bool `protobuf:"varint,216,opt,name=lvcan_rsf_speed_exceeded,json=lvcanRsfSpeedExceeded,proto3,oneof" json:"lvcan_rsf_speed_exceeded,omitempty"`
	// Parameter ID: 1208
	// Property Name: LVCAN RSF TimeSpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "Conditional time-specific speed limit with value" is recognized/canceled
	LvcanRsfTimeSpeedLimitsign *bool `protobuf:"varint,217,opt,name=lvcan_rsf_time_speed_limitsign,json=lvcanRsfTimeSpeedLimitsign,proto3,oneof" json:"lvcan_rsf_time_speed_limitsign,omitempty"`
	// Parameter ID: 1209
	// Property Name: LVCAN RSF WthrSpeedLimitSign
	// Type: Unsigned
	// Bytes: 1
	// Min: 0
	// Max: 1
	// Multiplier: -
	// Units: -
	// Values: Information if road sign "Speed limit with value due to weather conditions" is recognized/cancelled
	LvcanRsfWthrSpeedLimitSign *bool             `protobuf:"varint,218,opt,name=lvcan_rsf_wthr_speed_limit_sign,json=lvcanRsfWthrSpeedLimitSign,proto3,oneof" json:"lvcan_rsf_wthr_speed_limit_sign,omitempty"`
	AxlCalibrationStatus       *uint32           `protobuf:"varint,246,opt,name=axl_calibration_status,json=axlCalibrationStatus,proto3,oneof" json:"axl_calibration_status,omitempty"`
	BleRfid1                   *uint64           `protobuf:"varint,247,opt,name=ble_rfid1,json=bleRfid1,proto3,oneof" json:"ble_rfid1,omitempty"`
	BleRfid2                   *uint64           `protobuf:"varint,248,opt,name=ble_rfid2,json=bleRfid2,proto3,oneof" json:"ble_rfid2,omitempty"`
	BleRfid3                   *uint64           `protobuf:"varint,249,opt,name=ble_rfid3,json=bleRfid3,proto3,oneof" json:"ble_rfid3,omitempty"`
	BleRfid4                   *uint64           `protobuf:"varint,250,opt,name=ble_rfid4,json=bleRfid4,proto3,oneof" json:"ble_rfid4,omitempty"`
	BleButton1State1           *bool             `protobuf:"varint,251,opt,name=ble_button1_state1,json=bleButton1State1,proto3,oneof" json:"ble_button1_state1,omitempty"`
	BleButton1State2           *bool             `protobuf:"varint,252,opt,name=ble_button1_state2,json=bleButton1State2,proto3,oneof" json:"ble_button1_state2,omitempty"`
	BleButton1State3           *bool             `protobuf:"varint,253,opt,name=ble_button1_state3,json=bleButton1State3,proto3,oneof" json:"ble_button1_state3,omitempty"`
	BleButton1State4           *bool             `protobuf:"varint,254,opt,name=ble_button1_state4,json=bleButton1State4,proto3,oneof" json:"ble_button1_state4,omitempty"`
	BleButton2State1           *bool             `protobuf:"varint,255,opt,name=ble_button2_state1,json=bleButton2State1,proto3,oneof" json:"ble_button2_state1,omitempty"`
	BleButton2State2           *bool             `protobuf:"varint,256,opt,name=ble_button2_state2,json=bleButton2State2,proto3,oneof" json:"ble_button2_state2,omitempty"`
	BleButton2State3           *bool             `protobuf:"varint,257,opt,name=ble_button2_state3,json=bleButton2State3,proto3,oneof" json:"ble_button2_state3,omitempty"`
	BleButton2State4           *bool             `protobuf:"varint,258,opt,name=ble_button2_state4,json=bleButton2State4,proto3,oneof" json:"ble_button2_state4,omitempty"`
	FrequencyDin1              *uint32           `protobuf:"varint,259,opt,name=frequency_din1,json=frequencyDin1,proto3,oneof" json:"frequency_din1,omitempty"`
	FrequencyDin2              *uint32           `protobuf:"varint,260,opt,name=frequency_din2,json=frequencyDin2,proto3,oneof" json:"frequency_din2,omitempty"`
	ConnectivityQuality        *uint32           `protobuf:"varint,261,opt,name=connectivity_quality,json=connectivityQuality,proto3,oneof" json:"connectivity_quality,omitempty"`
	GeoFence                   map[uint32]uint32 `protobuf:"bytes,262,rep,name=geo_fence,json=geoFence,proto3" json:"geo_fence,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Auto Geofence: 0 – target left zone, 1 – target entered zone
	AutoGeofence *bool `protobuf:"varint,263,opt,name=auto_geofence,json=autoGeofence,proto3,oneof" json:"auto_geofence,omitempty"`
	// Trip: 0 – trip stop, 1 – trip start, 2 – Business Status, 3 – Private Status, 4-9 – Custom Statuses
	Trip *uint32 `protobuf:"varint,264,opt,name=trip,proto3,oneof" json:"trip,omitempty"`
	// Over Speeding: Speed at over speeding start/end, Range: 0-255 km/h
	OverSpeeding *uint32 `protobuf:"varint,265,opt,name=over_speeding,json=overSpeeding,proto3,oneof" json:"over_speeding,omitempty"`
	// Crash trace data: HEX, Range: 0-1200 bytes
	CrashTraceData []byte `protobuf:"bytes,266,opt,name=crash_trace_data,json=crashTraceData,proto3,oneof" json:"crash_trace_data,omitempty"`
	// Blood Alcohol Content: First 14 bits are perlims * 1000, last 2 bits are mode (0: Passive, 1: Active, 2-3: Reserved)
	BloodAlcoholContent *uint32 `protobuf:"varint,267,opt,name=blood_alcohol_content,json=bloodAlcoholContent,proto3,oneof" json:"blood_alcohol_content,omitempty"`
	// Idling: 0 – moving, 1 – idling
	Idling *bool `protobuf:"varint,268,opt,name=idling,proto3,oneof" json:"idling,omitempty"`
	// Green Driving Type: 1 – harsh acceleration, 2 – harsh braking, 3 – harsh cornering
	GreenDrivingType *uint32 `protobuf:"varint,269,opt,name=green_driving_type,json=greenDrivingType,proto3,oneof" json:"green_driving_type,omitempty"`
	// Towing: 0 – steady, 1 – towing
	Towing *bool `protobuf:"varint,270,opt,name=towing,proto3,oneof" json:"towing,omitempty"`
	// Unplug: 0 – battery present, 1 – battery unplugged
	Unplug *bool `protobuf:"varint,271,opt,name=unplug,proto3,oneof" json:"unplug,omitempty"`
	// Crash Detection: 1 – real crash (calibrated), 2 – limited trace (not calibrated), 3 – limited trace (calibrated), 4 – full trace (not calibrated), 5 – full trace (calibrated), 6 – real crash (not calibrated)
	CrashDetection *uint32 `protobuf:"varint,272,opt,name=crash_detection,json=crashDetection,proto3,oneof" json:"crash_detection,omitempty"`
	// Immobilizer: 0 – iButton not connected, 1 – iButton connected (Immobilizer), 2 – iButton connected (Authorized Driving)
	Immobilizer *uint32 `protobuf:"varint,273,opt,name=immobilizer,proto3,oneof" json:"immobilizer,omitempty"`
	// Green Driving Value: For acceleration/braking: g*100 (e.g., 123 -> 1.23g); for cornering: rad/s*100 (GPS) or g*100 (Accelerometer)
	GreenDrivingValue *uint32 `protobuf:"varint,274,opt,name=green_driving_value,json=greenDrivingValue,proto3,oneof" json:"green_driving_value,omitempty"`
	// Jamming: 0 – jamming stop, 1 – jamming start
	Jamming *bool `protobuf:"varint,275,opt,name=jamming,proto3,oneof" json:"jamming,omitempty"`
	// ICCID2: Value of SIM ICCID, LSB
	Iccid2 *uint64 `protobuf:"varint,276,opt,name=iccid2,proto3,oneof" json:"iccid2,omitempty"`
	// Green Driving Event Duration: Duration of event, Range: 0-65535 ms
	GreenDrivingEventDuration *uint32 `protobuf:"varint,277,opt,name=green_driving_event_duration,json=greenDrivingEventDuration,proto3,oneof" json:"green_driving_event_duration,omitempty"`
	// Alarm: 0 – Reserved, 1 – Alarm event occurred
	Alarm *bool `protobuf:"varint,278,opt,name=alarm,proto3,oneof" json:"alarm,omitempty"`
	// Eco Maximum: Maximum accelerometer values in mg, 8 Bytes: 2B Zeros, 2B X, 2B Y, 2B Z
	EcoMaximum *uint64 `protobuf:"varint,279,opt,name=eco_maximum,json=ecoMaximum,proto3,oneof" json:"eco_maximum,omitempty"`
	// Eco Average: Average accelerometer values in mg, 8 Bytes: 2B Zeros, 2B X, 2B Y, 2B Z
	EcoAverage *uint64 `protobuf:"varint,280,opt,name=eco_average,json=ecoAverage,proto3,oneof" json:"eco_average,omitempty"`
	// Eco Duration: Duration of Eco driving event, Range: 0-65535 ms
	EcoDuration *uint32 `protobuf:"varint,281,opt,name=eco_duration,json=ecoDuration,proto3,oneof" json:"eco_duration,omitempty"`
	// Driving State: 1 – Ignition ON, 2 – Driving, 3 – Ignition OFF
	DrivingState *uint32 `protobuf:"varint,282,opt,name=driving_state,json=drivingState,proto3,oneof" json:"driving_state,omitempty"`
	// Driving Records: Number of records between Ignition ON and OFF, Range: 0-65535
	DrivingRecords *uint32 `protobuf:"varint,283,opt,name=driving_records,json=drivingRecords,proto3,oneof" json:"driving_records,omitempty"`
	// Crash Event Counter: Connects trace with specific crash record, Range: 0-255
	CrashEventCounter *uint32 `protobuf:"varint,284,opt,name=crash_event_counter,json=crashEventCounter,proto3,oneof" json:"crash_event_counter,omitempty"`
	// GNSS Jamming: 0 – GPS jamming ended/healthy, 1 – GPS jamming warning, 2 – GPS jamming critical
	GnssJamming *uint32 `protobuf:"varint,285,opt,name=gnss_jamming,json=gnssJamming,proto3,oneof" json:"gnss_jamming,omitempty"`
	// Private Mode: 0 – Private mode off, 1 – Private mode on
	PrivateMode *uint32 `protobuf:"varint,286,opt,name=private_mode,json=privateMode,proto3,oneof" json:"private_mode,omitempty"`
	// Ignition On Counter: Duration while Ignition is On, Range: 0-2147483647 s
	IgnitionOnCounter *uint32 `protobuf:"varint,287,opt,name=ignition_on_counter,json=ignitionOnCounter,proto3,oneof" json:"ignition_on_counter,omitempty"`
	// Motorcycle Fall Detection: Fall detection event
	MotorcycleFallDetection *uint32 `protobuf:"varint,288,opt,name=motorcycle_fall_detection,json=motorcycleFallDetection,proto3,oneof" json:"motorcycle_fall_detection,omitempty"`
	// VIN: Vehicle Identification Number, ASCII
	Vin *string `protobuf:"bytes,289,opt,name=vin,proto3,oneof" json:"vin,omitempty"`
	// Number of DTC: Number of Diagnostic Trouble Codes, Range: 0-255
	NumberOfDtc *uint32 `protobuf:"varint,290,opt,name=number_of_dtc,json=numberOfDtc,proto3,oneof" json:"number_of_dtc,omitempty"`
	// Engine Load: Calculated engine load, Range: 0-100 %
	EngineLoad *uint32 `protobuf:"varint,291,opt,name=engine_load,json=engineLoad,proto3,oneof" json:"engine_load,omitempty"`
	// Coolant Temperature: Engine coolant temperature, Range: -128-127 °C
	CoolantTemperature *int32 `protobuf:"varint,292,opt,name=coolant_temperature,json=coolantTemperature,proto3,oneof" json:"coolant_temperature,omitempty"`
	// Short Fuel Trim: Short term fuel trim 1, Range: -100-99 %
	ShortFuelTrim *int32 `protobuf:"varint,293,opt,name=short_fuel_trim,json=shortFuelTrim,proto3,oneof" json:"short_fuel_trim,omitempty"`
	// Fuel Pressure: Fuel pressure, Range: 0-765 kPa
	FuelPressure *uint32 `protobuf:"varint,294,opt,name=fuel_pressure,json=fuelPressure,proto3,oneof" json:"fuel_pressure,omitempty"`
	// Intake MAP: Intake manifold absolute pressure, Range: 0-255 kPa
	IntakeMap *uint32 `protobuf:"varint,295,opt,name=intake_map,json=intakeMap,proto3,oneof" json:"intake_map,omitempty"`
	// Engine RPM: Engine revolutions per minute, Range: 0-16384 rpm
	EngineRpm *uint32 `protobuf:"varint,296,opt,name=engine_rpm,json=engineRpm,proto3,oneof" json:"engine_rpm,omitempty"`
	// Vehicle Speed: Vehicle speed, Range: 0-255 km/h
	VehicleSpeed *uint32 `protobuf:"varint,297,opt,name=vehicle_speed,json=vehicleSpeed,proto3,oneof" json:"vehicle_speed,omitempty"`
	// Timing Advance: Timing advance, Range: -64-64 °
	TimingAdvance *int32 `protobuf:"varint,298,opt,name=timing_advance,json=timingAdvance,proto3,oneof" json:"timing_advance,omitempty"`
	// Intake Air Temperature: Intake air temperature, Range: -128-127 °C
	IntakeAirTemperature *int32 `protobuf:"varint,299,opt,name=intake_air_temperature,json=intakeAirTemperature,proto3,oneof" json:"intake_air_temperature,omitempty"`
	// MAF: Mass air flow rate, Range: 0-655.35 g/sec (multiplier: 0.01)
	Maf *uint32 `protobuf:"varint,300,opt,name=maf,proto3,oneof" json:"maf,omitempty"`
	// Throttle Position: Throttle position, Range: 0-100 %
	ThrottlePosition *uint32 `protobuf:"varint,301,opt,name=throttle_position,json=throttlePosition,proto3,oneof" json:"throttle_position,omitempty"`
	// Runtime Since Engine Start: Runtime since engine start, Range: 0-65535 s
	RuntimeSinceEngineStart *uint32 `protobuf:"varint,302,opt,name=runtime_since_engine_start,json=runtimeSinceEngineStart,proto3,oneof" json:"runtime_since_engine_start,omitempty"`
	// Distance Traveled MIL On: Distance traveled with MIL on, Range: 0-65535 km
	DistanceTraveledMilOn *uint32 `protobuf:"varint,303,opt,name=distance_traveled_mil_on,json=distanceTraveledMilOn,proto3,oneof" json:"distance_traveled_mil_on,omitempty"`
	// Relative Fuel Rail Pressure: Relative fuel rail pressure, Range: 0-517.8 kPa (multiplier: 0.1)
	RelativeFuelRailPressure *uint32 `protobuf:"varint,304,opt,name=relative_fuel_rail_pressure,json=relativeFuelRailPressure,proto3,oneof" json:"relative_fuel_rail_pressure,omitempty"`
	// Direct Fuel Rail Pressure: Direct fuel rail pressure, Range: 0-655350 kPa (multiplier: 10)
	DirectFuelRailPressure *uint32 `protobuf:"varint,305,opt,name=direct_fuel_rail_pressure,json=directFuelRailPressure,proto3,oneof" json:"direct_fuel_rail_pressure,omitempty"`
	// Commanded EGR: Commanded EGR, Range: 0-100 %
	CommandedEgr *uint32 `protobuf:"varint,306,opt,name=commanded_egr,json=commandedEgr,proto3,oneof" json:"commanded_egr,omitempty"`
	// EGR Error: EGR error, Range: -100-100 %
	EgrError *int32 `protobuf:"varint,307,opt,name=egr_error,json=egrError,proto3,oneof" json:"egr_error,omitempty"`
	// Fuel Level Percent: Fuel level, Range: 0-100 %
	FuelLevelPercent *uint32 `protobuf:"varint,308,opt,name=fuel_level_percent,json=fuelLevelPercent,proto3,oneof" json:"fuel_level_percent,omitempty"`
	// Distance Since Codes Clear: Distance traveled since codes cleared, Range: 0-65535 km
	DistanceSinceCodesClear *uint32 `protobuf:"varint,309,opt,name=distance_since_codes_clear,json=distanceSinceCodesClear,proto3,oneof" json:"distance_since_codes_clear,omitempty"`
	// Barometric Pressure: Barometric pressure, Range: 0-255 kPa
	BarometricPressure *uint32 `protobuf:"varint,310,opt,name=barometric_pressure,json=barometricPressure,proto3,oneof" json:"barometric_pressure,omitempty"`
	// Control Module Voltage: Control module voltage, Range: 0-65.535 V (multiplier: 0.001)
	ControlModuleVoltage *uint32 `protobuf:"varint,311,opt,name=control_module_voltage,json=controlModuleVoltage,proto3,oneof" json:"control_module_voltage,omitempty"`
	// Absolute Load Value: Absolute load value, Range: 0-25700 %
	AbsoluteLoadValue *uint32 `protobuf:"varint,312,opt,name=absolute_load_value,json=absoluteLoadValue,proto3,oneof" json:"absolute_load_value,omitempty"`
	// Fuel Type: 0-Not available, 1-Gasoline, ..., 23-Bifuel running diesel
	FuelType *uint32 `protobuf:"varint,313,opt,name=fuel_type,json=fuelType,proto3,oneof" json:"fuel_type,omitempty"`
	// Ambient Air Temperature: Ambient air temperature, Range: -128-127 °C
	AmbientAirTemperature *int32 `protobuf:"varint,314,opt,name=ambient_air_temperature,json=ambientAirTemperature,proto3,oneof" json:"ambient_air_temperature,omitempty"`
	// Time Run With MIL On: Time run with MIL on, Range: 0-65535 min
	TimeRunWithMilOn *uint32 `protobuf:"varint,315,opt,name=time_run_with_mil_on,json=timeRunWithMilOn,proto3,oneof" json:"time_run_with_mil_on,omitempty"`
	// Time Since Codes Cleared: Time since codes cleared, Range: 0-65535 min
	TimeSinceCodesCleared *uint32 `protobuf:"varint,316,opt,name=time_since_codes_cleared,json=timeSinceCodesCleared,proto3,oneof" json:"time_since_codes_cleared,omitempty"`
	// Absolute Fuel Rail Pressure: Absolute fuel rail pressure, Range: 0-655350 kPa (multiplier: 10)
	AbsoluteFuelRailPressure *uint32 `protobuf:"varint,317,opt,name=absolute_fuel_rail_pressure,json=absoluteFuelRailPressure,proto3,oneof" json:"absolute_fuel_rail_pressure,omitempty"`
	// Hybrid Battery Pack Life: Hybrid battery pack remaining life, Range: 0-100 %
	HybridBatteryPackLife *uint32 `protobuf:"varint,318,opt,name=hybrid_battery_pack_life,json=hybridBatteryPackLife,proto3,oneof" json:"hybrid_battery_pack_life,omitempty"`
	// Engine Oil Temperature: Engine oil temperature, Range: 0-215 °C
	EngineOilTemperature *uint32 `protobuf:"varint,319,opt,name=engine_oil_temperature,json=engineOilTemperature,proto3,oneof" json:"engine_oil_temperature,omitempty"`
	// Fuel Injection Timing: Fuel injection timing, Range: -210-302 ° (multiplier: 0.01)
	FuelInjectionTiming *int32 `protobuf:"varint,320,opt,name=fuel_injection_timing,json=fuelInjectionTiming,proto3,oneof" json:"fuel_injection_timing,omitempty"`
	// Throttle Position Group: Throttle position from PID group, Range: 0-100 %
	ThrottlePositionGroup *uint32 `protobuf:"varint,321,opt,name=throttle_position_group,json=throttlePositionGroup,proto3,oneof" json:"throttle_position_group,omitempty"`
	// Commanded Equivalence R: Fuel-Air Commanded Equivalence Ratio, Range: 0-2 (multiplier: 0.01)
	CommandedEquivalenceR *uint32 `protobuf:"varint,322,opt,name=commanded_equivalence_r,json=commandedEquivalenceR,proto3,oneof" json:"commanded_equivalence_r,omitempty"`
	// Intake MAP 2 Bytes: Intake manifold absolute pressure, Range: 0-2048 kPa
	IntakeMap2Bytes *uint32 `protobuf:"varint,323,opt,name=intake_map2_bytes,json=intakeMap2Bytes,proto3,oneof" json:"intake_map2_bytes,omitempty"`
	// Hybrid System Voltage: Hybrid vehicle system voltage, Range: 0-1024 V
	HybridSystemVoltage *uint32 `protobuf:"varint,324,opt,name=hybrid_system_voltage,json=hybridSystemVoltage,proto3,oneof" json:"hybrid_system_voltage,omitempty"`
	// Hybrid System Current: Hybrid vehicle system current, Range: -3277-3277 A
	HybridSystemCurrent *int32 `protobuf:"varint,325,opt,name=hybrid_system_current,json=hybridSystemCurrent,proto3,oneof" json:"hybrid_system_current,omitempty"`
	// Fault Codes: DTC Fault codes, ASCII, Range: 0-128 bytes
	FaultCodes *string `protobuf:"bytes,326,opt,name=fault_codes,json=faultCodes,proto3,oneof" json:"fault_codes,omitempty"`
	// Fuel Rate: Engine fuel rate, Range: 0-327.67 L/h (multiplier: 0.01)
	FuelRate *uint32 `protobuf:"varint,327,opt,name=fuel_rate,json=fuelRate,proto3,oneof" json:"fuel_rate,omitempty"`
	// OBD OEM Total Mileage: Total mileage, Range: 0-4294967295 km
	ObdOemTotalMileage *uint32 `protobuf:"varint,328,opt,name=obd_oem_total_mileage,json=obdOemTotalMileage,proto3,oneof" json:"obd_oem_total_mileage,omitempty"`
	// OBD OEM Fuel Level: Fuel level, Range: 0-429496729.5 l (multiplier: 0.1)
	ObdOemFuelLevel *uint32 `protobuf:"varint,329,opt,name=obd_oem_fuel_level,json=obdOemFuelLevel,proto3,oneof" json:"obd_oem_fuel_level,omitempty"`
	// OEM Distance Until Service: Distance till next service, Range: 0-4294967295 km
	OemDistanceUntilService *uint32 `protobuf:"varint,330,opt,name=oem_distance_until_service,json=oemDistanceUntilService,proto3,oneof" json:"oem_distance_until_service,omitempty"`
	// OEM Battery Charge State: 0 – Not charging, 1 – Charging
	OemBatteryChargeState *bool `protobuf:"varint,331,opt,name=oem_battery_charge_state,json=oemBatteryChargeState,proto3,oneof" json:"oem_battery_charge_state,omitempty"`
	// OEM Battery Charge Level: Battery charge level, Range: 0-100 %
	OemBatteryChargeLevel *uint32 `protobuf:"varint,332,opt,name=oem_battery_charge_level,json=oemBatteryChargeLevel,proto3,oneof" json:"oem_battery_charge_level,omitempty"`
	// OEM Remaining Distance: Remaining distance until fuel tank empty or battery depleted, Range: 0-65535 km
	OemRemainingDistance *uint32 `protobuf:"varint,333,opt,name=oem_remaining_distance,json=oemRemainingDistance,proto3,oneof" json:"oem_remaining_distance,omitempty"`
	// OEM Battery State Of Health: Battery state of health, Range: 0-65535 %
	OemBatteryStateOfHealth *uint32 `protobuf:"varint,334,opt,name=oem_battery_state_of_health,json=oemBatteryStateOfHealth,proto3,oneof" json:"oem_battery_state_of_health,omitempty"`
	// OEM Battery Temperature: Battery pack temperature, Range: -32768-32767 °C
	OemBatteryTemperature *int32 `protobuf:"varint,335,opt,name=oem_battery_temperature,json=oemBatteryTemperature,proto3,oneof" json:"oem_battery_temperature,omitempty"`
	// Beacon: List of Beacon IDs, HEX, Range: 0-1024 bytes
	Beacon []byte `protobuf:"bytes,336,opt,name=beacon,proto3,oneof" json:"beacon,omitempty"`
	// Advanced BLE Beacon Data: List of Beacon IDs and data, HEX, Range: 0-1024 bytes
	AdvancedBleBeaconData []byte `protobuf:"bytes,337,opt,name=advanced_ble_beacon_data,json=advancedBleBeaconData,proto3,oneof" json:"advanced_ble_beacon_data,omitempty"`
	// BLE Temperature #1: Degrees °C, Range: -40-125, Error codes: 32767 (not found), 32766 (failed parsing), 32765 (abnormal state)
	BleTemperature1 *int32 `protobuf:"varint,338,opt,name=ble_temperature1,json=bleTemperature1,proto3,oneof" json:"ble_temperature1,omitempty"`
	// BLE Temperature #2: Degrees °C, Range: -40-125, Error codes: 32767 (not found), 32766 (failed parsing), 32765 (abnormal state)
	BleTemperature2 *int32 `protobuf:"varint,339,opt,name=ble_temperature2,json=bleTemperature2,proto3,oneof" json:"ble_temperature2,omitempty"`
	// BLE Temperature #3: Degrees °C, Range: -40-125, Error codes: 32767 (not found), 32766 (failed parsing), 32765 (abnormal state)
	BleTemperature3 *int32 `protobuf:"varint,340,opt,name=ble_temperature3,json=bleTemperature3,proto3,oneof" json:"ble_temperature3,omitempty"`
	// BLE Temperature #4: Degrees °C, Range: -40-125, Error codes: 32767 (not found), 32766 (failed parsing), 32765 (abnormal state)
	BleTemperature4 *int32 `protobuf:"varint,341,opt,name=ble_temperature4,json=bleTemperature4,proto3,oneof" json:"ble_temperature4,omitempty"`
	// BLE Battery #1: Battery level of sensor #1, Range: 0-100 %
	BleBattery1 *uint32 `protobuf:"varint,342,opt,name=ble_battery1,json=bleBattery1,proto3,oneof" json:"ble_battery1,omitempty"`
	// BLE Battery #2: Battery level of sensor #2, Range: 0-100 %
	BleBattery2 *uint32 `protobuf:"varint,343,opt,name=ble_battery2,json=bleBattery2,proto3,oneof" json:"ble_battery2,omitempty"`
	// BLE Battery #3: Battery level of sensor #3, Range: 0-100 %
	BleBattery3 *uint32 `protobuf:"varint,344,opt,name=ble_battery3,json=bleBattery3,proto3,oneof" json:"ble_battery3,omitempty"`
	// BLE Battery #4: Battery level of sensor #4, Range: 0-100 %
	BleBattery4 *uint32 `protobuf:"varint,345,opt,name=ble_battery4,json=bleBattery4,proto3,oneof" json:"ble_battery4,omitempty"`
	// BLE Humidity #1: Humidity, Range: 0-100 %RH, Error codes: 65535 (not found), 65534 (failed parsing), 65533 (abnormal state)
	BleHumidity1 *uint32 `protobuf:"varint,346,opt,name=ble_humidity1,json=bleHumidity1,proto3,oneof" json:"ble_humidity1,omitempty"`
	// BLE Humidity #2: Humidity, Range: 0-100 %RH, Error codes: 65535 (not found), 65534 (failed parsing), 65533 (abnormal state)
	BleHumidity2 *uint32 `protobuf:"varint,347,opt,name=ble_humidity2,json=bleHumidity2,proto3,oneof" json:"ble_humidity2,omitempty"`
	// BLE Humidity #3: Humidity, Range: 0-100 %RH, Error codes: 65535 (not found), 65534 (failed parsing), 65533 (abnormal state)
	BleHumidity3 *uint32 `protobuf:"varint,348,opt,name=ble_humidity3,json=bleHumidity3,proto3,oneof" json:"ble_humidity3,omitempty"`
	// BLE Humidity #4: Humidity, Range: 0-100 %RH, Error codes: 65535 (not found), 65534 (failed parsing), 65533 (abnormal state)
	BleHumidity4 *uint32 `protobuf:"varint,349,opt,name=ble_humidity4,json=bleHumidity4,proto3,oneof" json:"ble_humidity4,omitempty"`
	// BLE Fuel Level #1: Fuel level, Range: 0-65535
	BleFuelLevel1 *uint32 `protobuf:"varint,350,opt,name=ble_fuel_level1,json=bleFuelLevel1,proto3,oneof" json:"ble_fuel_level1,omitempty"`
	// BLE Fuel Level #2: Fuel level, Range: 0-65535
	BleFuelLevel2 *uint32 `protobuf:"varint,351,opt,name=ble_fuel_level2,json=bleFuelLevel2,proto3,oneof" json:"ble_fuel_level2,omitempty"`
	// BLE Fuel Level #3: Fuel level, Range: 0-65535
	BleFuelLevel3 *uint32 `protobuf:"varint,352,opt,name=ble_fuel_level3,json=bleFuelLevel3,proto3,oneof" json:"ble_fuel_level3,omitempty"`
	// BLE Fuel Level #4: Fuel level, Range: 0-65535
	BleFuelLevel4 *uint32 `protobuf:"varint,353,opt,name=ble_fuel_level4,json=bleFuelLevel4,proto3,oneof" json:"ble_fuel_level4,omitempty"`
	// BLE Fuel Frequency #1: Frequency value of BLE fuel sensor #1, Range: 0-2147483647
	BleFuelFrequency1 *uint32 `protobuf:"varint,354,opt,name=ble_fuel_frequency1,json=bleFuelFrequency1,proto3,oneof" json:"ble_fuel_frequency1,omitempty"`
	// BLE Fuel Frequency #2: Frequency value of BLE fuel sensor #2, Range: 0-2147483647
	BleFuelFrequency2 *uint32 `protobuf:"varint,355,opt,name=ble_fuel_frequency2,json=bleFuelFrequency2,proto3,oneof" json:"ble_fuel_frequency2,omitempty"`
	// BLE Fuel Frequency #3: Frequency value of BLE fuel sensor #3, Range: 0-2147483647
	BleFuelFrequency3 *uint32 `protobuf:"varint,356,opt,name=ble_fuel_frequency3,json=bleFuelFrequency3,proto3,oneof" json:"ble_fuel_frequency3,omitempty"`
	// BLE Fuel Frequency #4: Frequency value of BLE fuel sensor #4, Range: 0-2147483647
	BleFuelFrequency4 *uint32 `protobuf:"varint,357,opt,name=ble_fuel_frequency4,json=bleFuelFrequency4,proto3,oneof" json:"ble_fuel_frequency4,omitempty"`
	// BLE Luminosity #1: Luminosity value, Range: 0-65535 lx
	BleLuminosity1 *uint32 `protobuf:"varint,358,opt,name=ble_luminosity1,json=bleLuminosity1,proto3,oneof" json:"ble_luminosity1,omitempty"`
	// BLE Luminosity #2: Luminosity value, Range: 0-65535 lx
	BleLuminosity2 *uint32 `protobuf:"varint,359,opt,name=ble_luminosity2,json=bleLuminosity2,proto3,oneof" json:"ble_luminosity2,omitempty"`
	// BLE Luminosity #3: Luminosity value, Range: 0-65535 lx
	BleLuminosity3 *uint32 `protobuf:"varint,360,opt,name=ble_luminosity3,json=bleLuminosity3,proto3,oneof" json:"ble_luminosity3,omitempty"`
	// BLE Luminosity #4: Luminosity value, Range: 0-65535 lx
	BleLuminosity4 *uint32 `protobuf:"varint,361,opt,name=ble_luminosity4,json=bleLuminosity4,proto3,oneof" json:"ble_luminosity4,omitempty"`
	// BLE 1 Custom #1: Custom IO element for BLE sensor, HEX
	Ble1Custom1 []byte `protobuf:"bytes,362,opt,name=ble1_custom1,json=ble1Custom1,proto3,oneof" json:"ble1_custom1,omitempty"`
	// BLE 1 Custom #2: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble1Custom2 *uint32 `protobuf:"varint,363,opt,name=ble1_custom2,json=ble1Custom2,proto3,oneof" json:"ble1_custom2,omitempty"`
	// BLE 1 Custom #3: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble1Custom3 *uint32 `protobuf:"varint,364,opt,name=ble1_custom3,json=ble1Custom3,proto3,oneof" json:"ble1_custom3,omitempty"`
	// BLE 1 Custom #4: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble1Custom4 *uint32 `protobuf:"varint,365,opt,name=ble1_custom4,json=ble1Custom4,proto3,oneof" json:"ble1_custom4,omitempty"`
	// BLE 1 Custom #5: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble1Custom5 *uint32 `protobuf:"varint,366,opt,name=ble1_custom5,json=ble1Custom5,proto3,oneof" json:"ble1_custom5,omitempty"`
	// BLE 2 Custom #1: Custom IO element for BLE sensor, HEX
	Ble2Custom1 []byte `protobuf:"bytes,367,opt,name=ble2_custom1,json=ble2Custom1,proto3,oneof" json:"ble2_custom1,omitempty"`
	// BLE 2 Custom #2: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble2Custom2 *uint32 `protobuf:"varint,368,opt,name=ble2_custom2,json=ble2Custom2,proto3,oneof" json:"ble2_custom2,omitempty"`
	// BLE 2 Custom #3: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble2Custom3 *uint32 `protobuf:"varint,369,opt,name=ble2_custom3,json=ble2Custom3,proto3,oneof" json:"ble2_custom3,omitempty"`
	// BLE 2 Custom #4: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble2Custom4 *uint32 `protobuf:"varint,370,opt,name=ble2_custom4,json=ble2Custom4,proto3,oneof" json:"ble2_custom4,omitempty"`
	// BLE 2 Custom #5: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble2Custom5 *uint32 `protobuf:"varint,371,opt,name=ble2_custom5,json=ble2Custom5,proto3,oneof" json:"ble2_custom5,omitempty"`
	// BLE 3 Custom #1: Custom IO element for BLE sensor, HEX
	Ble3Custom1 []byte `protobuf:"bytes,372,opt,name=ble3_custom1,json=ble3Custom1,proto3,oneof" json:"ble3_custom1,omitempty"`
	// BLE 3 Custom #2: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble3Custom2 *uint32 `protobuf:"varint,373,opt,name=ble3_custom2,json=ble3Custom2,proto3,oneof" json:"ble3_custom2,omitempty"`
	// BLE 3 Custom #3: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble3Custom3 *uint32 `protobuf:"varint,374,opt,name=ble3_custom3,json=ble3Custom3,proto3,oneof" json:"ble3_custom3,omitempty"`
	// BLE 3 Custom #4: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble3Custom4 *uint32 `protobuf:"varint,375,opt,name=ble3_custom4,json=ble3Custom4,proto3,oneof" json:"ble3_custom4,omitempty"`
	// BLE 3 Custom #5: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble3Custom5 *uint32 `protobuf:"varint,376,opt,name=ble3_custom5,json=ble3Custom5,proto3,oneof" json:"ble3_custom5,omitempty"`
	// BLE 4 Custom #1: Custom IO element for BLE sensor, HEX
	Ble4Custom1 []byte `protobuf:"bytes,377,opt,name=ble4_custom1,json=ble4Custom1,proto3,oneof" json:"ble4_custom1,omitempty"`
	// BLE 4 Custom #2: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble4Custom2 *uint32 `protobuf:"varint,378,opt,name=ble4_custom2,json=ble4Custom2,proto3,oneof" json:"ble4_custom2,omitempty"`
	// BLE 4 Custom #3: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble4Custom3 *uint32 `protobuf:"varint,379,opt,name=ble4_custom3,json=ble4Custom3,proto3,oneof" json:"ble4_custom3,omitempty"`
	// BLE 4 Custom #4: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble4Custom4 *uint32 `protobuf:"varint,380,opt,name=ble4_custom4,json=ble4Custom4,proto3,oneof" json:"ble4_custom4,omitempty"`
	// BLE 4 Custom #5: Custom IO element for BLE sensor, Range: 0-4294967295
	Ble4Custom5 *uint32 `protobuf:"varint,381,opt,name=ble4_custom5,json=ble4Custom5,proto3,oneof" json:"ble4_custom5,omitempty"`
	// Accelerator Pedal Position: Value in percentages, Range: 0-102 %
	AcceleratorPedalPosition *uint32 `protobuf:"varint,382,opt,name=accelerator_pedal_position,json=acceleratorPedalPosition,proto3,oneof" json:"accelerator_pedal_position,omitempty"`
	// Fuel Consumed: Value in liters, Range: 0-214748364.7 l (multiplier: 0.1)
	FuelConsumed *uint32 `protobuf:"varint,383,opt,name=fuel_consumed,json=fuelConsumed,proto3,oneof" json:"fuel_consumed,omitempty"`
	// Fuel Level Liters: Value in liters, Range: 0-6553.5 l (multiplier: 0.1)
	FuelLevelLiters *uint32 `protobuf:"varint,384,opt,name=fuel_level_liters,json=fuelLevelLiters,proto3,oneof" json:"fuel_level_liters,omitempty"`
	// Total Mileage: Value in meters, Range: 0-4294967295 m
	TotalMileage *uint32 `protobuf:"varint,385,opt,name=total_mileage,json=totalMileage,proto3,oneof" json:"total_mileage,omitempty"`
	// Program Number: Range: 0-99999
	ProgramNumber *uint32 `protobuf:"varint,386,opt,name=program_number,json=programNumber,proto3,oneof" json:"program_number,omitempty"`
	// Module ID 8B: Module ID, Range: 0-0xFFFFFFFFFFFFFFFF
	ModuleId8B *uint64 `protobuf:"varint,387,opt,name=module_id8b,json=moduleId8b,proto3,oneof" json:"module_id8b,omitempty"`
	// Module ID 17B: Module ID, HEX, Range: 0-0x7FFFFFFFFFFFFFFF
	ModuleId17B []byte `protobuf:"bytes,388,opt,name=module_id17b,json=moduleId17b,proto3,oneof" json:"module_id17b,omitempty"`
	// Engine Worktime: Engine work time, Range: 0-1677215 min
	EngineWorktime *uint32 `protobuf:"varint,389,opt,name=engine_worktime,json=engineWorktime,proto3,oneof" json:"engine_worktime,omitempty"`
	// Engine Worktime Counted: Total engine work time, Range: 0-1677215 min
	EngineWorktimeCounted *uint32 `protobuf:"varint,390,opt,name=engine_worktime_counted,json=engineWorktimeCounted,proto3,oneof" json:"engine_worktime_counted,omitempty"`
	// Total Mileage Counted: Total vehicle mileage, Range: 0-4294967295 m
	TotalMileageCounted *uint32 `protobuf:"varint,391,opt,name=total_mileage_counted,json=totalMileageCounted,proto3,oneof" json:"total_mileage_counted,omitempty"`
	// Fuel Consumed Counted: Total fuel consumed, Range: 0-214748364.7 l (multiplier: 0.1)
	FuelConsumedCounted *uint32 `protobuf:"varint,392,opt,name=fuel_consumed_counted,json=fuelConsumedCounted,proto3,oneof" json:"fuel_consumed_counted,omitempty"`
	// AdBlue Level Percent: AdBlue level, Range: 0-100 %
	AdblueLevelPercent *uint32 `protobuf:"varint,393,opt,name=adblue_level_percent,json=adblueLevelPercent,proto3,oneof" json:"adblue_level_percent,omitempty"`
	// AdBlue Level Liters: AdBlue level, Range: 0-6553.5 l (multiplier: 0.1)
	AdblueLevelLiters *uint32 `protobuf:"varint,394,opt,name=adblue_level_liters,json=adblueLevelLiters,proto3,oneof" json:"adblue_level_liters,omitempty"`
	// Axle 1 Load: Axle 1 load, Range: 0-32768 kg
	Axle1Load *uint32 `protobuf:"varint,395,opt,name=axle1_load,json=axle1Load,proto3,oneof" json:"axle1_load,omitempty"`
	// Axle 2 Load: Axle 2 load, Range: 0-32768 kg
	Axle2Load *uint32 `protobuf:"varint,396,opt,name=axle2_load,json=axle2Load,proto3,oneof" json:"axle2_load,omitempty"`
	// Axle 3 Load: Axle 3 load, Range: 0-32768 kg
	Axle3Load *uint32 `protobuf:"varint,397,opt,name=axle3_load,json=axle3Load,proto3,oneof" json:"axle3_load,omitempty"`
	// Axle 4 Load: Axle 4 load, Range: 0-32768 kg
	Axle4Load *uint32 `protobuf:"varint,398,opt,name=axle4_load,json=axle4Load,proto3,oneof" json:"axle4_load,omitempty"`
	// Axle 5 Load: Axle 5 load, Range: 0-32768 kg
	Axle5Load *uint32 `protobuf:"varint,399,opt,name=axle5_load,json=axle5Load,proto3,oneof" json:"axle5_load,omitempty"`
	// Control State Flags: Control state flags, Range: 0-4294967295
	ControlStateFlags *uint32 `protobuf:"varint,400,opt,name=control_state_flags,json=controlStateFlags,proto3,oneof" json:"control_state_flags,omitempty"`
	// Agricultural Machinery Flags: Agricultural machinery flags, Range: 0-0xFFFFFFFFFFFFFFFF
	AgriculturalMachineryFlags *uint64 `protobuf:"varint,401,opt,name=agricultural_machinery_flags,json=agriculturalMachineryFlags,proto3,oneof" json:"agricultural_machinery_flags,omitempty"`
	// Harvesting Time: Harvesting time, Range: 0-16777215 min
	HarvestingTime *uint32 `protobuf:"varint,402,opt,name=harvesting_time,json=harvestingTime,proto3,oneof" json:"harvesting_time,omitempty"`
	// Area of Harvest: Area of harvest, Range: 0-4294967295 m2
	AreaOfHarvest *uint32 `protobuf:"varint,403,opt,name=area_of_harvest,json=areaOfHarvest,proto3,oneof" json:"area_of_harvest,omitempty"`
	// Mowing Efficiency: Mowing efficiency, Range: 0-4294967295 m2/h
	MowingEfficiency *uint32 `protobuf:"varint,404,opt,name=mowing_efficiency,json=mowingEfficiency,proto3,oneof" json:"mowing_efficiency,omitempty"`
	// Grain Mown Volume: Mown volume, Range: 0-4294967295 kg
	GrainMownVolume *uint32 `protobuf:"varint,405,opt,name=grain_mown_volume,json=grainMownVolume,proto3,oneof" json:"grain_mown_volume,omitempty"`
	// Grain Moisture: Grain moisture, Range: 0-100 %
	GrainMoisture *uint32 `protobuf:"varint,406,opt,name=grain_moisture,json=grainMoisture,proto3,oneof" json:"grain_moisture,omitempty"`
	// Harvesting Drum RPM: Harvesting drum rpm, Range: 0-65535 rpm
	HarvestingDrumRpm *uint32 `protobuf:"varint,407,opt,name=harvesting_drum_rpm,json=harvestingDrumRpm,proto3,oneof" json:"harvesting_drum_rpm,omitempty"`
	// Gap Under Harvesting Drum: Gap under harvesting drum, Range: 0-255 mm
	GapUnderHarvestingDrum *uint32 `protobuf:"varint,408,opt,name=gap_under_harvesting_drum,json=gapUnderHarvestingDrum,proto3,oneof" json:"gap_under_harvesting_drum,omitempty"`
	// Security State Flags: Security state flags, Range: 0-0xFFFFFFFFFFFFFFFF
	SecurityStateFlags *uint64 `protobuf:"varint,409,opt,name=security_state_flags,json=securityStateFlags,proto3,oneof" json:"security_state_flags,omitempty"`
	// Tachograph Total Vehicle Distance: Tacho total vehicle distance, Range: 0-4294967295 m
	TachographTotalVehicleDistance *uint32 `protobuf:"varint,410,opt,name=tachograph_total_vehicle_distance,json=tachographTotalVehicleDistance,proto3,oneof" json:"tachograph_total_vehicle_distance,omitempty"`
	// Trip Distance: Trip distance, Range: 0-4294967295 m
	TripDistance *uint32 `protobuf:"varint,411,opt,name=trip_distance,json=tripDistance,proto3,oneof" json:"trip_distance,omitempty"`
	// Tachograph Vehicle Speed: Tacho vehicle speed, Range: 0-255 km/h
	TachographVehicleSpeed *uint32 `protobuf:"varint,412,opt,name=tachograph_vehicle_speed,json=tachographVehicleSpeed,proto3,oneof" json:"tachograph_vehicle_speed,omitempty"`
	// Tacho Driver Card Presence: Tacho driver card presence, Range: 0-3
	TachoDriverCardPresence *uint32 `protobuf:"varint,413,opt,name=tacho_driver_card_presence,json=tachoDriverCardPresence,proto3,oneof" json:"tacho_driver_card_presence,omitempty"`
	// Driver 1 States: Driver 1 states, Range: 0-255
	Driver1States *uint32 `protobuf:"varint,414,opt,name=driver1_states,json=driver1States,proto3,oneof" json:"driver1_states,omitempty"`
	// Driver 2 States: Driver 2 states, Range: 0-255
	Driver2States *uint32 `protobuf:"varint,415,opt,name=driver2_states,json=driver2States,proto3,oneof" json:"driver2_states,omitempty"`
	// Driver 1 Continuous Driving Time: Driver 1 continuous driving time, Range: 0-65535 min
	Driver1ContinuousDrivingTime *uint32 `protobuf:"varint,416,opt,name=driver1_continuous_driving_time,json=driver1ContinuousDrivingTime,proto3,oneof" json:"driver1_continuous_driving_time,omitempty"`
	// Driver 2 Continuous Driving Time: Driver 2 continuous driving time, Range: 0-65535 min
	Driver2ContinuousDrivingTime *uint32 `protobuf:"varint,417,opt,name=driver2_continuous_driving_time,json=driver2ContinuousDrivingTime,proto3,oneof" json:"driver2_continuous_driving_time,omitempty"`
	// Driver 1 Cumulative Time: Driver 1 cumulative time, Range: 0-65535 min
	Driver1CumulativeTime *uint32 `protobuf:"varint,418,opt,name=driver1_cumulative_time,json=driver1CumulativeTime,proto3,oneof" json:"driver1_cumulative_time,omitempty"`
	// Driver 2 Cumulative Time: Driver 2 cumulative time, Range: 0-65535 min
	Driver2CumulativeTime *uint32 `protobuf:"varint,419,opt,name=driver2_cumulative_time,json=driver2CumulativeTime,proto3,oneof" json:"driver2_cumulative_time,omitempty"`
	// Driver 1 Selected Activity Duration: Driver 1 duration of selected activity, Range: 0-65535 min
	Driver1SelectedActivityDuration *uint32 `protobuf:"varint,420,opt,name=driver1_selected_activity_duration,json=driver1SelectedActivityDuration,proto3,oneof" json:"driver1_selected_activity_duration,omitempty"`
	// Driver 2 Selected Activity Duration: Driver 2 duration of selected activity, Range: 0-65535 min
	Driver2SelectedActivityDuration *uint32 `protobuf:"varint,421,opt,name=driver2_selected_activity_duration,json=driver2SelectedActivityDuration,proto3,oneof" json:"driver2_selected_activity_duration,omitempty"`
	// Driver 1 Cumulative Driving Time: Driver 1 cumulative driving time, Range: 0-65535 min
	Driver1CumulativeDrivingTime *uint32 `protobuf:"varint,422,opt,name=driver1_cumulative_driving_time,json=driver1CumulativeDrivingTime,proto3,oneof" json:"driver1_cumulative_driving_time,omitempty"`
	// Driver 2 Cumulative Driving Time: Driver 2 cumulative driving time, Range: 0-65535 min
	Driver2CumulativeDrivingTime *uint32 `protobuf:"varint,423,opt,name=driver2_cumulative_driving_time,json=driver2CumulativeDrivingTime,proto3,oneof" json:"driver2_cumulative_driving_time,omitempty"`
	// Driver 1 ID High: Driver 1 ID high, Range: 0-0xFFFFFFFFFFFFFFFF
	Driver1IdHigh *uint64 `protobuf:"varint,424,opt,name=driver1_id_high,json=driver1IdHigh,proto3,oneof" json:"driver1_id_high,omitempty"`
	// Driver 1 ID Low: Driver 1 ID low, Range: 0-0xFFFFFFFFFFFFFFFF
	Driver1IdLow *uint64 `protobuf:"varint,425,opt,name=driver1_id_low,json=driver1IdLow,proto3,oneof" json:"driver1_id_low,omitempty"`
	// Driver 2 ID High: Driver 2 ID high, Range: 0-0xFFFFFFFFFFFFFFFF
	Driver2IdHigh *uint64 `protobuf:"varint,426,opt,name=driver2_id_high,json=driver2IdHigh,proto3,oneof" json:"driver2_id_high,omitempty"`
	// Driver 2 ID Low: Driver 2 ID low, Range: 0-0xFFFFFFFFFFFFFFFF
	Driver2IdLow *uint64 `protobuf:"varint,427,opt,name=driver2_id_low,json=driver2IdLow,proto3,oneof" json:"driver2_id_low,omitempty"`
	// Battery Temperature: Battery temperature, Range: -60-127 °C (multiplier: 0.1)
	BatteryTemperature *int32 `protobuf:"varint,428,opt,name=battery_temperature,json=batteryTemperature,proto3,oneof" json:"battery_temperature,omitempty"`
	// HV Battery Level: Battery level, Range: 0-100 %
	HvBatteryLevel *uint32 `protobuf:"varint,429,opt,name=hv_battery_level,json=hvBatteryLevel,proto3,oneof" json:"hv_battery_level,omitempty"`
	// DTC Faults: DTC faults count, Range: 0-255
	DtcFaults *uint32 `protobuf:"varint,430,opt,name=dtc_faults,json=dtcFaults,proto3,oneof" json:"dtc_faults,omitempty"`
	// Slope of Arm: Slope of arm, Range: -3276-3276 °
	SlopeOfArm *int32 `protobuf:"varint,431,opt,name=slope_of_arm,json=slopeOfArm,proto3,oneof" json:"slope_of_arm,omitempty"`
	// Rotation of Arm: Rotation of arm, Range: -180-180 °
	RotationOfArm *int32 `protobuf:"varint,432,opt,name=rotation_of_arm,json=rotationOfArm,proto3,oneof" json:"rotation_of_arm,omitempty"`
	// Eject of Arm: Eject of arm, Range: 0-6553 m
	EjectOfArm *uint32 `protobuf:"varint,433,opt,name=eject_of_arm,json=ejectOfArm,proto3,oneof" json:"eject_of_arm,omitempty"`
	// Horizontal Distance Arm Vehicle: Horizontal distance arm vehicle, Range: 0-6553 m
	HorizontalDistanceArmVehicle *uint32 `protobuf:"varint,434,opt,name=horizontal_distance_arm_vehicle,json=horizontalDistanceArmVehicle,proto3,oneof" json:"horizontal_distance_arm_vehicle,omitempty"`
	// Height Arm Above Ground: Height arm above ground, Range: 0-6553 m
	HeightArmAboveGround *uint32 `protobuf:"varint,435,opt,name=height_arm_above_ground,json=heightArmAboveGround,proto3,oneof" json:"height_arm_above_ground,omitempty"`
	// Drill RPM: Drill RPM, Range: 0-65535 rpm
	DrillRpm *uint32 `protobuf:"varint,436,opt,name=drill_rpm,json=drillRpm,proto3,oneof" json:"drill_rpm,omitempty"`
	// Amount Of Spread Salt Square Meter: Amount of spread salt, Range: 0-655 g/m2
	AmountOfSpreadSaltSquareMeter *uint32 `protobuf:"varint,437,opt,name=amount_of_spread_salt_square_meter,json=amountOfSpreadSaltSquareMeter,proto3,oneof" json:"amount_of_spread_salt_square_meter,omitempty"`
	// Amount Of Spread Fine Grained Salt: Amount of spread fine grained salt, Range: 0-1677722 T
	AmountOfSpreadFineGrainedSalt *uint32 `protobuf:"varint,439,opt,name=amount_of_spread_fine_grained_salt,json=amountOfSpreadFineGrainedSalt,proto3,oneof" json:"amount_of_spread_fine_grained_salt,omitempty"`
	// Amount Of Coarse Grained Salt: Amount of coarse grained salt, Range: 0-1677722 T
	AmountOfCoarseGrainedSalt *uint32 `protobuf:"varint,440,opt,name=amount_of_coarse_grained_salt,json=amountOfCoarseGrainedSalt,proto3,oneof" json:"amount_of_coarse_grained_salt,omitempty"`
	// Amount Of Spread DiMix: Amount of spread DiMix, Range: 0-1677722 T
	AmountOfSpreadDimix *uint32 `protobuf:"varint,441,opt,name=amount_of_spread_dimix,json=amountOfSpreadDimix,proto3,oneof" json:"amount_of_spread_dimix,omitempty"`
	// Amount Of Spread Coarse Grained Calcium: Amount of spread coarse grained calcium, Range: 0-1677722 m3
	AmountOfSpreadCoarseGrainedCalcium *uint32 `protobuf:"varint,442,opt,name=amount_of_spread_coarse_grained_calcium,json=amountOfSpreadCoarseGrainedCalcium,proto3,oneof" json:"amount_of_spread_coarse_grained_calcium,omitempty"`
	// Amount Of Spread Calcium Chloride: Amount of spread calcium chloride, Range: 0-1677722 m3
	AmountOfSpreadCalciumChloride *uint32 `protobuf:"varint,443,opt,name=amount_of_spread_calcium_chloride,json=amountOfSpreadCalciumChloride,proto3,oneof" json:"amount_of_spread_calcium_chloride,omitempty"`
	// Amount Of Spread Sodium Chloride: Amount of spread sodium chloride, Range: 0-1677722 m3
	AmountOfSpreadSodiumChloride *uint32 `protobuf:"varint,444,opt,name=amount_of_spread_sodium_chloride,json=amountOfSpreadSodiumChloride,proto3,oneof" json:"amount_of_spread_sodium_chloride,omitempty"`
	// Amount Of Spread Magnesium Chloride: Amount of spread magnesium chloride, Range: 0-1677722 m3
	AmountOfSpreadMagnesiumChloride *uint32 `protobuf:"varint,445,opt,name=amount_of_spread_magnesium_chloride,json=amountOfSpreadMagnesiumChloride,proto3,oneof" json:"amount_of_spread_magnesium_chloride,omitempty"`
	// Amount Of Spread Gravel: Amount of spread gravel, Range: 0-1677722 T
	AmountOfSpreadGravel *uint32 `protobuf:"varint,446,opt,name=amount_of_spread_gravel,json=amountOfSpreadGravel,proto3,oneof" json:"amount_of_spread_gravel,omitempty"`
	// Amount Of Spread Sand: Amount of spread sand, Range: 0-1677722 T
	AmountOfSpreadSand *uint32 `protobuf:"varint,447,opt,name=amount_of_spread_sand,json=amountOfSpreadSand,proto3,oneof" json:"amount_of_spread_sand,omitempty"`
	// Width Pouring Left: Width pouring left, Range: 0-655 m
	WidthPouringLeft *uint32 `protobuf:"varint,448,opt,name=width_pouring_left,json=widthPouringLeft,proto3,oneof" json:"width_pouring_left,omitempty"`
	// Width Pouring Right: Width pouring right, Range: 0-655 m
	WidthPouringRight *uint32 `protobuf:"varint,449,opt,name=width_pouring_right,json=widthPouringRight,proto3,oneof" json:"width_pouring_right,omitempty"`
	// Salt Spreader Working Hours: Salt spreader working hours, Range: 0-167722 h
	SaltSpreaderWorkingHours *uint32 `protobuf:"varint,450,opt,name=salt_spreader_working_hours,json=saltSpreaderWorkingHours,proto3,oneof" json:"salt_spreader_working_hours,omitempty"`
	// Distance During Salting: Distance during salting, Range: 0-167722 km
	DistanceDuringSalting *uint32 `protobuf:"varint,451,opt,name=distance_during_salting,json=distanceDuringSalting,proto3,oneof" json:"distance_during_salting,omitempty"`
	// Load Weight: Load weight, Range: 0-16772215 kg
	LoadWeight *uint32 `protobuf:"varint,452,opt,name=load_weight,json=loadWeight,proto3,oneof" json:"load_weight,omitempty"`
	// Retarder Load: Retarder load, Range: 0-130 %
	RetarderLoad *uint32 `protobuf:"varint,453,opt,name=retarder_load,json=retarderLoad,proto3,oneof" json:"retarder_load,omitempty"`
	// Cruise Time: Cruise time, Range: 0-16772215 min
	CruiseTime *uint32 `protobuf:"varint,454,opt,name=cruise_time,json=cruiseTime,proto3,oneof" json:"cruise_time,omitempty"`
	// CNG Status: CNG status, 0-1
	CngStatus *bool `protobuf:"varint,455,opt,name=cng_status,json=cngStatus,proto3,oneof" json:"cng_status,omitempty"`
	// CNG Used: CNG used, Range: 0-16772215 kg
	CngUsed *uint32 `protobuf:"varint,456,opt,name=cng_used,json=cngUsed,proto3,oneof" json:"cng_used,omitempty"`
	// CNG Level Percent: CNG level, Range: 0-100 %
	CngLevelPercent *uint32 `protobuf:"varint,457,opt,name=cng_level_percent,json=cngLevelPercent,proto3,oneof" json:"cng_level_percent,omitempty"`
	// Oil Level: Engine oil level indicator status, 0-1
	OilLevel *bool `protobuf:"varint,458,opt,name=oil_level,json=oilLevel,proto3,oneof" json:"oil_level,omitempty"`
	// Vehicles Range On Battery: Vehicle range on battery, Range: 0-16777215 m
	VehiclesRangeOnBattery *uint32 `protobuf:"varint,459,opt,name=vehicles_range_on_battery,json=vehiclesRangeOnBattery,proto3,oneof" json:"vehicles_range_on_battery,omitempty"`
	// Vehicles Range On Additional Fuel: Vehicle range on additional fuel, Range: 0-16777215 m
	VehiclesRangeOnAdditionalFuel *uint32 `protobuf:"varint,460,opt,name=vehicles_range_on_additional_fuel,json=vehiclesRangeOnAdditionalFuel,proto3,oneof" json:"vehicles_range_on_additional_fuel,omitempty"`
	// Security State Flags P4: Security state flags protocol 4, HEX
	SecurityStateFlagsP4 []byte `protobuf:"bytes,461,opt,name=security_state_flags_p4,json=securityStateFlagsP4,proto3,oneof" json:"security_state_flags_p4,omitempty"`
	// Control State Flags P4: Control state flags protocol 4, HEX
	ControlStateFlagsP4 []byte `protobuf:"bytes,462,opt,name=control_state_flags_p4,json=controlStateFlagsP4,proto3,oneof" json:"control_state_flags_p4,omitempty"`
	// Indicator State Flags P4: Indicator state flags protocol 4, HEX
	IndicatorStateFlagsP4 []byte `protobuf:"bytes,463,opt,name=indicator_state_flags_p4,json=indicatorStateFlagsP4,proto3,oneof" json:"indicator_state_flags_p4,omitempty"`
	// Agricultural State Flags P4: Agricultural state flags protocol 4, HEX
	AgriculturalStateFlagsP4                    []byte  `protobuf:"bytes,464,opt,name=agricultural_state_flags_p4,json=agriculturalStateFlagsP4,proto3,oneof" json:"agricultural_state_flags_p4,omitempty"`
	DoorStatus                                  *uint32 `protobuf:"varint,465,opt,name=door_status,json=doorStatus,proto3,oneof" json:"door_status,omitempty"`
	EngineTemperature                           *int32  `protobuf:"varint,467,opt,name=engine_temperature,json=engineTemperature,proto3,oneof" json:"engine_temperature,omitempty"`
	UtilityStateFlagsP4                         *uint64 `protobuf:"varint,468,opt,name=utility_state_flags_p4,json=utilityStateFlagsP4,proto3,oneof" json:"utility_state_flags_p4,omitempty"`
	CisternStateFlagsP4                         *uint64 `protobuf:"varint,469,opt,name=cistern_state_flags_p4,json=cisternStateFlagsP4,proto3,oneof" json:"cistern_state_flags_p4,omitempty"`
	LngUsed                                     *uint32 `protobuf:"varint,470,opt,name=lng_used,json=lngUsed,proto3,oneof" json:"lng_used,omitempty"`
	LngUsedCounted                              *uint32 `protobuf:"varint,471,opt,name=lng_used_counted,json=lngUsedCounted,proto3,oneof" json:"lng_used_counted,omitempty"`
	LngLevelPercent                             *uint32 `protobuf:"varint,472,opt,name=lng_level_percent,json=lngLevelPercent,proto3,oneof" json:"lng_level_percent,omitempty"`
	LngLevelKg                                  *uint32 `protobuf:"varint,473,opt,name=lng_level_kg,json=lngLevelKg,proto3,oneof" json:"lng_level_kg,omitempty"`
	TotalLpgUsed                                *uint32 `protobuf:"varint,474,opt,name=total_lpg_used,json=totalLpgUsed,proto3,oneof" json:"total_lpg_used,omitempty"`
	TotalLpgUsedCounted                         *uint32 `protobuf:"varint,475,opt,name=total_lpg_used_counted,json=totalLpgUsedCounted,proto3,oneof" json:"total_lpg_used_counted,omitempty"`
	LpgLevelProc                                *uint32 `protobuf:"varint,476,opt,name=lpg_level_proc,json=lpgLevelProc,proto3,oneof" json:"lpg_level_proc,omitempty"`
	LpgLevelLiters                              *uint32 `protobuf:"varint,477,opt,name=lpg_level_liters,json=lpgLevelLiters,proto3,oneof" json:"lpg_level_liters,omitempty"`
	SsfIgnition                                 *bool   `protobuf:"varint,478,opt,name=ssf_ignition,json=ssfIgnition,proto3,oneof" json:"ssf_ignition,omitempty"`
	SsfKeyInIgnitionLock                        *bool   `protobuf:"varint,479,opt,name=ssf_key_in_ignition_lock,json=ssfKeyInIgnitionLock,proto3,oneof" json:"ssf_key_in_ignition_lock,omitempty"`
	SsfWebasto                                  *bool   `protobuf:"varint,480,opt,name=ssf_webasto,json=ssfWebasto,proto3,oneof" json:"ssf_webasto,omitempty"`
	SsfEngineWorking                            *bool   `protobuf:"varint,481,opt,name=ssf_engine_working,json=ssfEngineWorking,proto3,oneof" json:"ssf_engine_working,omitempty"`
	SsfStandaloneEngine                         *bool   `protobuf:"varint,482,opt,name=ssf_standalone_engine,json=ssfStandaloneEngine,proto3,oneof" json:"ssf_standalone_engine,omitempty"`
	SsfReadyToDrive                             *bool   `protobuf:"varint,483,opt,name=ssf_ready_to_drive,json=ssfReadyToDrive,proto3,oneof" json:"ssf_ready_to_drive,omitempty"`
	SsfEngineWorkingOnCng                       *bool   `protobuf:"varint,484,opt,name=ssf_engine_working_on_cng,json=ssfEngineWorkingOnCng,proto3,oneof" json:"ssf_engine_working_on_cng,omitempty"`
	SsfWorkMode                                 *bool   `protobuf:"varint,485,opt,name=ssf_work_mode,json=ssfWorkMode,proto3,oneof" json:"ssf_work_mode,omitempty"`
	SsfOperator                                 *bool   `protobuf:"varint,486,opt,name=ssf_operator,json=ssfOperator,proto3,oneof" json:"ssf_operator,omitempty"`
	SsfInterlock                                *bool   `protobuf:"varint,487,opt,name=ssf_interlock,json=ssfInterlock,proto3,oneof" json:"ssf_interlock,omitempty"`
	SsfEngineLockActive                         *bool   `protobuf:"varint,488,opt,name=ssf_engine_lock_active,json=ssfEngineLockActive,proto3,oneof" json:"ssf_engine_lock_active,omitempty"`
	SsfRequestToLockEngine                      *bool   `protobuf:"varint,489,opt,name=ssf_request_to_lock_engine,json=ssfRequestToLockEngine,proto3,oneof" json:"ssf_request_to_lock_engine,omitempty"`
	SsfHandbrakeIsActive                        *bool   `protobuf:"varint,490,opt,name=ssf_handbrake_is_active,json=ssfHandbrakeIsActive,proto3,oneof" json:"ssf_handbrake_is_active,omitempty"`
	SsfFootbrakeIsActive                        *bool   `protobuf:"varint,491,opt,name=ssf_footbrake_is_active,json=ssfFootbrakeIsActive,proto3,oneof" json:"ssf_footbrake_is_active,omitempty"`
	SsfClutchPushed                             *bool   `protobuf:"varint,492,opt,name=ssf_clutch_pushed,json=ssfClutchPushed,proto3,oneof" json:"ssf_clutch_pushed,omitempty"`
	SsfHazardWarningLights                      *bool   `protobuf:"varint,493,opt,name=ssf_hazard_warning_lights,json=ssfHazardWarningLights,proto3,oneof" json:"ssf_hazard_warning_lights,omitempty"`
	SsfFrontLeftDoorOpen                        *bool   `protobuf:"varint,494,opt,name=ssf_front_left_door_open,json=ssfFrontLeftDoorOpen,proto3,oneof" json:"ssf_front_left_door_open,omitempty"`
	SsfFrontRightDoorOpen                       *bool   `protobuf:"varint,495,opt,name=ssf_front_right_door_open,json=ssfFrontRightDoorOpen,proto3,oneof" json:"ssf_front_right_door_open,omitempty"`
	SsfRearLeftDoorOpen                         *bool   `protobuf:"varint,496,opt,name=ssf_rear_left_door_open,json=ssfRearLeftDoorOpen,proto3,oneof" json:"ssf_rear_left_door_open,omitempty"`
	SsfRearRightDoorOpen                        *bool   `protobuf:"varint,497,opt,name=ssf_rear_right_door_open,json=ssfRearRightDoorOpen,proto3,oneof" json:"ssf_rear_right_door_open,omitempty"`
	SsfTrunkDoorOpen                            *bool   `protobuf:"varint,498,opt,name=ssf_trunk_door_open,json=ssfTrunkDoorOpen,proto3,oneof" json:"ssf_trunk_door_open,omitempty"`
	SsfEngineCoverOpen                          *bool   `protobuf:"varint,499,opt,name=ssf_engine_cover_open,json=ssfEngineCoverOpen,proto3,oneof" json:"ssf_engine_cover_open,omitempty"`
	SsfRoofOpen                                 *bool   `protobuf:"varint,500,opt,name=ssf_roof_open,json=ssfRoofOpen,proto3,oneof" json:"ssf_roof_open,omitempty"`
	SsfChargingWirePlugged                      *bool   `protobuf:"varint,501,opt,name=ssf_charging_wire_plugged,json=ssfChargingWirePlugged,proto3,oneof" json:"ssf_charging_wire_plugged,omitempty"`
	SsfBatteryCharging                          *bool   `protobuf:"varint,502,opt,name=ssf_battery_charging,json=ssfBatteryCharging,proto3,oneof" json:"ssf_battery_charging,omitempty"`
	SsfElectricEngineState                      *bool   `protobuf:"varint,503,opt,name=ssf_electric_engine_state,json=ssfElectricEngineState,proto3,oneof" json:"ssf_electric_engine_state,omitempty"`
	SsfCarClosedFactoryRemote                   *bool   `protobuf:"varint,504,opt,name=ssf_car_closed_factory_remote,json=ssfCarClosedFactoryRemote,proto3,oneof" json:"ssf_car_closed_factory_remote,omitempty"`
	SsfCarIsClosed                              *bool   `protobuf:"varint,505,opt,name=ssf_car_is_closed,json=ssfCarIsClosed,proto3,oneof" json:"ssf_car_is_closed,omitempty"`
	SsfFactoryAlarmActuated                     *bool   `protobuf:"varint,506,opt,name=ssf_factory_alarm_actuated,json=ssfFactoryAlarmActuated,proto3,oneof" json:"ssf_factory_alarm_actuated,omitempty"`
	SsfFactoryAlarmEmulated                     *bool   `protobuf:"varint,507,opt,name=ssf_factory_alarm_emulated,json=ssfFactoryAlarmEmulated,proto3,oneof" json:"ssf_factory_alarm_emulated,omitempty"`
	SsfSignalCloseFactoryRemote                 *bool   `protobuf:"varint,508,opt,name=ssf_signal_close_factory_remote,json=ssfSignalCloseFactoryRemote,proto3,oneof" json:"ssf_signal_close_factory_remote,omitempty"`
	SsfSignalOpenFactoryRemote                  *bool   `protobuf:"varint,509,opt,name=ssf_signal_open_factory_remote,json=ssfSignalOpenFactoryRemote,proto3,oneof" json:"ssf_signal_open_factory_remote,omitempty"`
	SsfRearmingSignal                           *bool   `protobuf:"varint,510,opt,name=ssf_rearming_signal,json=ssfRearmingSignal,proto3,oneof" json:"ssf_rearming_signal,omitempty"`
	SsfTrunkDoorOpenedFactoryRemote             *bool   `protobuf:"varint,511,opt,name=ssf_trunk_door_opened_factory_remote,json=ssfTrunkDoorOpenedFactoryRemote,proto3,oneof" json:"ssf_trunk_door_opened_factory_remote,omitempty"`
	SsfCanModuleInSleep                         *bool   `protobuf:"varint,512,opt,name=ssf_can_module_in_sleep,json=ssfCanModuleInSleep,proto3,oneof" json:"ssf_can_module_in_sleep,omitempty"`
	SsfFactoryRemote3X                          *bool   `protobuf:"varint,513,opt,name=ssf_factory_remote3x,json=ssfFactoryRemote3x,proto3,oneof" json:"ssf_factory_remote3x,omitempty"`
	SsfFactoryArmed                             *bool   `protobuf:"varint,514,opt,name=ssf_factory_armed,json=ssfFactoryArmed,proto3,oneof" json:"ssf_factory_armed,omitempty"`
	SsfParkingGearActive                        *bool   `protobuf:"varint,515,opt,name=ssf_parking_gear_active,json=ssfParkingGearActive,proto3,oneof" json:"ssf_parking_gear_active,omitempty"`
	SsfReverseGearActive                        *bool   `protobuf:"varint,516,opt,name=ssf_reverse_gear_active,json=ssfReverseGearActive,proto3,oneof" json:"ssf_reverse_gear_active,omitempty"`
	SsfNeutralGearActive                        *bool   `protobuf:"varint,517,opt,name=ssf_neutral_gear_active,json=ssfNeutralGearActive,proto3,oneof" json:"ssf_neutral_gear_active,omitempty"`
	SsfDriveIsActive                            *bool   `protobuf:"varint,518,opt,name=ssf_drive_is_active,json=ssfDriveIsActive,proto3,oneof" json:"ssf_drive_is_active,omitempty"`
	SsfEngineWorkingOnDualFuel                  *bool   `protobuf:"varint,519,opt,name=ssf_engine_working_on_dual_fuel,json=ssfEngineWorkingOnDualFuel,proto3,oneof" json:"ssf_engine_working_on_dual_fuel,omitempty"`
	SsfEngineWorkingOnLpg                       *bool   `protobuf:"varint,520,opt,name=ssf_engine_working_on_lpg,json=ssfEngineWorkingOnLpg,proto3,oneof" json:"ssf_engine_working_on_lpg,omitempty"`
	CsfParkingLights                            *bool   `protobuf:"varint,521,opt,name=csf_parking_lights,json=csfParkingLights,proto3,oneof" json:"csf_parking_lights,omitempty"`
	CsfDippedHeadLights                         *bool   `protobuf:"varint,522,opt,name=csf_dipped_head_lights,json=csfDippedHeadLights,proto3,oneof" json:"csf_dipped_head_lights,omitempty"`
	CsfFullBeamHeadlights                       *bool   `protobuf:"varint,523,opt,name=csf_full_beam_headlights,json=csfFullBeamHeadlights,proto3,oneof" json:"csf_full_beam_headlights,omitempty"`
	CsfRearFogLights                            *bool   `protobuf:"varint,524,opt,name=csf_rear_fog_lights,json=csfRearFogLights,proto3,oneof" json:"csf_rear_fog_lights,omitempty"`
	CsfFrontFogLights                           *bool   `protobuf:"varint,525,opt,name=csf_front_fog_lights,json=csfFrontFogLights,proto3,oneof" json:"csf_front_fog_lights,omitempty"`
	CsfAdditionalFrontLights                    *bool   `protobuf:"varint,526,opt,name=csf_additional_front_lights,json=csfAdditionalFrontLights,proto3,oneof" json:"csf_additional_front_lights,omitempty"`
	CsfAdditionalRearLights                     *bool   `protobuf:"varint,527,opt,name=csf_additional_rear_lights,json=csfAdditionalRearLights,proto3,oneof" json:"csf_additional_rear_lights,omitempty"`
	CsfLightSignal                              *bool   `protobuf:"varint,528,opt,name=csf_light_signal,json=csfLightSignal,proto3,oneof" json:"csf_light_signal,omitempty"`
	CsfAirConditioning                          *bool   `protobuf:"varint,529,opt,name=csf_air_conditioning,json=csfAirConditioning,proto3,oneof" json:"csf_air_conditioning,omitempty"`
	CsfCruiseControl                            *bool   `protobuf:"varint,530,opt,name=csf_cruise_control,json=csfCruiseControl,proto3,oneof" json:"csf_cruise_control,omitempty"`
	CsfAutomaticRetarder                        *bool   `protobuf:"varint,531,opt,name=csf_automatic_retarder,json=csfAutomaticRetarder,proto3,oneof" json:"csf_automatic_retarder,omitempty"`
	CsfManualRetarder                           *bool   `protobuf:"varint,532,opt,name=csf_manual_retarder,json=csfManualRetarder,proto3,oneof" json:"csf_manual_retarder,omitempty"`
	CsfDriversSeatbeltFastened                  *bool   `protobuf:"varint,533,opt,name=csf_drivers_seatbelt_fastened,json=csfDriversSeatbeltFastened,proto3,oneof" json:"csf_drivers_seatbelt_fastened,omitempty"`
	CsfFrontDriversSeatbeltFastened             *bool   `protobuf:"varint,534,opt,name=csf_front_drivers_seatbelt_fastened,json=csfFrontDriversSeatbeltFastened,proto3,oneof" json:"csf_front_drivers_seatbelt_fastened,omitempty"`
	CsfLeftDriversSeatbeltFastened              *bool   `protobuf:"varint,535,opt,name=csf_left_drivers_seatbelt_fastened,json=csfLeftDriversSeatbeltFastened,proto3,oneof" json:"csf_left_drivers_seatbelt_fastened,omitempty"`
	CsfRightDriversSeatbeltFastened             *bool   `protobuf:"varint,536,opt,name=csf_right_drivers_seatbelt_fastened,json=csfRightDriversSeatbeltFastened,proto3,oneof" json:"csf_right_drivers_seatbelt_fastened,omitempty"`
	CsfCentreDriversSeatbeltFastened            *bool   `protobuf:"varint,537,opt,name=csf_centre_drivers_seatbelt_fastened,json=csfCentreDriversSeatbeltFastened,proto3,oneof" json:"csf_centre_drivers_seatbelt_fastened,omitempty"`
	CsfFrontPassengerPresent                    *bool   `protobuf:"varint,538,opt,name=csf_front_passenger_present,json=csfFrontPassengerPresent,proto3,oneof" json:"csf_front_passenger_present,omitempty"`
	CsfPto                                      *bool   `protobuf:"varint,539,opt,name=csf_pto,json=csfPto,proto3,oneof" json:"csf_pto,omitempty"`
	CsfFrontDifferentialLocked                  *bool   `protobuf:"varint,540,opt,name=csf_front_differential_locked,json=csfFrontDifferentialLocked,proto3,oneof" json:"csf_front_differential_locked,omitempty"`
	CsfRearDifferentialLocked                   *bool   `protobuf:"varint,541,opt,name=csf_rear_differential_locked,json=csfRearDifferentialLocked,proto3,oneof" json:"csf_rear_differential_locked,omitempty"`
	CsfCentralDifferential4HiLocked             *bool   `protobuf:"varint,542,opt,name=csf_central_differential4hi_locked,json=csfCentralDifferential4hiLocked,proto3,oneof" json:"csf_central_differential4hi_locked,omitempty"`
	CsfRearDifferential4LoLocked                *bool   `protobuf:"varint,543,opt,name=csf_rear_differential4lo_locked,json=csfRearDifferential4loLocked,proto3,oneof" json:"csf_rear_differential4lo_locked,omitempty"`
	CsfTrailerAxle1LiftActive                   *bool   `protobuf:"varint,544,opt,name=csf_trailer_axle1_lift_active,json=csfTrailerAxle1LiftActive,proto3,oneof" json:"csf_trailer_axle1_lift_active,omitempty"`
	CsfTrailerAxle2LiftActive                   *bool   `protobuf:"varint,545,opt,name=csf_trailer_axle2_lift_active,json=csfTrailerAxle2LiftActive,proto3,oneof" json:"csf_trailer_axle2_lift_active,omitempty"`
	CsfTrailerConnected                         *bool   `protobuf:"varint,546,opt,name=csf_trailer_connected,json=csfTrailerConnected,proto3,oneof" json:"csf_trailer_connected,omitempty"`
	CsfStartStopSystemInactive                  *bool   `protobuf:"varint,547,opt,name=csf_start_stop_system_inactive,json=csfStartStopSystemInactive,proto3,oneof" json:"csf_start_stop_system_inactive,omitempty"`
	IsfCheckEngineIndicator                     *bool   `protobuf:"varint,548,opt,name=isf_check_engine_indicator,json=isfCheckEngineIndicator,proto3,oneof" json:"isf_check_engine_indicator,omitempty"`
	IsfAbsIndicator                             *bool   `protobuf:"varint,549,opt,name=isf_abs_indicator,json=isfAbsIndicator,proto3,oneof" json:"isf_abs_indicator,omitempty"`
	IsfEspIndicator                             *bool   `protobuf:"varint,550,opt,name=isf_esp_indicator,json=isfEspIndicator,proto3,oneof" json:"isf_esp_indicator,omitempty"`
	IsfEspTurnedOff                             *bool   `protobuf:"varint,551,opt,name=isf_esp_turned_off,json=isfEspTurnedOff,proto3,oneof" json:"isf_esp_turned_off,omitempty"`
	IsfStopIndicator                            *bool   `protobuf:"varint,552,opt,name=isf_stop_indicator,json=isfStopIndicator,proto3,oneof" json:"isf_stop_indicator,omitempty"`
	IsfOilLevelIndicator                        *bool   `protobuf:"varint,553,opt,name=isf_oil_level_indicator,json=isfOilLevelIndicator,proto3,oneof" json:"isf_oil_level_indicator,omitempty"`
	IsfCoolantLiquidLevel                       *bool   `protobuf:"varint,554,opt,name=isf_coolant_liquid_level,json=isfCoolantLiquidLevel,proto3,oneof" json:"isf_coolant_liquid_level,omitempty"`
	IsfBatteryNotChargingIndicator              *bool   `protobuf:"varint,555,opt,name=isf_battery_not_charging_indicator,json=isfBatteryNotChargingIndicator,proto3,oneof" json:"isf_battery_not_charging_indicator,omitempty"`
	IsfHandbrakeSystemIndicator                 *bool   `protobuf:"varint,556,opt,name=isf_handbrake_system_indicator,json=isfHandbrakeSystemIndicator,proto3,oneof" json:"isf_handbrake_system_indicator,omitempty"`
	IsfAirbagIndicator                          *bool   `protobuf:"varint,557,opt,name=isf_airbag_indicator,json=isfAirbagIndicator,proto3,oneof" json:"isf_airbag_indicator,omitempty"`
	IsfEpsIndicator                             *bool   `protobuf:"varint,558,opt,name=isf_eps_indicator,json=isfEpsIndicator,proto3,oneof" json:"isf_eps_indicator,omitempty"`
	IsfWarningIndicator                         *bool   `protobuf:"varint,559,opt,name=isf_warning_indicator,json=isfWarningIndicator,proto3,oneof" json:"isf_warning_indicator,omitempty"`
	IsfLightsFailureIndicator                   *bool   `protobuf:"varint,560,opt,name=isf_lights_failure_indicator,json=isfLightsFailureIndicator,proto3,oneof" json:"isf_lights_failure_indicator,omitempty"`
	IsfLowTirePressureIndicator                 *bool   `protobuf:"varint,561,opt,name=isf_low_tire_pressure_indicator,json=isfLowTirePressureIndicator,proto3,oneof" json:"isf_low_tire_pressure_indicator,omitempty"`
	IsfWearOfBrakePadsIndicator                 *bool   `protobuf:"varint,562,opt,name=isf_wear_of_brake_pads_indicator,json=isfWearOfBrakePadsIndicator,proto3,oneof" json:"isf_wear_of_brake_pads_indicator,omitempty"`
	IsfLowFuelLevelIndicator                    *bool   `protobuf:"varint,563,opt,name=isf_low_fuel_level_indicator,json=isfLowFuelLevelIndicator,proto3,oneof" json:"isf_low_fuel_level_indicator,omitempty"`
	IsfMaintenanceRequiredIndicator             *bool   `protobuf:"varint,564,opt,name=isf_maintenance_required_indicator,json=isfMaintenanceRequiredIndicator,proto3,oneof" json:"isf_maintenance_required_indicator,omitempty"`
	IsfGlowPlugIndicator                        *bool   `protobuf:"varint,565,opt,name=isf_glow_plug_indicator,json=isfGlowPlugIndicator,proto3,oneof" json:"isf_glow_plug_indicator,omitempty"`
	IsfFapIndicator                             *bool   `protobuf:"varint,566,opt,name=isf_fap_indicator,json=isfFapIndicator,proto3,oneof" json:"isf_fap_indicator,omitempty"`
	IsfEpcIndicator                             *bool   `protobuf:"varint,567,opt,name=isf_epc_indicator,json=isfEpcIndicator,proto3,oneof" json:"isf_epc_indicator,omitempty"`
	IsfCloggedEngineOilFilterIndicator          *bool   `protobuf:"varint,568,opt,name=isf_clogged_engine_oil_filter_indicator,json=isfCloggedEngineOilFilterIndicator,proto3,oneof" json:"isf_clogged_engine_oil_filter_indicator,omitempty"`
	IsfLowEngineOilPressureIndicator            *bool   `protobuf:"varint,569,opt,name=isf_low_engine_oil_pressure_indicator,json=isfLowEngineOilPressureIndicator,proto3,oneof" json:"isf_low_engine_oil_pressure_indicator,omitempty"`
	IsfTooHighEngineOilTemperatureIndicator     *bool   `protobuf:"varint,570,opt,name=isf_too_high_engine_oil_temperature_indicator,json=isfTooHighEngineOilTemperatureIndicator,proto3,oneof" json:"isf_too_high_engine_oil_temperature_indicator,omitempty"`
	IsfLowCoolantLevelIndicator                 *bool   `protobuf:"varint,571,opt,name=isf_low_coolant_level_indicator,json=isfLowCoolantLevelIndicator,proto3,oneof" json:"isf_low_coolant_level_indicator,omitempty"`
	IsfCloggedHydraulicSystemOilFilterIndicator *bool   `protobuf:"varint,572,opt,name=isf_clogged_hydraulic_system_oil_filter_indicator,json=isfCloggedHydraulicSystemOilFilterIndicator,proto3,oneof" json:"isf_clogged_hydraulic_system_oil_filter_indicator,omitempty"`
	IsfHydraulicSystemLowPressureIndicator      *bool   `protobuf:"varint,573,opt,name=isf_hydraulic_system_low_pressure_indicator,json=isfHydraulicSystemLowPressureIndicator,proto3,oneof" json:"isf_hydraulic_system_low_pressure_indicator,omitempty"`
	IsfHydraulicOilLowLevelIndicator            *bool   `protobuf:"varint,574,opt,name=isf_hydraulic_oil_low_level_indicator,json=isfHydraulicOilLowLevelIndicator,proto3,oneof" json:"isf_hydraulic_oil_low_level_indicator,omitempty"`
	IsfHydraulicSystemHighTemperatureIndicator  *bool   `protobuf:"varint,575,opt,name=isf_hydraulic_system_high_temperature_indicator,json=isfHydraulicSystemHighTemperatureIndicator,proto3,oneof" json:"isf_hydraulic_system_high_temperature_indicator,omitempty"`
	IsfOilOverflowInHydraulicChamberIndicator   *bool   `protobuf:"varint,576,opt,name=isf_oil_overflow_in_hydraulic_chamber_indicator,json=isfOilOverflowInHydraulicChamberIndicator,proto3,oneof" json:"isf_oil_overflow_in_hydraulic_chamber_indicator,omitempty"`
	IsfCloggedAirFilterIndicator                *bool   `protobuf:"varint,577,opt,name=isf_clogged_air_filter_indicator,json=isfCloggedAirFilterIndicator,proto3,oneof" json:"isf_clogged_air_filter_indicator,omitempty"`
	IsfCloggedFuelFilterIndicator               *bool   `protobuf:"varint,578,opt,name=isf_clogged_fuel_filter_indicator,json=isfCloggedFuelFilterIndicator,proto3,oneof" json:"isf_clogged_fuel_filter_indicator,omitempty"`
	IsfWaterInFuelIndicator                     *bool   `protobuf:"varint,579,opt,name=isf_water_in_fuel_indicator,json=isfWaterInFuelIndicator,proto3,oneof" json:"isf_water_in_fuel_indicator,omitempty"`
	AsfGrainTankIs100PercentFull                *bool   `protobuf:"varint,611,opt,name=asf_grain_tank_is100_percent_full,json=asfGrainTankIs100PercentFull,proto3,oneof" json:"asf_grain_tank_is100_percent_full,omitempty"`
	AsfGrainTankIs70PercentFull                 *bool   `protobuf:"varint,612,opt,name=asf_grain_tank_is70_percent_full,json=asfGrainTankIs70PercentFull,proto3,oneof" json:"asf_grain_tank_is70_percent_full,omitempty"`
	AsfStrawChopperSpeedBelowTheNorm            *bool   `protobuf:"varint,623,opt,name=asf_straw_chopper_speed_below_the_norm,json=asfStrawChopperSpeedBelowTheNorm,proto3,oneof" json:"asf_straw_chopper_speed_below_the_norm,omitempty"`
	UsfSpreading2                               *bool   `protobuf:"varint,650,opt,name=usf_spreading2,json=usfSpreading2,proto3,oneof" json:"usf_spreading2,omitempty"`
	unknownFields                               protoimpl.UnknownFields
	sizeCache                                   protoimpl.SizeCache
}

func (x *Compact) Reset() {
	*x = Compact{}
	mi := &file_packets_packets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compact) ProtoMessage() {}

func (x *Compact) ProtoReflect() protoreflect.Message {
	mi := &file_packets_packets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compact.ProtoReflect.Descriptor instead.
func (*Compact) Descriptor() ([]byte, []int) {
	return file_packets_packets_proto_rawDescGZIP(), []int{5}
}

func (x *Compact) GetMovement() bool {
	if x != nil && x.Movement != nil {
		return *x.Movement
	}
	return false
}

func (x *Compact) GetDataMode() uint32 {
	if x != nil && x.DataMode != nil {
		return *x.DataMode
	}
	return 0
}

func (x *Compact) GetGsmSignal() uint32 {
	if x != nil && x.GsmSignal != nil {
		return *x.GsmSignal
	}
	return 0
}

func (x *Compact) GetSleepMode() uint32 {
	if x != nil && x.SleepMode != nil {
		return *x.SleepMode
	}
	return 0
}

func (x *Compact) GetGnssStatus() uint32 {
	if x != nil && x.GnssStatus != nil {
		return *x.GnssStatus
	}
	return 0
}

func (x *Compact) GetGnssPdop() uint32 {
	if x != nil && x.GnssPdop != nil {
		return *x.GnssPdop
	}
	return 0
}

func (x *Compact) GetGnssHdop() uint32 {
	if x != nil && x.GnssHdop != nil {
		return *x.GnssHdop
	}
	return 0
}

func (x *Compact) GetExternalVoltage() uint32 {
	if x != nil && x.ExternalVoltage != nil {
		return *x.ExternalVoltage
	}
	return 0
}

func (x *Compact) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Compact) GetGsmCellId() uint32 {
	if x != nil && x.GsmCellId != nil {
		return *x.GsmCellId
	}
	return 0
}

func (x *Compact) GetGsmAreaCode() uint32 {
	if x != nil && x.GsmAreaCode != nil {
		return *x.GsmAreaCode
	}
	return 0
}

func (x *Compact) GetBatteryVoltage() uint32 {
	if x != nil && x.BatteryVoltage != nil {
		return *x.BatteryVoltage
	}
	return 0
}

func (x *Compact) GetBatteryCurrent() uint32 {
	if x != nil && x.BatteryCurrent != nil {
		return *x.BatteryCurrent
	}
	return 0
}

func (x *Compact) GetActiveGsmOperator() uint32 {
	if x != nil && x.ActiveGsmOperator != nil {
		return *x.ActiveGsmOperator
	}
	return 0
}

func (x *Compact) GetTripOdometer() uint32 {
	if x != nil && x.TripOdometer != nil {
		return *x.TripOdometer
	}
	return 0
}

func (x *Compact) GetTotalOdometer() uint32 {
	if x != nil && x.TotalOdometer != nil {
		return *x.TotalOdometer
	}
	return 0
}

func (x *Compact) GetDigitalInput1() bool {
	if x != nil && x.DigitalInput1 != nil {
		return *x.DigitalInput1
	}
	return false
}

func (x *Compact) GetAnalogInput1() uint32 {
	if x != nil && x.AnalogInput1 != nil {
		return *x.AnalogInput1
	}
	return 0
}

func (x *Compact) GetDigitalOutput1() bool {
	if x != nil && x.DigitalOutput1 != nil {
		return *x.DigitalOutput1
	}
	return false
}

func (x *Compact) GetFuelUsedGps() uint32 {
	if x != nil && x.FuelUsedGps != nil {
		return *x.FuelUsedGps
	}
	return 0
}

func (x *Compact) GetFuelRateGps() uint32 {
	if x != nil && x.FuelRateGps != nil {
		return *x.FuelRateGps
	}
	return 0
}

func (x *Compact) GetAxisX() int32 {
	if x != nil && x.AxisX != nil {
		return *x.AxisX
	}
	return 0
}

func (x *Compact) GetAxisY() int32 {
	if x != nil && x.AxisY != nil {
		return *x.AxisY
	}
	return 0
}

func (x *Compact) GetAxisZ() int32 {
	if x != nil && x.AxisZ != nil {
		return *x.AxisZ
	}
	return 0
}

func (x *Compact) GetIccid1() uint64 {
	if x != nil && x.Iccid1 != nil {
		return *x.Iccid1
	}
	return 0
}

func (x *Compact) GetSdStatus() bool {
	if x != nil && x.SdStatus != nil {
		return *x.SdStatus
	}
	return false
}

func (x *Compact) GetDigitalInput2() bool {
	if x != nil && x.DigitalInput2 != nil {
		return *x.DigitalInput2
	}
	return false
}

func (x *Compact) GetDigitalInput3() bool {
	if x != nil && x.DigitalInput3 != nil {
		return *x.DigitalInput3
	}
	return false
}

func (x *Compact) GetAnalogInput2() uint32 {
	if x != nil && x.AnalogInput2 != nil {
		return *x.AnalogInput2
	}
	return 0
}

func (x *Compact) GetDigitalOutput2() bool {
	if x != nil && x.DigitalOutput2 != nil {
		return *x.DigitalOutput2
	}
	return false
}

func (x *Compact) GetDallasTemperature1() int32 {
	if x != nil && x.DallasTemperature1 != nil {
		return *x.DallasTemperature1
	}
	return 0
}

func (x *Compact) GetDallasTemperature2() int32 {
	if x != nil && x.DallasTemperature2 != nil {
		return *x.DallasTemperature2
	}
	return 0
}

func (x *Compact) GetDallasTemperature3() int32 {
	if x != nil && x.DallasTemperature3 != nil {
		return *x.DallasTemperature3
	}
	return 0
}

func (x *Compact) GetDallasTemperature4() int32 {
	if x != nil && x.DallasTemperature4 != nil {
		return *x.DallasTemperature4
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId1() uint64 {
	if x != nil && x.DallasTemperatureId1 != nil {
		return *x.DallasTemperatureId1
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId2() uint64 {
	if x != nil && x.DallasTemperatureId2 != nil {
		return *x.DallasTemperatureId2
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId3() uint64 {
	if x != nil && x.DallasTemperatureId3 != nil {
		return *x.DallasTemperatureId3
	}
	return 0
}

func (x *Compact) GetDallasTemperatureId4() uint64 {
	if x != nil && x.DallasTemperatureId4 != nil {
		return *x.DallasTemperatureId4
	}
	return 0
}

func (x *Compact) GetIbutton() uint64 {
	if x != nil && x.Ibutton != nil {
		return *x.Ibutton
	}
	return 0
}

func (x *Compact) GetRfid() uint64 {
	if x != nil && x.Rfid != nil {
		return *x.Rfid
	}
	return 0
}

func (x *Compact) GetLls1FuelLevel() int32 {
	if x != nil && x.Lls1FuelLevel != nil {
		return *x.Lls1FuelLevel
	}
	return 0
}

func (x *Compact) GetLls1Temperature() int32 {
	if x != nil && x.Lls1Temperature != nil {
		return *x.Lls1Temperature
	}
	return 0
}

func (x *Compact) GetLls2FuelLevel() int32 {
	if x != nil && x.Lls2FuelLevel != nil {
		return *x.Lls2FuelLevel
	}
	return 0
}

func (x *Compact) GetLls2Temperature() int32 {
	if x != nil && x.Lls2Temperature != nil {
		return *x.Lls2Temperature
	}
	return 0
}

func (x *Compact) GetLls3FuelLevel() uint32 {
	if x != nil && x.Lls3FuelLevel != nil {
		return *x.Lls3FuelLevel
	}
	return 0
}

func (x *Compact) GetLls3Temperature() int32 {
	if x != nil && x.Lls3Temperature != nil {
		return *x.Lls3Temperature
	}
	return 0
}

func (x *Compact) GetLls4FuelLevel() int32 {
	if x != nil && x.Lls4FuelLevel != nil {
		return *x.Lls4FuelLevel
	}
	return 0
}

func (x *Compact) GetLls4Temperature() int32 {
	if x != nil && x.Lls4Temperature != nil {
		return *x.Lls4Temperature
	}
	return 0
}

func (x *Compact) GetLls5FuelLevel() int32 {
	if x != nil && x.Lls5FuelLevel != nil {
		return *x.Lls5FuelLevel
	}
	return 0
}

func (x *Compact) GetLls5Temperature() int32 {
	if x != nil && x.Lls5Temperature != nil {
		return *x.Lls5Temperature
	}
	return 0
}

func (x *Compact) GetEcoScore() uint32 {
	if x != nil && x.EcoScore != nil {
		return *x.EcoScore
	}
	return 0
}

func (x *Compact) GetBatteryLevel() uint32 {
	if x != nil && x.BatteryLevel != nil {
		return *x.BatteryLevel
	}
	return 0
}

func (x *Compact) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Compact) GetNetworkType() uint32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *Compact) GetPulseCounterDin1() uint32 {
	if x != nil && x.PulseCounterDin1 != nil {
		return *x.PulseCounterDin1
	}
	return 0
}

func (x *Compact) GetPulseCounterDin2() uint32 {
	if x != nil && x.PulseCounterDin2 != nil {
		return *x.PulseCounterDin2
	}
	return 0
}

func (x *Compact) GetBtStatus() uint32 {
	if x != nil && x.BtStatus != nil {
		return *x.BtStatus
	}
	return 0
}

func (x *Compact) GetBarcodeId() string {
	if x != nil && x.BarcodeId != nil {
		return *x.BarcodeId
	}
	return ""
}

func (x *Compact) GetInstantMovement() bool {
	if x != nil && x.InstantMovement != nil {
		return *x.InstantMovement
	}
	return false
}

func (x *Compact) GetUl202_02SensorFuelLevel() int32 {
	if x != nil && x.Ul202_02SensorFuelLevel != nil {
		return *x.Ul202_02SensorFuelLevel
	}
	return 0
}

func (x *Compact) GetUl202_02SensorStatus() uint32 {
	if x != nil && x.Ul202_02SensorStatus != nil {
		return *x.Ul202_02SensorStatus
	}
	return 0
}

func (x *Compact) GetDigitalOutput3() bool {
	if x != nil && x.DigitalOutput3 != nil {
		return *x.DigitalOutput3
	}
	return false
}

func (x *Compact) GetGroundSense() bool {
	if x != nil && x.GroundSense != nil {
		return *x.GroundSense
	}
	return false
}

func (x *Compact) GetIso6709Coordinates() string {
	if x != nil && x.Iso6709Coordinates != nil {
		return *x.Iso6709Coordinates
	}
	return ""
}

func (x *Compact) GetUmtsLteCellId() uint32 {
	if x != nil && x.UmtsLteCellId != nil {
		return *x.UmtsLteCellId
	}
	return 0
}

func (x *Compact) GetDriverName() string {
	if x != nil && x.DriverName != nil {
		return *x.DriverName
	}
	return ""
}

func (x *Compact) GetDriverCardLicenseType() uint32 {
	if x != nil && x.DriverCardLicenseType != nil {
		return *x.DriverCardLicenseType
	}
	return 0
}

func (x *Compact) GetDriverGender() uint32 {
	if x != nil && x.DriverGender != nil {
		return *x.DriverGender
	}
	return 0
}

func (x *Compact) GetDriverCardId() uint32 {
	if x != nil && x.DriverCardId != nil {
		return *x.DriverCardId
	}
	return 0
}

func (x *Compact) GetDriverCardExpirationDate() uint32 {
	if x != nil && x.DriverCardExpirationDate != nil {
		return *x.DriverCardExpirationDate
	}
	return 0
}

func (x *Compact) GetDriverCardPlaceOfIssue() uint32 {
	if x != nil && x.DriverCardPlaceOfIssue != nil {
		return *x.DriverCardPlaceOfIssue
	}
	return 0
}

func (x *Compact) GetDriverStatusEvent() uint32 {
	if x != nil && x.DriverStatusEvent != nil {
		return *x.DriverStatusEvent
	}
	return 0
}

func (x *Compact) GetAinSpeed() uint32 {
	if x != nil && x.AinSpeed != nil {
		return *x.AinSpeed
	}
	return 0
}

func (x *Compact) GetMsp500VendorName() string {
	if x != nil && x.Msp500VendorName != nil {
		return *x.Msp500VendorName
	}
	return ""
}

func (x *Compact) GetMsp500VehicleNumber() string {
	if x != nil && x.Msp500VehicleNumber != nil {
		return *x.Msp500VehicleNumber
	}
	return ""
}

func (x *Compact) GetMsp500SpeedSensor() bool {
	if x != nil && x.Msp500SpeedSensor != nil {
		return *x.Msp500SpeedSensor
	}
	return false
}

func (x *Compact) GetWakeReason() bool {
	if x != nil && x.WakeReason != nil {
		return *x.WakeReason
	}
	return false
}

func (x *Compact) GetEyeTemperature1() int32 {
	if x != nil && x.EyeTemperature1 != nil {
		return *x.EyeTemperature1
	}
	return 0
}

func (x *Compact) GetEyeTemperature2() int32 {
	if x != nil && x.EyeTemperature2 != nil {
		return *x.EyeTemperature2
	}
	return 0
}

func (x *Compact) GetEyeTemperature3() int32 {
	if x != nil && x.EyeTemperature3 != nil {
		return *x.EyeTemperature3
	}
	return 0
}

func (x *Compact) GetEyeTemperature4() int32 {
	if x != nil && x.EyeTemperature4 != nil {
		return *x.EyeTemperature4
	}
	return 0
}

func (x *Compact) GetEyeHumidity1() uint32 {
	if x != nil && x.EyeHumidity1 != nil {
		return *x.EyeHumidity1
	}
	return 0
}

func (x *Compact) GetEyeHumidity2() uint32 {
	if x != nil && x.EyeHumidity2 != nil {
		return *x.EyeHumidity2
	}
	return 0
}

func (x *Compact) GetEyeHumidity3() uint32 {
	if x != nil && x.EyeHumidity3 != nil {
		return *x.EyeHumidity3
	}
	return 0
}

func (x *Compact) GetEyeHumidity4() uint32 {
	if x != nil && x.EyeHumidity4 != nil {
		return *x.EyeHumidity4
	}
	return 0
}

func (x *Compact) GetEyeMagnet1() bool {
	if x != nil && x.EyeMagnet1 != nil {
		return *x.EyeMagnet1
	}
	return false
}

func (x *Compact) GetEyeMagnet2() bool {
	if x != nil && x.EyeMagnet2 != nil {
		return *x.EyeMagnet2
	}
	return false
}

func (x *Compact) GetEyeMagnet3() bool {
	if x != nil && x.EyeMagnet3 != nil {
		return *x.EyeMagnet3
	}
	return false
}

func (x *Compact) GetEyeMagnet4() bool {
	if x != nil && x.EyeMagnet4 != nil {
		return *x.EyeMagnet4
	}
	return false
}

func (x *Compact) GetEyeMovement1() bool {
	if x != nil && x.EyeMovement1 != nil {
		return *x.EyeMovement1
	}
	return false
}

func (x *Compact) GetEyeMovement2() bool {
	if x != nil && x.EyeMovement2 != nil {
		return *x.EyeMovement2
	}
	return false
}

func (x *Compact) GetEyeMovement3() bool {
	if x != nil && x.EyeMovement3 != nil {
		return *x.EyeMovement3
	}
	return false
}

func (x *Compact) GetEyeMovement4() bool {
	if x != nil && x.EyeMovement4 != nil {
		return *x.EyeMovement4
	}
	return false
}

func (x *Compact) GetEyePitch1() int32 {
	if x != nil && x.EyePitch1 != nil {
		return *x.EyePitch1
	}
	return 0
}

func (x *Compact) GetEyePitch2() int32 {
	if x != nil && x.EyePitch2 != nil {
		return *x.EyePitch2
	}
	return 0
}

func (x *Compact) GetEyePitch3() int32 {
	if x != nil && x.EyePitch3 != nil {
		return *x.EyePitch3
	}
	return 0
}

func (x *Compact) GetEyePitch4() int32 {
	if x != nil && x.EyePitch4 != nil {
		return *x.EyePitch4
	}
	return 0
}

func (x *Compact) GetEyeLowBattery1() bool {
	if x != nil && x.EyeLowBattery1 != nil {
		return *x.EyeLowBattery1
	}
	return false
}

func (x *Compact) GetEyeLowBattery2() bool {
	if x != nil && x.EyeLowBattery2 != nil {
		return *x.EyeLowBattery2
	}
	return false
}

func (x *Compact) GetEyeLowBattery3() bool {
	if x != nil && x.EyeLowBattery3 != nil {
		return *x.EyeLowBattery3
	}
	return false
}

func (x *Compact) GetEyeLowBattery4() bool {
	if x != nil && x.EyeLowBattery4 != nil {
		return *x.EyeLowBattery4
	}
	return false
}

func (x *Compact) GetEyeBatteryVoltage1() uint32 {
	if x != nil && x.EyeBatteryVoltage1 != nil {
		return *x.EyeBatteryVoltage1
	}
	return 0
}

func (x *Compact) GetEyeBatteryVoltage2() uint32 {
	if x != nil && x.EyeBatteryVoltage2 != nil {
		return *x.EyeBatteryVoltage2
	}
	return 0
}

func (x *Compact) GetEyeBatteryVoltage3() uint32 {
	if x != nil && x.EyeBatteryVoltage3 != nil {
		return *x.EyeBatteryVoltage3
	}
	return 0
}

func (x *Compact) GetEyeBatteryVoltage4() uint32 {
	if x != nil && x.EyeBatteryVoltage4 != nil {
		return *x.EyeBatteryVoltage4
	}
	return 0
}

func (x *Compact) GetEyeRoll1() int32 {
	if x != nil && x.EyeRoll1 != nil {
		return *x.EyeRoll1
	}
	return 0
}

func (x *Compact) GetEyeRoll2() int32 {
	if x != nil && x.EyeRoll2 != nil {
		return *x.EyeRoll2
	}
	return 0
}

func (x *Compact) GetEyeRoll3() int32 {
	if x != nil && x.EyeRoll3 != nil {
		return *x.EyeRoll3
	}
	return 0
}

func (x *Compact) GetEyeRoll4() int32 {
	if x != nil && x.EyeRoll4 != nil {
		return *x.EyeRoll4
	}
	return 0
}

func (x *Compact) GetEyeMovementCount1() uint32 {
	if x != nil && x.EyeMovementCount1 != nil {
		return *x.EyeMovementCount1
	}
	return 0
}

func (x *Compact) GetEyeMovementCount2() uint32 {
	if x != nil && x.EyeMovementCount2 != nil {
		return *x.EyeMovementCount2
	}
	return 0
}

func (x *Compact) GetEyeMovementCount3() uint32 {
	if x != nil && x.EyeMovementCount3 != nil {
		return *x.EyeMovementCount3
	}
	return 0
}

func (x *Compact) GetEyeMovementCount4() uint32 {
	if x != nil && x.EyeMovementCount4 != nil {
		return *x.EyeMovementCount4
	}
	return 0
}

func (x *Compact) GetEyeMagnetCount1() uint32 {
	if x != nil && x.EyeMagnetCount1 != nil {
		return *x.EyeMagnetCount1
	}
	return 0
}

func (x *Compact) GetEyeMagnetCount2() uint32 {
	if x != nil && x.EyeMagnetCount2 != nil {
		return *x.EyeMagnetCount2
	}
	return 0
}

func (x *Compact) GetEyeMagnetCount3() uint32 {
	if x != nil && x.EyeMagnetCount3 != nil {
		return *x.EyeMagnetCount3
	}
	return 0
}

func (x *Compact) GetEyeMagnetCount4() uint32 {
	if x != nil && x.EyeMagnetCount4 != nil {
		return *x.EyeMagnetCount4
	}
	return 0
}

func (x *Compact) GetIsfCloggedBrakeSystemFilterIndicator() bool {
	if x != nil && x.IsfCloggedBrakeSystemFilterIndicator != nil {
		return *x.IsfCloggedBrakeSystemFilterIndicator
	}
	return false
}

func (x *Compact) GetIsfLowWasherFluidLevelIndicator() bool {
	if x != nil && x.IsfLowWasherFluidLevelIndicator != nil {
		return *x.IsfLowWasherFluidLevelIndicator
	}
	return false
}

func (x *Compact) GetIsfLowAdblueLevelIndicator() bool {
	if x != nil && x.IsfLowAdblueLevelIndicator != nil {
		return *x.IsfLowAdblueLevelIndicator
	}
	return false
}

func (x *Compact) GetIsfLowTrailerTyrePressureIndicator() bool {
	if x != nil && x.IsfLowTrailerTyrePressureIndicator != nil {
		return *x.IsfLowTrailerTyrePressureIndicator
	}
	return false
}

func (x *Compact) GetIsfWearOfTrailerBrakeLiningIndicator() bool {
	if x != nil && x.IsfWearOfTrailerBrakeLiningIndicator != nil {
		return *x.IsfWearOfTrailerBrakeLiningIndicator
	}
	return false
}

func (x *Compact) GetIsfHighTrailerBrakeTemperatureIndicator() bool {
	if x != nil && x.IsfHighTrailerBrakeTemperatureIndicator != nil {
		return *x.IsfHighTrailerBrakeTemperatureIndicator
	}
	return false
}

func (x *Compact) GetIsfIncorrectTrailerPneumaticSupplyIndicator() bool {
	if x != nil && x.IsfIncorrectTrailerPneumaticSupplyIndicator != nil {
		return *x.IsfIncorrectTrailerPneumaticSupplyIndicator
	}
	return false
}

func (x *Compact) GetIsfLowCngLevelIndicator() bool {
	if x != nil && x.IsfLowCngLevelIndicator != nil {
		return *x.IsfLowCngLevelIndicator
	}
	return false
}

func (x *Compact) GetAsfRightJoystickMovedRightActive() bool {
	if x != nil && x.AsfRightJoystickMovedRightActive != nil {
		return *x.AsfRightJoystickMovedRightActive
	}
	return false
}

func (x *Compact) GetAsfRightJoystickMovedLeftActive() bool {
	if x != nil && x.AsfRightJoystickMovedLeftActive != nil {
		return *x.AsfRightJoystickMovedLeftActive
	}
	return false
}

func (x *Compact) GetAsfRightJoystickMovedForwardActive() bool {
	if x != nil && x.AsfRightJoystickMovedForwardActive != nil {
		return *x.AsfRightJoystickMovedForwardActive
	}
	return false
}

func (x *Compact) GetAsfRightJoystickMovedBackActive() bool {
	if x != nil && x.AsfRightJoystickMovedBackActive != nil {
		return *x.AsfRightJoystickMovedBackActive
	}
	return false
}

func (x *Compact) GetAsfLeftJoystickMovedRightActive() bool {
	if x != nil && x.AsfLeftJoystickMovedRightActive != nil {
		return *x.AsfLeftJoystickMovedRightActive
	}
	return false
}

func (x *Compact) GetAsfLeftJoystickMovedLeftActive() bool {
	if x != nil && x.AsfLeftJoystickMovedLeftActive != nil {
		return *x.AsfLeftJoystickMovedLeftActive
	}
	return false
}

func (x *Compact) GetAsfLeftJoystickMovedForwardActive() bool {
	if x != nil && x.AsfLeftJoystickMovedForwardActive != nil {
		return *x.AsfLeftJoystickMovedForwardActive
	}
	return false
}

func (x *Compact) GetAsfLeftJoystickMovedBackActive() bool {
	if x != nil && x.AsfLeftJoystickMovedBackActive != nil {
		return *x.AsfLeftJoystickMovedBackActive
	}
	return false
}

func (x *Compact) GetAsfFirstRearHydraulic() bool {
	if x != nil && x.AsfFirstRearHydraulic != nil {
		return *x.AsfFirstRearHydraulic
	}
	return false
}

func (x *Compact) GetAsfSecondRearHydraulic() bool {
	if x != nil && x.AsfSecondRearHydraulic != nil {
		return *x.AsfSecondRearHydraulic
	}
	return false
}

func (x *Compact) GetAsfThirdRearHydraulic() bool {
	if x != nil && x.AsfThirdRearHydraulic != nil {
		return *x.AsfThirdRearHydraulic
	}
	return false
}

func (x *Compact) GetAsfFourthRearHydraulic() bool {
	if x != nil && x.AsfFourthRearHydraulic != nil {
		return *x.AsfFourthRearHydraulic
	}
	return false
}

func (x *Compact) GetAsfFirstFrontHydraulic() bool {
	if x != nil && x.AsfFirstFrontHydraulic != nil {
		return *x.AsfFirstFrontHydraulic
	}
	return false
}

func (x *Compact) GetAsfSecondFrontHydraulic() bool {
	if x != nil && x.AsfSecondFrontHydraulic != nil {
		return *x.AsfSecondFrontHydraulic
	}
	return false
}

func (x *Compact) GetAsfThirdFrontHydraulic() bool {
	if x != nil && x.AsfThirdFrontHydraulic != nil {
		return *x.AsfThirdFrontHydraulic
	}
	return false
}

func (x *Compact) GetAsfFourthFrontHydraulic() bool {
	if x != nil && x.AsfFourthFrontHydraulic != nil {
		return *x.AsfFourthFrontHydraulic
	}
	return false
}

func (x *Compact) GetAsfFrontThreePointHitch() bool {
	if x != nil && x.AsfFrontThreePointHitch != nil {
		return *x.AsfFrontThreePointHitch
	}
	return false
}

func (x *Compact) GetAsfRearThreePointHitch() bool {
	if x != nil && x.AsfRearThreePointHitch != nil {
		return *x.AsfRearThreePointHitch
	}
	return false
}

func (x *Compact) GetAsfFrontPowerTakeOff() bool {
	if x != nil && x.AsfFrontPowerTakeOff != nil {
		return *x.AsfFrontPowerTakeOff
	}
	return false
}

func (x *Compact) GetAsfRearPowerTakeOff() bool {
	if x != nil && x.AsfRearPowerTakeOff != nil {
		return *x.AsfRearPowerTakeOff
	}
	return false
}

func (x *Compact) GetAsfMowingActive() bool {
	if x != nil && x.AsfMowingActive != nil {
		return *x.AsfMowingActive
	}
	return false
}

func (x *Compact) GetAsfThreshingActive() bool {
	if x != nil && x.AsfThreshingActive != nil {
		return *x.AsfThreshingActive
	}
	return false
}

func (x *Compact) GetAsfGrainReleaseFromHopper() bool {
	if x != nil && x.AsfGrainReleaseFromHopper != nil {
		return *x.AsfGrainReleaseFromHopper
	}
	return false
}

func (x *Compact) GetAsfGrainTankIs100Full() bool {
	if x != nil && x.AsfGrainTankIs100Full != nil {
		return *x.AsfGrainTankIs100Full
	}
	return false
}

func (x *Compact) GetAsfGrainTankIs70Full() bool {
	if x != nil && x.AsfGrainTankIs70Full != nil {
		return *x.AsfGrainTankIs70Full
	}
	return false
}

func (x *Compact) GetAsfGrainTankIsOpened() bool {
	if x != nil && x.AsfGrainTankIsOpened != nil {
		return *x.AsfGrainTankIsOpened
	}
	return false
}

func (x *Compact) GetAsfUnloaderDrive() bool {
	if x != nil && x.AsfUnloaderDrive != nil {
		return *x.AsfUnloaderDrive
	}
	return false
}

func (x *Compact) GetAsfCleaningFanControlTurnedOff() bool {
	if x != nil && x.AsfCleaningFanControlTurnedOff != nil {
		return *x.AsfCleaningFanControlTurnedOff
	}
	return false
}

func (x *Compact) GetAsfThreshingDrumControlTurnedOff() bool {
	if x != nil && x.AsfThreshingDrumControlTurnedOff != nil {
		return *x.AsfThreshingDrumControlTurnedOff
	}
	return false
}

func (x *Compact) GetAsfStrawWalkerIsClogged() bool {
	if x != nil && x.AsfStrawWalkerIsClogged != nil {
		return *x.AsfStrawWalkerIsClogged
	}
	return false
}

func (x *Compact) GetAsfExcessiveClearanceUnderTheThreshingDrum() bool {
	if x != nil && x.AsfExcessiveClearanceUnderTheThreshingDrum != nil {
		return *x.AsfExcessiveClearanceUnderTheThreshingDrum
	}
	return false
}

func (x *Compact) GetAsfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades() bool {
	if x != nil && x.AsfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades != nil {
		return *x.AsfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades
	}
	return false
}

func (x *Compact) GetAsfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades() bool {
	if x != nil && x.AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades != nil {
		return *x.AsfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades
	}
	return false
}

func (x *Compact) GetAsfEarAugerSpeedBelowTheNorm() bool {
	if x != nil && x.AsfEarAugerSpeedBelowTheNorm != nil {
		return *x.AsfEarAugerSpeedBelowTheNorm
	}
	return false
}

func (x *Compact) GetAsfGrainAugerSpeedBelowTheNorm() bool {
	if x != nil && x.AsfGrainAugerSpeedBelowTheNorm != nil {
		return *x.AsfGrainAugerSpeedBelowTheNorm
	}
	return false
}

func (x *Compact) GetAsfStrawChooperSpeedBelowTheNorm() bool {
	if x != nil && x.AsfStrawChooperSpeedBelowTheNorm != nil {
		return *x.AsfStrawChooperSpeedBelowTheNorm
	}
	return false
}

func (x *Compact) GetAsfStrawShakerSpeedBelowTheNorm() bool {
	if x != nil && x.AsfStrawShakerSpeedBelowTheNorm != nil {
		return *x.AsfStrawShakerSpeedBelowTheNorm
	}
	return false
}

func (x *Compact) GetAsfFeederSpeedBelowTheNorm() bool {
	if x != nil && x.AsfFeederSpeedBelowTheNorm != nil {
		return *x.AsfFeederSpeedBelowTheNorm
	}
	return false
}

func (x *Compact) GetAsfStrawChopperSwitchedOn() bool {
	if x != nil && x.AsfStrawChopperSwitchedOn != nil {
		return *x.AsfStrawChopperSwitchedOn
	}
	return false
}

func (x *Compact) GetAsfCornHeaderConnected() bool {
	if x != nil && x.AsfCornHeaderConnected != nil {
		return *x.AsfCornHeaderConnected
	}
	return false
}

func (x *Compact) GetAsfGrainHeaderConnected() bool {
	if x != nil && x.AsfGrainHeaderConnected != nil {
		return *x.AsfGrainHeaderConnected
	}
	return false
}

func (x *Compact) GetAsfFeederReverseSwitchedOn() bool {
	if x != nil && x.AsfFeederReverseSwitchedOn != nil {
		return *x.AsfFeederReverseSwitchedOn
	}
	return false
}

func (x *Compact) GetAsfThePressureFilterOfTheHydraulicPumpIsClogged() bool {
	if x != nil && x.AsfThePressureFilterOfTheHydraulicPumpIsClogged != nil {
		return *x.AsfThePressureFilterOfTheHydraulicPumpIsClogged
	}
	return false
}

func (x *Compact) GetAsfAdapterPressureFilterSensor() bool {
	if x != nil && x.AsfAdapterPressureFilterSensor != nil {
		return *x.AsfAdapterPressureFilterSensor
	}
	return false
}

func (x *Compact) GetAsfService2RequiredIndicator() bool {
	if x != nil && x.AsfService2RequiredIndicator != nil {
		return *x.AsfService2RequiredIndicator
	}
	return false
}

func (x *Compact) GetAsfDrainFilterCloggedIndicator() bool {
	if x != nil && x.AsfDrainFilterCloggedIndicator != nil {
		return *x.AsfDrainFilterCloggedIndicator
	}
	return false
}

func (x *Compact) GetAsfSection1Spraying() bool {
	if x != nil && x.AsfSection1Spraying != nil {
		return *x.AsfSection1Spraying
	}
	return false
}

func (x *Compact) GetAsfSection2Spraying() bool {
	if x != nil && x.AsfSection2Spraying != nil {
		return *x.AsfSection2Spraying
	}
	return false
}

func (x *Compact) GetAsfSection3Spraying() bool {
	if x != nil && x.AsfSection3Spraying != nil {
		return *x.AsfSection3Spraying
	}
	return false
}

func (x *Compact) GetAsfSection4Spraying() bool {
	if x != nil && x.AsfSection4Spraying != nil {
		return *x.AsfSection4Spraying
	}
	return false
}

func (x *Compact) GetAsfSection5Spraying() bool {
	if x != nil && x.AsfSection5Spraying != nil {
		return *x.AsfSection5Spraying
	}
	return false
}

func (x *Compact) GetAsfSection6Spraying() bool {
	if x != nil && x.AsfSection6Spraying != nil {
		return *x.AsfSection6Spraying
	}
	return false
}

func (x *Compact) GetAsfSection7Spraying() bool {
	if x != nil && x.AsfSection7Spraying != nil {
		return *x.AsfSection7Spraying
	}
	return false
}

func (x *Compact) GetAsfSection8Spraying() bool {
	if x != nil && x.AsfSection8Spraying != nil {
		return *x.AsfSection8Spraying
	}
	return false
}

func (x *Compact) GetAsfSection9Spraying() bool {
	if x != nil && x.AsfSection9Spraying != nil {
		return *x.AsfSection9Spraying
	}
	return false
}

func (x *Compact) GetUsfSpreading() bool {
	if x != nil && x.UsfSpreading != nil {
		return *x.UsfSpreading
	}
	return false
}

func (x *Compact) GetUsfPouringChemicals() bool {
	if x != nil && x.UsfPouringChemicals != nil {
		return *x.UsfPouringChemicals
	}
	return false
}

func (x *Compact) GetUsfConveyorBelt() bool {
	if x != nil && x.UsfConveyorBelt != nil {
		return *x.UsfConveyorBelt
	}
	return false
}

func (x *Compact) GetUsfSaltSpreadersDriveWheel() bool {
	if x != nil && x.UsfSaltSpreadersDriveWheel != nil {
		return *x.UsfSaltSpreadersDriveWheel
	}
	return false
}

func (x *Compact) GetUsfBrushes() bool {
	if x != nil && x.UsfBrushes != nil {
		return *x.UsfBrushes
	}
	return false
}

func (x *Compact) GetUsfVacuumCleaner() bool {
	if x != nil && x.UsfVacuumCleaner != nil {
		return *x.UsfVacuumCleaner
	}
	return false
}

func (x *Compact) GetUsfWaterSupply() bool {
	if x != nil && x.UsfWaterSupply != nil {
		return *x.UsfWaterSupply
	}
	return false
}

func (x *Compact) GetUsfLiquidPump() bool {
	if x != nil && x.UsfLiquidPump != nil {
		return *x.UsfLiquidPump
	}
	return false
}

func (x *Compact) GetUsfUnloadingFromTheHopper() bool {
	if x != nil && x.UsfUnloadingFromTheHopper != nil {
		return *x.UsfUnloadingFromTheHopper
	}
	return false
}

func (x *Compact) GetUsfLowSaltSandLevelInContainerIndicator() bool {
	if x != nil && x.UsfLowSaltSandLevelInContainerIndicator != nil {
		return *x.UsfLowSaltSandLevelInContainerIndicator
	}
	return false
}

func (x *Compact) GetUsfLowWaterLevelInContainerIndicator() bool {
	if x != nil && x.UsfLowWaterLevelInContainerIndicator != nil {
		return *x.UsfLowWaterLevelInContainerIndicator
	}
	return false
}

func (x *Compact) GetUsfChemicals() bool {
	if x != nil && x.UsfChemicals != nil {
		return *x.UsfChemicals
	}
	return false
}

func (x *Compact) GetUsfCompressor() bool {
	if x != nil && x.UsfCompressor != nil {
		return *x.UsfCompressor
	}
	return false
}

func (x *Compact) GetUsfWaterValveIsOpened() bool {
	if x != nil && x.UsfWaterValveIsOpened != nil {
		return *x.UsfWaterValveIsOpened
	}
	return false
}

func (x *Compact) GetUsfCabinMovedUpStatusActive() bool {
	if x != nil && x.UsfCabinMovedUpStatusActive != nil {
		return *x.UsfCabinMovedUpStatusActive
	}
	return false
}

func (x *Compact) GetUsfCabinMovedDownStatusActive() bool {
	if x != nil && x.UsfCabinMovedDownStatusActive != nil {
		return *x.UsfCabinMovedDownStatusActive
	}
	return false
}

func (x *Compact) GetUsfHydraulicsWorkNotPermitted() bool {
	if x != nil && x.UsfHydraulicsWorkNotPermitted != nil {
		return *x.UsfHydraulicsWorkNotPermitted
	}
	return false
}

func (x *Compact) GetCisfSection1PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection1PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection1PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection1Filled() bool {
	if x != nil && x.CisfSection1Filled != nil {
		return *x.CisfSection1Filled
	}
	return false
}

func (x *Compact) GetCisfSection1Overfilled() bool {
	if x != nil && x.CisfSection1Overfilled != nil {
		return *x.CisfSection1Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection2PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection2PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection2PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection2Filled() bool {
	if x != nil && x.CisfSection2Filled != nil {
		return *x.CisfSection2Filled
	}
	return false
}

func (x *Compact) GetCisfSection2Overfilled() bool {
	if x != nil && x.CisfSection2Overfilled != nil {
		return *x.CisfSection2Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection3PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection3PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection3PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection3Filled() bool {
	if x != nil && x.CisfSection3Filled != nil {
		return *x.CisfSection3Filled
	}
	return false
}

func (x *Compact) GetCisfSection3Overfilled() bool {
	if x != nil && x.CisfSection3Overfilled != nil {
		return *x.CisfSection3Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection4PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection4PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection4PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection4Filled() bool {
	if x != nil && x.CisfSection4Filled != nil {
		return *x.CisfSection4Filled
	}
	return false
}

func (x *Compact) GetCisfSection4Overfilled() bool {
	if x != nil && x.CisfSection4Overfilled != nil {
		return *x.CisfSection4Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection5PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection5PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection5PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection5Filled() bool {
	if x != nil && x.CisfSection5Filled != nil {
		return *x.CisfSection5Filled
	}
	return false
}

func (x *Compact) GetCisfSection5Overfilled() bool {
	if x != nil && x.CisfSection5Overfilled != nil {
		return *x.CisfSection5Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection6PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection6PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection6PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection6Filled() bool {
	if x != nil && x.CisfSection6Filled != nil {
		return *x.CisfSection6Filled
	}
	return false
}

func (x *Compact) GetCisfSection6Overfilled() bool {
	if x != nil && x.CisfSection6Overfilled != nil {
		return *x.CisfSection6Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection7PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection7PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection7PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection7Filled() bool {
	if x != nil && x.CisfSection7Filled != nil {
		return *x.CisfSection7Filled
	}
	return false
}

func (x *Compact) GetCisfSection7Overfilled() bool {
	if x != nil && x.CisfSection7Overfilled != nil {
		return *x.CisfSection7Overfilled
	}
	return false
}

func (x *Compact) GetCisfSection8PresenceOfFluidInTheDownpipe() bool {
	if x != nil && x.CisfSection8PresenceOfFluidInTheDownpipe != nil {
		return *x.CisfSection8PresenceOfFluidInTheDownpipe
	}
	return false
}

func (x *Compact) GetCisfSection8Filled() bool {
	if x != nil && x.CisfSection8Filled != nil {
		return *x.CisfSection8Filled
	}
	return false
}

func (x *Compact) GetCisfSection8Overfilled() bool {
	if x != nil && x.CisfSection8Overfilled != nil {
		return *x.CisfSection8Overfilled
	}
	return false
}

func (x *Compact) GetDistanceToNextService() uint32 {
	if x != nil && x.DistanceToNextService != nil {
		return *x.DistanceToNextService
	}
	return 0
}

func (x *Compact) GetCngLevelKg() uint32 {
	if x != nil && x.CngLevelKg != nil {
		return *x.CngLevelKg
	}
	return 0
}

func (x *Compact) GetDistanceFromNeedOfService() uint32 {
	if x != nil && x.DistanceFromNeedOfService != nil {
		return *x.DistanceFromNeedOfService
	}
	return 0
}

func (x *Compact) GetDistanceFromLastService() uint32 {
	if x != nil && x.DistanceFromLastService != nil {
		return *x.DistanceFromLastService
	}
	return 0
}

func (x *Compact) GetTimeToNextService() uint32 {
	if x != nil && x.TimeToNextService != nil {
		return *x.TimeToNextService
	}
	return 0
}

func (x *Compact) GetTimeFromNeedOfService() uint32 {
	if x != nil && x.TimeFromNeedOfService != nil {
		return *x.TimeFromNeedOfService
	}
	return 0
}

func (x *Compact) GetTimeFromLastSerivce() uint32 {
	if x != nil && x.TimeFromLastSerivce != nil {
		return *x.TimeFromLastSerivce
	}
	return 0
}

func (x *Compact) GetDistanceToNextOilService() uint32 {
	if x != nil && x.DistanceToNextOilService != nil {
		return *x.DistanceToNextOilService
	}
	return 0
}

func (x *Compact) GetTimeToNextOilService() uint32 {
	if x != nil && x.TimeToNextOilService != nil {
		return *x.TimeToNextOilService
	}
	return 0
}

func (x *Compact) GetLvcanVehicleRange() uint32 {
	if x != nil && x.LvcanVehicleRange != nil {
		return *x.LvcanVehicleRange
	}
	return 0
}

func (x *Compact) GetLvcanTotalCngCounted() uint32 {
	if x != nil && x.LvcanTotalCngCounted != nil {
		return *x.LvcanTotalCngCounted
	}
	return 0
}

func (x *Compact) GetTotalBaleCount() uint32 {
	if x != nil && x.TotalBaleCount != nil {
		return *x.TotalBaleCount
	}
	return 0
}

func (x *Compact) GetBaleCount() uint32 {
	if x != nil && x.BaleCount != nil {
		return *x.BaleCount
	}
	return 0
}

func (x *Compact) GetCutBaleCount() uint32 {
	if x != nil && x.CutBaleCount != nil {
		return *x.CutBaleCount
	}
	return 0
}

func (x *Compact) GetBaleSlices() uint32 {
	if x != nil && x.BaleSlices != nil {
		return *x.BaleSlices
	}
	return 0
}

func (x *Compact) GetLvcanMaxroadspeed() uint32 {
	if x != nil && x.LvcanMaxroadspeed != nil {
		return *x.LvcanMaxroadspeed
	}
	return 0
}

func (x *Compact) GetLvcanExceededroadspeed() uint32 {
	if x != nil && x.LvcanExceededroadspeed != nil {
		return *x.LvcanExceededroadspeed
	}
	return 0
}

func (x *Compact) GetLvcanRsfSpeedlimitsign() bool {
	if x != nil && x.LvcanRsfSpeedlimitsign != nil {
		return *x.LvcanRsfSpeedlimitsign
	}
	return false
}

func (x *Compact) GetLvcanRsfEndOfSpeedLimitsign() bool {
	if x != nil && x.LvcanRsfEndOfSpeedLimitsign != nil {
		return *x.LvcanRsfEndOfSpeedLimitsign
	}
	return false
}

func (x *Compact) GetLvcanRsfSpeedExceeded() bool {
	if x != nil && x.LvcanRsfSpeedExceeded != nil {
		return *x.LvcanRsfSpeedExceeded
	}
	return false
}

func (x *Compact) GetLvcanRsfTimeSpeedLimitsign() bool {
	if x != nil && x.LvcanRsfTimeSpeedLimitsign != nil {
		return *x.LvcanRsfTimeSpeedLimitsign
	}
	return false
}

func (x *Compact) GetLvcanRsfWthrSpeedLimitSign() bool {
	if x != nil && x.LvcanRsfWthrSpeedLimitSign != nil {
		return *x.LvcanRsfWthrSpeedLimitSign
	}
	return false
}

func (x *Compact) GetAxlCalibrationStatus() uint32 {
	if x != nil && x.AxlCalibrationStatus != nil {
		return *x.AxlCalibrationStatus
	}
	return 0
}

func (x *Compact) GetBleRfid1() uint64 {
	if x != nil && x.BleRfid1 != nil {
		return *x.BleRfid1
	}
	return 0
}

func (x *Compact) GetBleRfid2() uint64 {
	if x != nil && x.BleRfid2 != nil {
		return *x.BleRfid2
	}
	return 0
}

func (x *Compact) GetBleRfid3() uint64 {
	if x != nil && x.BleRfid3 != nil {
		return *x.BleRfid3
	}
	return 0
}

func (x *Compact) GetBleRfid4() uint64 {
	if x != nil && x.BleRfid4 != nil {
		return *x.BleRfid4
	}
	return 0
}

func (x *Compact) GetBleButton1State1() bool {
	if x != nil && x.BleButton1State1 != nil {
		return *x.BleButton1State1
	}
	return false
}

func (x *Compact) GetBleButton1State2() bool {
	if x != nil && x.BleButton1State2 != nil {
		return *x.BleButton1State2
	}
	return false
}

func (x *Compact) GetBleButton1State3() bool {
	if x != nil && x.BleButton1State3 != nil {
		return *x.BleButton1State3
	}
	return false
}

func (x *Compact) GetBleButton1State4() bool {
	if x != nil && x.BleButton1State4 != nil {
		return *x.BleButton1State4
	}
	return false
}

func (x *Compact) GetBleButton2State1() bool {
	if x != nil && x.BleButton2State1 != nil {
		return *x.BleButton2State1
	}
	return false
}

func (x *Compact) GetBleButton2State2() bool {
	if x != nil && x.BleButton2State2 != nil {
		return *x.BleButton2State2
	}
	return false
}

func (x *Compact) GetBleButton2State3() bool {
	if x != nil && x.BleButton2State3 != nil {
		return *x.BleButton2State3
	}
	return false
}

func (x *Compact) GetBleButton2State4() bool {
	if x != nil && x.BleButton2State4 != nil {
		return *x.BleButton2State4
	}
	return false
}

func (x *Compact) GetFrequencyDin1() uint32 {
	if x != nil && x.FrequencyDin1 != nil {
		return *x.FrequencyDin1
	}
	return 0
}

func (x *Compact) GetFrequencyDin2() uint32 {
	if x != nil && x.FrequencyDin2 != nil {
		return *x.FrequencyDin2
	}
	return 0
}

func (x *Compact) GetConnectivityQuality() uint32 {
	if x != nil && x.ConnectivityQuality != nil {
		return *x.ConnectivityQuality
	}
	return 0
}

func (x *Compact) GetGeoFence() map[uint32]uint32 {
	if x != nil {
		return x.GeoFence
	}
	return nil
}

func (x *Compact) GetAutoGeofence() bool {
	if x != nil && x.AutoGeofence != nil {
		return *x.AutoGeofence
	}
	return false
}

func (x *Compact) GetTrip() uint32 {
	if x != nil && x.Trip != nil {
		return *x.Trip
	}
	return 0
}

func (x *Compact) GetOverSpeeding() uint32 {
	if x != nil && x.OverSpeeding != nil {
		return *x.OverSpeeding
	}
	return 0
}

func (x *Compact) GetCrashTraceData() []byte {
	if x != nil {
		return x.CrashTraceData
	}
	return nil
}

func (x *Compact) GetBloodAlcoholContent() uint32 {
	if x != nil && x.BloodAlcoholContent != nil {
		return *x.BloodAlcoholContent
	}
	return 0
}

func (x *Compact) GetIdling() bool {
	if x != nil && x.Idling != nil {
		return *x.Idling
	}
	return false
}

func (x *Compact) GetGreenDrivingType() uint32 {
	if x != nil && x.GreenDrivingType != nil {
		return *x.GreenDrivingType
	}
	return 0
}

func (x *Compact) GetTowing() bool {
	if x != nil && x.Towing != nil {
		return *x.Towing
	}
	return false
}

func (x *Compact) GetUnplug() bool {
	if x != nil && x.Unplug != nil {
		return *x.Unplug
	}
	return false
}

func (x *Compact) GetCrashDetection() uint32 {
	if x != nil && x.CrashDetection != nil {
		return *x.CrashDetection
	}
	return 0
}

func (x *Compact) GetImmobilizer() uint32 {
	if x != nil && x.Immobilizer != nil {
		return *x.Immobilizer
	}
	return 0
}

func (x *Compact) GetGreenDrivingValue() uint32 {
	if x != nil && x.GreenDrivingValue != nil {
		return *x.GreenDrivingValue
	}
	return 0
}

func (x *Compact) GetJamming() bool {
	if x != nil && x.Jamming != nil {
		return *x.Jamming
	}
	return false
}

func (x *Compact) GetIccid2() uint64 {
	if x != nil && x.Iccid2 != nil {
		return *x.Iccid2
	}
	return 0
}

func (x *Compact) GetGreenDrivingEventDuration() uint32 {
	if x != nil && x.GreenDrivingEventDuration != nil {
		return *x.GreenDrivingEventDuration
	}
	return 0
}

func (x *Compact) GetAlarm() bool {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return false
}

func (x *Compact) GetEcoMaximum() uint64 {
	if x != nil && x.EcoMaximum != nil {
		return *x.EcoMaximum
	}
	return 0
}

func (x *Compact) GetEcoAverage() uint64 {
	if x != nil && x.EcoAverage != nil {
		return *x.EcoAverage
	}
	return 0
}

func (x *Compact) GetEcoDuration() uint32 {
	if x != nil && x.EcoDuration != nil {
		return *x.EcoDuration
	}
	return 0
}

func (x *Compact) GetDrivingState() uint32 {
	if x != nil && x.DrivingState != nil {
		return *x.DrivingState
	}
	return 0
}

func (x *Compact) GetDrivingRecords() uint32 {
	if x != nil && x.DrivingRecords != nil {
		return *x.DrivingRecords
	}
	return 0
}

func (x *Compact) GetCrashEventCounter() uint32 {
	if x != nil && x.CrashEventCounter != nil {
		return *x.CrashEventCounter
	}
	return 0
}

func (x *Compact) GetGnssJamming() uint32 {
	if x != nil && x.GnssJamming != nil {
		return *x.GnssJamming
	}
	return 0
}

func (x *Compact) GetPrivateMode() uint32 {
	if x != nil && x.PrivateMode != nil {
		return *x.PrivateMode
	}
	return 0
}

func (x *Compact) GetIgnitionOnCounter() uint32 {
	if x != nil && x.IgnitionOnCounter != nil {
		return *x.IgnitionOnCounter
	}
	return 0
}

func (x *Compact) GetMotorcycleFallDetection() uint32 {
	if x != nil && x.MotorcycleFallDetection != nil {
		return *x.MotorcycleFallDetection
	}
	return 0
}

func (x *Compact) GetVin() string {
	if x != nil && x.Vin != nil {
		return *x.Vin
	}
	return ""
}

func (x *Compact) GetNumberOfDtc() uint32 {
	if x != nil && x.NumberOfDtc != nil {
		return *x.NumberOfDtc
	}
	return 0
}

func (x *Compact) GetEngineLoad() uint32 {
	if x != nil && x.EngineLoad != nil {
		return *x.EngineLoad
	}
	return 0
}

func (x *Compact) GetCoolantTemperature() int32 {
	if x != nil && x.CoolantTemperature != nil {
		return *x.CoolantTemperature
	}
	return 0
}

func (x *Compact) GetShortFuelTrim() int32 {
	if x != nil && x.ShortFuelTrim != nil {
		return *x.ShortFuelTrim
	}
	return 0
}

func (x *Compact) GetFuelPressure() uint32 {
	if x != nil && x.FuelPressure != nil {
		return *x.FuelPressure
	}
	return 0
}

func (x *Compact) GetIntakeMap() uint32 {
	if x != nil && x.IntakeMap != nil {
		return *x.IntakeMap
	}
	return 0
}

func (x *Compact) GetEngineRpm() uint32 {
	if x != nil && x.EngineRpm != nil {
		return *x.EngineRpm
	}
	return 0
}

func (x *Compact) GetVehicleSpeed() uint32 {
	if x != nil && x.VehicleSpeed != nil {
		return *x.VehicleSpeed
	}
	return 0
}

func (x *Compact) GetTimingAdvance() int32 {
	if x != nil && x.TimingAdvance != nil {
		return *x.TimingAdvance
	}
	return 0
}

func (x *Compact) GetIntakeAirTemperature() int32 {
	if x != nil && x.IntakeAirTemperature != nil {
		return *x.IntakeAirTemperature
	}
	return 0
}

func (x *Compact) GetMaf() uint32 {
	if x != nil && x.Maf != nil {
		return *x.Maf
	}
	return 0
}

func (x *Compact) GetThrottlePosition() uint32 {
	if x != nil && x.ThrottlePosition != nil {
		return *x.ThrottlePosition
	}
	return 0
}

func (x *Compact) GetRuntimeSinceEngineStart() uint32 {
	if x != nil && x.RuntimeSinceEngineStart != nil {
		return *x.RuntimeSinceEngineStart
	}
	return 0
}

func (x *Compact) GetDistanceTraveledMilOn() uint32 {
	if x != nil && x.DistanceTraveledMilOn != nil {
		return *x.DistanceTraveledMilOn
	}
	return 0
}

func (x *Compact) GetRelativeFuelRailPressure() uint32 {
	if x != nil && x.RelativeFuelRailPressure != nil {
		return *x.RelativeFuelRailPressure
	}
	return 0
}

func (x *Compact) GetDirectFuelRailPressure() uint32 {
	if x != nil && x.DirectFuelRailPressure != nil {
		return *x.DirectFuelRailPressure
	}
	return 0
}

func (x *Compact) GetCommandedEgr() uint32 {
	if x != nil && x.CommandedEgr != nil {
		return *x.CommandedEgr
	}
	return 0
}

func (x *Compact) GetEgrError() int32 {
	if x != nil && x.EgrError != nil {
		return *x.EgrError
	}
	return 0
}

func (x *Compact) GetFuelLevelPercent() uint32 {
	if x != nil && x.FuelLevelPercent != nil {
		return *x.FuelLevelPercent
	}
	return 0
}

func (x *Compact) GetDistanceSinceCodesClear() uint32 {
	if x != nil && x.DistanceSinceCodesClear != nil {
		return *x.DistanceSinceCodesClear
	}
	return 0
}

func (x *Compact) GetBarometricPressure() uint32 {
	if x != nil && x.BarometricPressure != nil {
		return *x.BarometricPressure
	}
	return 0
}

func (x *Compact) GetControlModuleVoltage() uint32 {
	if x != nil && x.ControlModuleVoltage != nil {
		return *x.ControlModuleVoltage
	}
	return 0
}

func (x *Compact) GetAbsoluteLoadValue() uint32 {
	if x != nil && x.AbsoluteLoadValue != nil {
		return *x.AbsoluteLoadValue
	}
	return 0
}

func (x *Compact) GetFuelType() uint32 {
	if x != nil && x.FuelType != nil {
		return *x.FuelType
	}
	return 0
}

func (x *Compact) GetAmbientAirTemperature() int32 {
	if x != nil && x.AmbientAirTemperature != nil {
		return *x.AmbientAirTemperature
	}
	return 0
}

func (x *Compact) GetTimeRunWithMilOn() uint32 {
	if x != nil && x.TimeRunWithMilOn != nil {
		return *x.TimeRunWithMilOn
	}
	return 0
}

func (x *Compact) GetTimeSinceCodesCleared() uint32 {
	if x != nil && x.TimeSinceCodesCleared != nil {
		return *x.TimeSinceCodesCleared
	}
	return 0
}

func (x *Compact) GetAbsoluteFuelRailPressure() uint32 {
	if x != nil && x.AbsoluteFuelRailPressure != nil {
		return *x.AbsoluteFuelRailPressure
	}
	return 0
}

func (x *Compact) GetHybridBatteryPackLife() uint32 {
	if x != nil && x.HybridBatteryPackLife != nil {
		return *x.HybridBatteryPackLife
	}
	return 0
}

func (x *Compact) GetEngineOilTemperature() uint32 {
	if x != nil && x.EngineOilTemperature != nil {
		return *x.EngineOilTemperature
	}
	return 0
}

func (x *Compact) GetFuelInjectionTiming() int32 {
	if x != nil && x.FuelInjectionTiming != nil {
		return *x.FuelInjectionTiming
	}
	return 0
}

func (x *Compact) GetThrottlePositionGroup() uint32 {
	if x != nil && x.ThrottlePositionGroup != nil {
		return *x.ThrottlePositionGroup
	}
	return 0
}

func (x *Compact) GetCommandedEquivalenceR() uint32 {
	if x != nil && x.CommandedEquivalenceR != nil {
		return *x.CommandedEquivalenceR
	}
	return 0
}

func (x *Compact) GetIntakeMap2Bytes() uint32 {
	if x != nil && x.IntakeMap2Bytes != nil {
		return *x.IntakeMap2Bytes
	}
	return 0
}

func (x *Compact) GetHybridSystemVoltage() uint32 {
	if x != nil && x.HybridSystemVoltage != nil {
		return *x.HybridSystemVoltage
	}
	return 0
}

func (x *Compact) GetHybridSystemCurrent() int32 {
	if x != nil && x.HybridSystemCurrent != nil {
		return *x.HybridSystemCurrent
	}
	return 0
}

func (x *Compact) GetFaultCodes() string {
	if x != nil && x.FaultCodes != nil {
		return *x.FaultCodes
	}
	return ""
}

func (x *Compact) GetFuelRate() uint32 {
	if x != nil && x.FuelRate != nil {
		return *x.FuelRate
	}
	return 0
}

func (x *Compact) GetObdOemTotalMileage() uint32 {
	if x != nil && x.ObdOemTotalMileage != nil {
		return *x.ObdOemTotalMileage
	}
	return 0
}

func (x *Compact) GetObdOemFuelLevel() uint32 {
	if x != nil && x.ObdOemFuelLevel != nil {
		return *x.ObdOemFuelLevel
	}
	return 0
}

func (x *Compact) GetOemDistanceUntilService() uint32 {
	if x != nil && x.OemDistanceUntilService != nil {
		return *x.OemDistanceUntilService
	}
	return 0
}

func (x *Compact) GetOemBatteryChargeState() bool {
	if x != nil && x.OemBatteryChargeState != nil {
		return *x.OemBatteryChargeState
	}
	return false
}

func (x *Compact) GetOemBatteryChargeLevel() uint32 {
	if x != nil && x.OemBatteryChargeLevel != nil {
		return *x.OemBatteryChargeLevel
	}
	return 0
}

func (x *Compact) GetOemRemainingDistance() uint32 {
	if x != nil && x.OemRemainingDistance != nil {
		return *x.OemRemainingDistance
	}
	return 0
}

func (x *Compact) GetOemBatteryStateOfHealth() uint32 {
	if x != nil && x.OemBatteryStateOfHealth != nil {
		return *x.OemBatteryStateOfHealth
	}
	return 0
}

func (x *Compact) GetOemBatteryTemperature() int32 {
	if x != nil && x.OemBatteryTemperature != nil {
		return *x.OemBatteryTemperature
	}
	return 0
}

func (x *Compact) GetBeacon() []byte {
	if x != nil {
		return x.Beacon
	}
	return nil
}

func (x *Compact) GetAdvancedBleBeaconData() []byte {
	if x != nil {
		return x.AdvancedBleBeaconData
	}
	return nil
}

func (x *Compact) GetBleTemperature1() int32 {
	if x != nil && x.BleTemperature1 != nil {
		return *x.BleTemperature1
	}
	return 0
}

func (x *Compact) GetBleTemperature2() int32 {
	if x != nil && x.BleTemperature2 != nil {
		return *x.BleTemperature2
	}
	return 0
}

func (x *Compact) GetBleTemperature3() int32 {
	if x != nil && x.BleTemperature3 != nil {
		return *x.BleTemperature3
	}
	return 0
}

func (x *Compact) GetBleTemperature4() int32 {
	if x != nil && x.BleTemperature4 != nil {
		return *x.BleTemperature4
	}
	return 0
}

func (x *Compact) GetBleBattery1() uint32 {
	if x != nil && x.BleBattery1 != nil {
		return *x.BleBattery1
	}
	return 0
}

func (x *Compact) GetBleBattery2() uint32 {
	if x != nil && x.BleBattery2 != nil {
		return *x.BleBattery2
	}
	return 0
}

func (x *Compact) GetBleBattery3() uint32 {
	if x != nil && x.BleBattery3 != nil {
		return *x.BleBattery3
	}
	return 0
}

func (x *Compact) GetBleBattery4() uint32 {
	if x != nil && x.BleBattery4 != nil {
		return *x.BleBattery4
	}
	return 0
}

func (x *Compact) GetBleHumidity1() uint32 {
	if x != nil && x.BleHumidity1 != nil {
		return *x.BleHumidity1
	}
	return 0
}

func (x *Compact) GetBleHumidity2() uint32 {
	if x != nil && x.BleHumidity2 != nil {
		return *x.BleHumidity2
	}
	return 0
}

func (x *Compact) GetBleHumidity3() uint32 {
	if x != nil && x.BleHumidity3 != nil {
		return *x.BleHumidity3
	}
	return 0
}

func (x *Compact) GetBleHumidity4() uint32 {
	if x != nil && x.BleHumidity4 != nil {
		return *x.BleHumidity4
	}
	return 0
}

func (x *Compact) GetBleFuelLevel1() uint32 {
	if x != nil && x.BleFuelLevel1 != nil {
		return *x.BleFuelLevel1
	}
	return 0
}

func (x *Compact) GetBleFuelLevel2() uint32 {
	if x != nil && x.BleFuelLevel2 != nil {
		return *x.BleFuelLevel2
	}
	return 0
}

func (x *Compact) GetBleFuelLevel3() uint32 {
	if x != nil && x.BleFuelLevel3 != nil {
		return *x.BleFuelLevel3
	}
	return 0
}

func (x *Compact) GetBleFuelLevel4() uint32 {
	if x != nil && x.BleFuelLevel4 != nil {
		return *x.BleFuelLevel4
	}
	return 0
}

func (x *Compact) GetBleFuelFrequency1() uint32 {
	if x != nil && x.BleFuelFrequency1 != nil {
		return *x.BleFuelFrequency1
	}
	return 0
}

func (x *Compact) GetBleFuelFrequency2() uint32 {
	if x != nil && x.BleFuelFrequency2 != nil {
		return *x.BleFuelFrequency2
	}
	return 0
}

func (x *Compact) GetBleFuelFrequency3() uint32 {
	if x != nil && x.BleFuelFrequency3 != nil {
		return *x.BleFuelFrequency3
	}
	return 0
}

func (x *Compact) GetBleFuelFrequency4() uint32 {
	if x != nil && x.BleFuelFrequency4 != nil {
		return *x.BleFuelFrequency4
	}
	return 0
}

func (x *Compact) GetBleLuminosity1() uint32 {
	if x != nil && x.BleLuminosity1 != nil {
		return *x.BleLuminosity1
	}
	return 0
}

func (x *Compact) GetBleLuminosity2() uint32 {
	if x != nil && x.BleLuminosity2 != nil {
		return *x.BleLuminosity2
	}
	return 0
}

func (x *Compact) GetBleLuminosity3() uint32 {
	if x != nil && x.BleLuminosity3 != nil {
		return *x.BleLuminosity3
	}
	return 0
}

func (x *Compact) GetBleLuminosity4() uint32 {
	if x != nil && x.BleLuminosity4 != nil {
		return *x.BleLuminosity4
	}
	return 0
}

func (x *Compact) GetBle1Custom1() []byte {
	if x != nil {
		return x.Ble1Custom1
	}
	return nil
}

func (x *Compact) GetBle1Custom2() uint32 {
	if x != nil && x.Ble1Custom2 != nil {
		return *x.Ble1Custom2
	}
	return 0
}

func (x *Compact) GetBle1Custom3() uint32 {
	if x != nil && x.Ble1Custom3 != nil {
		return *x.Ble1Custom3
	}
	return 0
}

func (x *Compact) GetBle1Custom4() uint32 {
	if x != nil && x.Ble1Custom4 != nil {
		return *x.Ble1Custom4
	}
	return 0
}

func (x *Compact) GetBle1Custom5() uint32 {
	if x != nil && x.Ble1Custom5 != nil {
		return *x.Ble1Custom5
	}
	return 0
}

func (x *Compact) GetBle2Custom1() []byte {
	if x != nil {
		return x.Ble2Custom1
	}
	return nil
}

func (x *Compact) GetBle2Custom2() uint32 {
	if x != nil && x.Ble2Custom2 != nil {
		return *x.Ble2Custom2
	}
	return 0
}

func (x *Compact) GetBle2Custom3() uint32 {
	if x != nil && x.Ble2Custom3 != nil {
		return *x.Ble2Custom3
	}
	return 0
}

func (x *Compact) GetBle2Custom4() uint32 {
	if x != nil && x.Ble2Custom4 != nil {
		return *x.Ble2Custom4
	}
	return 0
}

func (x *Compact) GetBle2Custom5() uint32 {
	if x != nil && x.Ble2Custom5 != nil {
		return *x.Ble2Custom5
	}
	return 0
}

func (x *Compact) GetBle3Custom1() []byte {
	if x != nil {
		return x.Ble3Custom1
	}
	return nil
}

func (x *Compact) GetBle3Custom2() uint32 {
	if x != nil && x.Ble3Custom2 != nil {
		return *x.Ble3Custom2
	}
	return 0
}

func (x *Compact) GetBle3Custom3() uint32 {
	if x != nil && x.Ble3Custom3 != nil {
		return *x.Ble3Custom3
	}
	return 0
}

func (x *Compact) GetBle3Custom4() uint32 {
	if x != nil && x.Ble3Custom4 != nil {
		return *x.Ble3Custom4
	}
	return 0
}

func (x *Compact) GetBle3Custom5() uint32 {
	if x != nil && x.Ble3Custom5 != nil {
		return *x.Ble3Custom5
	}
	return 0
}

func (x *Compact) GetBle4Custom1() []byte {
	if x != nil {
		return x.Ble4Custom1
	}
	return nil
}

func (x *Compact) GetBle4Custom2() uint32 {
	if x != nil && x.Ble4Custom2 != nil {
		return *x.Ble4Custom2
	}
	return 0
}

func (x *Compact) GetBle4Custom3() uint32 {
	if x != nil && x.Ble4Custom3 != nil {
		return *x.Ble4Custom3
	}
	return 0
}

func (x *Compact) GetBle4Custom4() uint32 {
	if x != nil && x.Ble4Custom4 != nil {
		return *x.Ble4Custom4
	}
	return 0
}

func (x *Compact) GetBle4Custom5() uint32 {
	if x != nil && x.Ble4Custom5 != nil {
		return *x.Ble4Custom5
	}
	return 0
}

func (x *Compact) GetAcceleratorPedalPosition() uint32 {
	if x != nil && x.AcceleratorPedalPosition != nil {
		return *x.AcceleratorPedalPosition
	}
	return 0
}

func (x *Compact) GetFuelConsumed() uint32 {
	if x != nil && x.FuelConsumed != nil {
		return *x.FuelConsumed
	}
	return 0
}

func (x *Compact) GetFuelLevelLiters() uint32 {
	if x != nil && x.FuelLevelLiters != nil {
		return *x.FuelLevelLiters
	}
	return 0
}

func (x *Compact) GetTotalMileage() uint32 {
	if x != nil && x.TotalMileage != nil {
		return *x.TotalMileage
	}
	return 0
}

func (x *Compact) GetProgramNumber() uint32 {
	if x != nil && x.ProgramNumber != nil {
		return *x.ProgramNumber
	}
	return 0
}

func (x *Compact) GetModuleId8B() uint64 {
	if x != nil && x.ModuleId8B != nil {
		return *x.ModuleId8B
	}
	return 0
}

func (x *Compact) GetModuleId17B() []byte {
	if x != nil {
		return x.ModuleId17B
	}
	return nil
}

func (x *Compact) GetEngineWorktime() uint32 {
	if x != nil && x.EngineWorktime != nil {
		return *x.EngineWorktime
	}
	return 0
}

func (x *Compact) GetEngineWorktimeCounted() uint32 {
	if x != nil && x.EngineWorktimeCounted != nil {
		return *x.EngineWorktimeCounted
	}
	return 0
}

func (x *Compact) GetTotalMileageCounted() uint32 {
	if x != nil && x.TotalMileageCounted != nil {
		return *x.TotalMileageCounted
	}
	return 0
}

func (x *Compact) GetFuelConsumedCounted() uint32 {
	if x != nil && x.FuelConsumedCounted != nil {
		return *x.FuelConsumedCounted
	}
	return 0
}

func (x *Compact) GetAdblueLevelPercent() uint32 {
	if x != nil && x.AdblueLevelPercent != nil {
		return *x.AdblueLevelPercent
	}
	return 0
}

func (x *Compact) GetAdblueLevelLiters() uint32 {
	if x != nil && x.AdblueLevelLiters != nil {
		return *x.AdblueLevelLiters
	}
	return 0
}

func (x *Compact) GetAxle1Load() uint32 {
	if x != nil && x.Axle1Load != nil {
		return *x.Axle1Load
	}
	return 0
}

func (x *Compact) GetAxle2Load() uint32 {
	if x != nil && x.Axle2Load != nil {
		return *x.Axle2Load
	}
	return 0
}

func (x *Compact) GetAxle3Load() uint32 {
	if x != nil && x.Axle3Load != nil {
		return *x.Axle3Load
	}
	return 0
}

func (x *Compact) GetAxle4Load() uint32 {
	if x != nil && x.Axle4Load != nil {
		return *x.Axle4Load
	}
	return 0
}

func (x *Compact) GetAxle5Load() uint32 {
	if x != nil && x.Axle5Load != nil {
		return *x.Axle5Load
	}
	return 0
}

func (x *Compact) GetControlStateFlags() uint32 {
	if x != nil && x.ControlStateFlags != nil {
		return *x.ControlStateFlags
	}
	return 0
}

func (x *Compact) GetAgriculturalMachineryFlags() uint64 {
	if x != nil && x.AgriculturalMachineryFlags != nil {
		return *x.AgriculturalMachineryFlags
	}
	return 0
}

func (x *Compact) GetHarvestingTime() uint32 {
	if x != nil && x.HarvestingTime != nil {
		return *x.HarvestingTime
	}
	return 0
}

func (x *Compact) GetAreaOfHarvest() uint32 {
	if x != nil && x.AreaOfHarvest != nil {
		return *x.AreaOfHarvest
	}
	return 0
}

func (x *Compact) GetMowingEfficiency() uint32 {
	if x != nil && x.MowingEfficiency != nil {
		return *x.MowingEfficiency
	}
	return 0
}

func (x *Compact) GetGrainMownVolume() uint32 {
	if x != nil && x.GrainMownVolume != nil {
		return *x.GrainMownVolume
	}
	return 0
}

func (x *Compact) GetGrainMoisture() uint32 {
	if x != nil && x.GrainMoisture != nil {
		return *x.GrainMoisture
	}
	return 0
}

func (x *Compact) GetHarvestingDrumRpm() uint32 {
	if x != nil && x.HarvestingDrumRpm != nil {
		return *x.HarvestingDrumRpm
	}
	return 0
}

func (x *Compact) GetGapUnderHarvestingDrum() uint32 {
	if x != nil && x.GapUnderHarvestingDrum != nil {
		return *x.GapUnderHarvestingDrum
	}
	return 0
}

func (x *Compact) GetSecurityStateFlags() uint64 {
	if x != nil && x.SecurityStateFlags != nil {
		return *x.SecurityStateFlags
	}
	return 0
}

func (x *Compact) GetTachographTotalVehicleDistance() uint32 {
	if x != nil && x.TachographTotalVehicleDistance != nil {
		return *x.TachographTotalVehicleDistance
	}
	return 0
}

func (x *Compact) GetTripDistance() uint32 {
	if x != nil && x.TripDistance != nil {
		return *x.TripDistance
	}
	return 0
}

func (x *Compact) GetTachographVehicleSpeed() uint32 {
	if x != nil && x.TachographVehicleSpeed != nil {
		return *x.TachographVehicleSpeed
	}
	return 0
}

func (x *Compact) GetTachoDriverCardPresence() uint32 {
	if x != nil && x.TachoDriverCardPresence != nil {
		return *x.TachoDriverCardPresence
	}
	return 0
}

func (x *Compact) GetDriver1States() uint32 {
	if x != nil && x.Driver1States != nil {
		return *x.Driver1States
	}
	return 0
}

func (x *Compact) GetDriver2States() uint32 {
	if x != nil && x.Driver2States != nil {
		return *x.Driver2States
	}
	return 0
}

func (x *Compact) GetDriver1ContinuousDrivingTime() uint32 {
	if x != nil && x.Driver1ContinuousDrivingTime != nil {
		return *x.Driver1ContinuousDrivingTime
	}
	return 0
}

func (x *Compact) GetDriver2ContinuousDrivingTime() uint32 {
	if x != nil && x.Driver2ContinuousDrivingTime != nil {
		return *x.Driver2ContinuousDrivingTime
	}
	return 0
}

func (x *Compact) GetDriver1CumulativeTime() uint32 {
	if x != nil && x.Driver1CumulativeTime != nil {
		return *x.Driver1CumulativeTime
	}
	return 0
}

func (x *Compact) GetDriver2CumulativeTime() uint32 {
	if x != nil && x.Driver2CumulativeTime != nil {
		return *x.Driver2CumulativeTime
	}
	return 0
}

func (x *Compact) GetDriver1SelectedActivityDuration() uint32 {
	if x != nil && x.Driver1SelectedActivityDuration != nil {
		return *x.Driver1SelectedActivityDuration
	}
	return 0
}

func (x *Compact) GetDriver2SelectedActivityDuration() uint32 {
	if x != nil && x.Driver2SelectedActivityDuration != nil {
		return *x.Driver2SelectedActivityDuration
	}
	return 0
}

func (x *Compact) GetDriver1CumulativeDrivingTime() uint32 {
	if x != nil && x.Driver1CumulativeDrivingTime != nil {
		return *x.Driver1CumulativeDrivingTime
	}
	return 0
}

func (x *Compact) GetDriver2CumulativeDrivingTime() uint32 {
	if x != nil && x.Driver2CumulativeDrivingTime != nil {
		return *x.Driver2CumulativeDrivingTime
	}
	return 0
}

func (x *Compact) GetDriver1IdHigh() uint64 {
	if x != nil && x.Driver1IdHigh != nil {
		return *x.Driver1IdHigh
	}
	return 0
}

func (x *Compact) GetDriver1IdLow() uint64 {
	if x != nil && x.Driver1IdLow != nil {
		return *x.Driver1IdLow
	}
	return 0
}

func (x *Compact) GetDriver2IdHigh() uint64 {
	if x != nil && x.Driver2IdHigh != nil {
		return *x.Driver2IdHigh
	}
	return 0
}

func (x *Compact) GetDriver2IdLow() uint64 {
	if x != nil && x.Driver2IdLow != nil {
		return *x.Driver2IdLow
	}
	return 0
}

func (x *Compact) GetBatteryTemperature() int32 {
	if x != nil && x.BatteryTemperature != nil {
		return *x.BatteryTemperature
	}
	return 0
}

func (x *Compact) GetHvBatteryLevel() uint32 {
	if x != nil && x.HvBatteryLevel != nil {
		return *x.HvBatteryLevel
	}
	return 0
}

func (x *Compact) GetDtcFaults() uint32 {
	if x != nil && x.DtcFaults != nil {
		return *x.DtcFaults
	}
	return 0
}

func (x *Compact) GetSlopeOfArm() int32 {
	if x != nil && x.SlopeOfArm != nil {
		return *x.SlopeOfArm
	}
	return 0
}

func (x *Compact) GetRotationOfArm() int32 {
	if x != nil && x.RotationOfArm != nil {
		return *x.RotationOfArm
	}
	return 0
}

func (x *Compact) GetEjectOfArm() uint32 {
	if x != nil && x.EjectOfArm != nil {
		return *x.EjectOfArm
	}
	return 0
}

func (x *Compact) GetHorizontalDistanceArmVehicle() uint32 {
	if x != nil && x.HorizontalDistanceArmVehicle != nil {
		return *x.HorizontalDistanceArmVehicle
	}
	return 0
}

func (x *Compact) GetHeightArmAboveGround() uint32 {
	if x != nil && x.HeightArmAboveGround != nil {
		return *x.HeightArmAboveGround
	}
	return 0
}

func (x *Compact) GetDrillRpm() uint32 {
	if x != nil && x.DrillRpm != nil {
		return *x.DrillRpm
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadSaltSquareMeter() uint32 {
	if x != nil && x.AmountOfSpreadSaltSquareMeter != nil {
		return *x.AmountOfSpreadSaltSquareMeter
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadFineGrainedSalt() uint32 {
	if x != nil && x.AmountOfSpreadFineGrainedSalt != nil {
		return *x.AmountOfSpreadFineGrainedSalt
	}
	return 0
}

func (x *Compact) GetAmountOfCoarseGrainedSalt() uint32 {
	if x != nil && x.AmountOfCoarseGrainedSalt != nil {
		return *x.AmountOfCoarseGrainedSalt
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadDimix() uint32 {
	if x != nil && x.AmountOfSpreadDimix != nil {
		return *x.AmountOfSpreadDimix
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadCoarseGrainedCalcium() uint32 {
	if x != nil && x.AmountOfSpreadCoarseGrainedCalcium != nil {
		return *x.AmountOfSpreadCoarseGrainedCalcium
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadCalciumChloride() uint32 {
	if x != nil && x.AmountOfSpreadCalciumChloride != nil {
		return *x.AmountOfSpreadCalciumChloride
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadSodiumChloride() uint32 {
	if x != nil && x.AmountOfSpreadSodiumChloride != nil {
		return *x.AmountOfSpreadSodiumChloride
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadMagnesiumChloride() uint32 {
	if x != nil && x.AmountOfSpreadMagnesiumChloride != nil {
		return *x.AmountOfSpreadMagnesiumChloride
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadGravel() uint32 {
	if x != nil && x.AmountOfSpreadGravel != nil {
		return *x.AmountOfSpreadGravel
	}
	return 0
}

func (x *Compact) GetAmountOfSpreadSand() uint32 {
	if x != nil && x.AmountOfSpreadSand != nil {
		return *x.AmountOfSpreadSand
	}
	return 0
}

func (x *Compact) GetWidthPouringLeft() uint32 {
	if x != nil && x.WidthPouringLeft != nil {
		return *x.WidthPouringLeft
	}
	return 0
}

func (x *Compact) GetWidthPouringRight() uint32 {
	if x != nil && x.WidthPouringRight != nil {
		return *x.WidthPouringRight
	}
	return 0
}

func (x *Compact) GetSaltSpreaderWorkingHours() uint32 {
	if x != nil && x.SaltSpreaderWorkingHours != nil {
		return *x.SaltSpreaderWorkingHours
	}
	return 0
}

func (x *Compact) GetDistanceDuringSalting() uint32 {
	if x != nil && x.DistanceDuringSalting != nil {
		return *x.DistanceDuringSalting
	}
	return 0
}

func (x *Compact) GetLoadWeight() uint32 {
	if x != nil && x.LoadWeight != nil {
		return *x.LoadWeight
	}
	return 0
}

func (x *Compact) GetRetarderLoad() uint32 {
	if x != nil && x.RetarderLoad != nil {
		return *x.RetarderLoad
	}
	return 0
}

func (x *Compact) GetCruiseTime() uint32 {
	if x != nil && x.CruiseTime != nil {
		return *x.CruiseTime
	}
	return 0
}

func (x *Compact) GetCngStatus() bool {
	if x != nil && x.CngStatus != nil {
		return *x.CngStatus
	}
	return false
}

func (x *Compact) GetCngUsed() uint32 {
	if x != nil && x.CngUsed != nil {
		return *x.CngUsed
	}
	return 0
}

func (x *Compact) GetCngLevelPercent() uint32 {
	if x != nil && x.CngLevelPercent != nil {
		return *x.CngLevelPercent
	}
	return 0
}

func (x *Compact) GetOilLevel() bool {
	if x != nil && x.OilLevel != nil {
		return *x.OilLevel
	}
	return false
}

func (x *Compact) GetVehiclesRangeOnBattery() uint32 {
	if x != nil && x.VehiclesRangeOnBattery != nil {
		return *x.VehiclesRangeOnBattery
	}
	return 0
}

func (x *Compact) GetVehiclesRangeOnAdditionalFuel() uint32 {
	if x != nil && x.VehiclesRangeOnAdditionalFuel != nil {
		return *x.VehiclesRangeOnAdditionalFuel
	}
	return 0
}

func (x *Compact) GetSecurityStateFlagsP4() []byte {
	if x != nil {
		return x.SecurityStateFlagsP4
	}
	return nil
}

func (x *Compact) GetControlStateFlagsP4() []byte {
	if x != nil {
		return x.ControlStateFlagsP4
	}
	return nil
}

func (x *Compact) GetIndicatorStateFlagsP4() []byte {
	if x != nil {
		return x.IndicatorStateFlagsP4
	}
	return nil
}

func (x *Compact) GetAgriculturalStateFlagsP4() []byte {
	if x != nil {
		return x.AgriculturalStateFlagsP4
	}
	return nil
}

func (x *Compact) GetDoorStatus() uint32 {
	if x != nil && x.DoorStatus != nil {
		return *x.DoorStatus
	}
	return 0
}

func (x *Compact) GetEngineTemperature() int32 {
	if x != nil && x.EngineTemperature != nil {
		return *x.EngineTemperature
	}
	return 0
}

func (x *Compact) GetUtilityStateFlagsP4() uint64 {
	if x != nil && x.UtilityStateFlagsP4 != nil {
		return *x.UtilityStateFlagsP4
	}
	return 0
}

func (x *Compact) GetCisternStateFlagsP4() uint64 {
	if x != nil && x.CisternStateFlagsP4 != nil {
		return *x.CisternStateFlagsP4
	}
	return 0
}

func (x *Compact) GetLngUsed() uint32 {
	if x != nil && x.LngUsed != nil {
		return *x.LngUsed
	}
	return 0
}

func (x *Compact) GetLngUsedCounted() uint32 {
	if x != nil && x.LngUsedCounted != nil {
		return *x.LngUsedCounted
	}
	return 0
}

func (x *Compact) GetLngLevelPercent() uint32 {
	if x != nil && x.LngLevelPercent != nil {
		return *x.LngLevelPercent
	}
	return 0
}

func (x *Compact) GetLngLevelKg() uint32 {
	if x != nil && x.LngLevelKg != nil {
		return *x.LngLevelKg
	}
	return 0
}

func (x *Compact) GetTotalLpgUsed() uint32 {
	if x != nil && x.TotalLpgUsed != nil {
		return *x.TotalLpgUsed
	}
	return 0
}

func (x *Compact) GetTotalLpgUsedCounted() uint32 {
	if x != nil && x.TotalLpgUsedCounted != nil {
		return *x.TotalLpgUsedCounted
	}
	return 0
}

func (x *Compact) GetLpgLevelProc() uint32 {
	if x != nil && x.LpgLevelProc != nil {
		return *x.LpgLevelProc
	}
	return 0
}

func (x *Compact) GetLpgLevelLiters() uint32 {
	if x != nil && x.LpgLevelLiters != nil {
		return *x.LpgLevelLiters
	}
	return 0
}

func (x *Compact) GetSsfIgnition() bool {
	if x != nil && x.SsfIgnition != nil {
		return *x.SsfIgnition
	}
	return false
}

func (x *Compact) GetSsfKeyInIgnitionLock() bool {
	if x != nil && x.SsfKeyInIgnitionLock != nil {
		return *x.SsfKeyInIgnitionLock
	}
	return false
}

func (x *Compact) GetSsfWebasto() bool {
	if x != nil && x.SsfWebasto != nil {
		return *x.SsfWebasto
	}
	return false
}

func (x *Compact) GetSsfEngineWorking() bool {
	if x != nil && x.SsfEngineWorking != nil {
		return *x.SsfEngineWorking
	}
	return false
}

func (x *Compact) GetSsfStandaloneEngine() bool {
	if x != nil && x.SsfStandaloneEngine != nil {
		return *x.SsfStandaloneEngine
	}
	return false
}

func (x *Compact) GetSsfReadyToDrive() bool {
	if x != nil && x.SsfReadyToDrive != nil {
		return *x.SsfReadyToDrive
	}
	return false
}

func (x *Compact) GetSsfEngineWorkingOnCng() bool {
	if x != nil && x.SsfEngineWorkingOnCng != nil {
		return *x.SsfEngineWorkingOnCng
	}
	return false
}

func (x *Compact) GetSsfWorkMode() bool {
	if x != nil && x.SsfWorkMode != nil {
		return *x.SsfWorkMode
	}
	return false
}

func (x *Compact) GetSsfOperator() bool {
	if x != nil && x.SsfOperator != nil {
		return *x.SsfOperator
	}
	return false
}

func (x *Compact) GetSsfInterlock() bool {
	if x != nil && x.SsfInterlock != nil {
		return *x.SsfInterlock
	}
	return false
}

func (x *Compact) GetSsfEngineLockActive() bool {
	if x != nil && x.SsfEngineLockActive != nil {
		return *x.SsfEngineLockActive
	}
	return false
}

func (x *Compact) GetSsfRequestToLockEngine() bool {
	if x != nil && x.SsfRequestToLockEngine != nil {
		return *x.SsfRequestToLockEngine
	}
	return false
}

func (x *Compact) GetSsfHandbrakeIsActive() bool {
	if x != nil && x.SsfHandbrakeIsActive != nil {
		return *x.SsfHandbrakeIsActive
	}
	return false
}

func (x *Compact) GetSsfFootbrakeIsActive() bool {
	if x != nil && x.SsfFootbrakeIsActive != nil {
		return *x.SsfFootbrakeIsActive
	}
	return false
}

func (x *Compact) GetSsfClutchPushed() bool {
	if x != nil && x.SsfClutchPushed != nil {
		return *x.SsfClutchPushed
	}
	return false
}

func (x *Compact) GetSsfHazardWarningLights() bool {
	if x != nil && x.SsfHazardWarningLights != nil {
		return *x.SsfHazardWarningLights
	}
	return false
}

func (x *Compact) GetSsfFrontLeftDoorOpen() bool {
	if x != nil && x.SsfFrontLeftDoorOpen != nil {
		return *x.SsfFrontLeftDoorOpen
	}
	return false
}

func (x *Compact) GetSsfFrontRightDoorOpen() bool {
	if x != nil && x.SsfFrontRightDoorOpen != nil {
		return *x.SsfFrontRightDoorOpen
	}
	return false
}

func (x *Compact) GetSsfRearLeftDoorOpen() bool {
	if x != nil && x.SsfRearLeftDoorOpen != nil {
		return *x.SsfRearLeftDoorOpen
	}
	return false
}

func (x *Compact) GetSsfRearRightDoorOpen() bool {
	if x != nil && x.SsfRearRightDoorOpen != nil {
		return *x.SsfRearRightDoorOpen
	}
	return false
}

func (x *Compact) GetSsfTrunkDoorOpen() bool {
	if x != nil && x.SsfTrunkDoorOpen != nil {
		return *x.SsfTrunkDoorOpen
	}
	return false
}

func (x *Compact) GetSsfEngineCoverOpen() bool {
	if x != nil && x.SsfEngineCoverOpen != nil {
		return *x.SsfEngineCoverOpen
	}
	return false
}

func (x *Compact) GetSsfRoofOpen() bool {
	if x != nil && x.SsfRoofOpen != nil {
		return *x.SsfRoofOpen
	}
	return false
}

func (x *Compact) GetSsfChargingWirePlugged() bool {
	if x != nil && x.SsfChargingWirePlugged != nil {
		return *x.SsfChargingWirePlugged
	}
	return false
}

func (x *Compact) GetSsfBatteryCharging() bool {
	if x != nil && x.SsfBatteryCharging != nil {
		return *x.SsfBatteryCharging
	}
	return false
}

func (x *Compact) GetSsfElectricEngineState() bool {
	if x != nil && x.SsfElectricEngineState != nil {
		return *x.SsfElectricEngineState
	}
	return false
}

func (x *Compact) GetSsfCarClosedFactoryRemote() bool {
	if x != nil && x.SsfCarClosedFactoryRemote != nil {
		return *x.SsfCarClosedFactoryRemote
	}
	return false
}

func (x *Compact) GetSsfCarIsClosed() bool {
	if x != nil && x.SsfCarIsClosed != nil {
		return *x.SsfCarIsClosed
	}
	return false
}

func (x *Compact) GetSsfFactoryAlarmActuated() bool {
	if x != nil && x.SsfFactoryAlarmActuated != nil {
		return *x.SsfFactoryAlarmActuated
	}
	return false
}

func (x *Compact) GetSsfFactoryAlarmEmulated() bool {
	if x != nil && x.SsfFactoryAlarmEmulated != nil {
		return *x.SsfFactoryAlarmEmulated
	}
	return false
}

func (x *Compact) GetSsfSignalCloseFactoryRemote() bool {
	if x != nil && x.SsfSignalCloseFactoryRemote != nil {
		return *x.SsfSignalCloseFactoryRemote
	}
	return false
}

func (x *Compact) GetSsfSignalOpenFactoryRemote() bool {
	if x != nil && x.SsfSignalOpenFactoryRemote != nil {
		return *x.SsfSignalOpenFactoryRemote
	}
	return false
}

func (x *Compact) GetSsfRearmingSignal() bool {
	if x != nil && x.SsfRearmingSignal != nil {
		return *x.SsfRearmingSignal
	}
	return false
}

func (x *Compact) GetSsfTrunkDoorOpenedFactoryRemote() bool {
	if x != nil && x.SsfTrunkDoorOpenedFactoryRemote != nil {
		return *x.SsfTrunkDoorOpenedFactoryRemote
	}
	return false
}

func (x *Compact) GetSsfCanModuleInSleep() bool {
	if x != nil && x.SsfCanModuleInSleep != nil {
		return *x.SsfCanModuleInSleep
	}
	return false
}

func (x *Compact) GetSsfFactoryRemote3X() bool {
	if x != nil && x.SsfFactoryRemote3X != nil {
		return *x.SsfFactoryRemote3X
	}
	return false
}

func (x *Compact) GetSsfFactoryArmed() bool {
	if x != nil && x.SsfFactoryArmed != nil {
		return *x.SsfFactoryArmed
	}
	return false
}

func (x *Compact) GetSsfParkingGearActive() bool {
	if x != nil && x.SsfParkingGearActive != nil {
		return *x.SsfParkingGearActive
	}
	return false
}

func (x *Compact) GetSsfReverseGearActive() bool {
	if x != nil && x.SsfReverseGearActive != nil {
		return *x.SsfReverseGearActive
	}
	return false
}

func (x *Compact) GetSsfNeutralGearActive() bool {
	if x != nil && x.SsfNeutralGearActive != nil {
		return *x.SsfNeutralGearActive
	}
	return false
}

func (x *Compact) GetSsfDriveIsActive() bool {
	if x != nil && x.SsfDriveIsActive != nil {
		return *x.SsfDriveIsActive
	}
	return false
}

func (x *Compact) GetSsfEngineWorkingOnDualFuel() bool {
	if x != nil && x.SsfEngineWorkingOnDualFuel != nil {
		return *x.SsfEngineWorkingOnDualFuel
	}
	return false
}

func (x *Compact) GetSsfEngineWorkingOnLpg() bool {
	if x != nil && x.SsfEngineWorkingOnLpg != nil {
		return *x.SsfEngineWorkingOnLpg
	}
	return false
}

func (x *Compact) GetCsfParkingLights() bool {
	if x != nil && x.CsfParkingLights != nil {
		return *x.CsfParkingLights
	}
	return false
}

func (x *Compact) GetCsfDippedHeadLights() bool {
	if x != nil && x.CsfDippedHeadLights != nil {
		return *x.CsfDippedHeadLights
	}
	return false
}

func (x *Compact) GetCsfFullBeamHeadlights() bool {
	if x != nil && x.CsfFullBeamHeadlights != nil {
		return *x.CsfFullBeamHeadlights
	}
	return false
}

func (x *Compact) GetCsfRearFogLights() bool {
	if x != nil && x.CsfRearFogLights != nil {
		return *x.CsfRearFogLights
	}
	return false
}

func (x *Compact) GetCsfFrontFogLights() bool {
	if x != nil && x.CsfFrontFogLights != nil {
		return *x.CsfFrontFogLights
	}
	return false
}

func (x *Compact) GetCsfAdditionalFrontLights() bool {
	if x != nil && x.CsfAdditionalFrontLights != nil {
		return *x.CsfAdditionalFrontLights
	}
	return false
}

func (x *Compact) GetCsfAdditionalRearLights() bool {
	if x != nil && x.CsfAdditionalRearLights != nil {
		return *x.CsfAdditionalRearLights
	}
	return false
}

func (x *Compact) GetCsfLightSignal() bool {
	if x != nil && x.CsfLightSignal != nil {
		return *x.CsfLightSignal
	}
	return false
}

func (x *Compact) GetCsfAirConditioning() bool {
	if x != nil && x.CsfAirConditioning != nil {
		return *x.CsfAirConditioning
	}
	return false
}

func (x *Compact) GetCsfCruiseControl() bool {
	if x != nil && x.CsfCruiseControl != nil {
		return *x.CsfCruiseControl
	}
	return false
}

func (x *Compact) GetCsfAutomaticRetarder() bool {
	if x != nil && x.CsfAutomaticRetarder != nil {
		return *x.CsfAutomaticRetarder
	}
	return false
}

func (x *Compact) GetCsfManualRetarder() bool {
	if x != nil && x.CsfManualRetarder != nil {
		return *x.CsfManualRetarder
	}
	return false
}

func (x *Compact) GetCsfDriversSeatbeltFastened() bool {
	if x != nil && x.CsfDriversSeatbeltFastened != nil {
		return *x.CsfDriversSeatbeltFastened
	}
	return false
}

func (x *Compact) GetCsfFrontDriversSeatbeltFastened() bool {
	if x != nil && x.CsfFrontDriversSeatbeltFastened != nil {
		return *x.CsfFrontDriversSeatbeltFastened
	}
	return false
}

func (x *Compact) GetCsfLeftDriversSeatbeltFastened() bool {
	if x != nil && x.CsfLeftDriversSeatbeltFastened != nil {
		return *x.CsfLeftDriversSeatbeltFastened
	}
	return false
}

func (x *Compact) GetCsfRightDriversSeatbeltFastened() bool {
	if x != nil && x.CsfRightDriversSeatbeltFastened != nil {
		return *x.CsfRightDriversSeatbeltFastened
	}
	return false
}

func (x *Compact) GetCsfCentreDriversSeatbeltFastened() bool {
	if x != nil && x.CsfCentreDriversSeatbeltFastened != nil {
		return *x.CsfCentreDriversSeatbeltFastened
	}
	return false
}

func (x *Compact) GetCsfFrontPassengerPresent() bool {
	if x != nil && x.CsfFrontPassengerPresent != nil {
		return *x.CsfFrontPassengerPresent
	}
	return false
}

func (x *Compact) GetCsfPto() bool {
	if x != nil && x.CsfPto != nil {
		return *x.CsfPto
	}
	return false
}

func (x *Compact) GetCsfFrontDifferentialLocked() bool {
	if x != nil && x.CsfFrontDifferentialLocked != nil {
		return *x.CsfFrontDifferentialLocked
	}
	return false
}

func (x *Compact) GetCsfRearDifferentialLocked() bool {
	if x != nil && x.CsfRearDifferentialLocked != nil {
		return *x.CsfRearDifferentialLocked
	}
	return false
}

func (x *Compact) GetCsfCentralDifferential4HiLocked() bool {
	if x != nil && x.CsfCentralDifferential4HiLocked != nil {
		return *x.CsfCentralDifferential4HiLocked
	}
	return false
}

func (x *Compact) GetCsfRearDifferential4LoLocked() bool {
	if x != nil && x.CsfRearDifferential4LoLocked != nil {
		return *x.CsfRearDifferential4LoLocked
	}
	return false
}

func (x *Compact) GetCsfTrailerAxle1LiftActive() bool {
	if x != nil && x.CsfTrailerAxle1LiftActive != nil {
		return *x.CsfTrailerAxle1LiftActive
	}
	return false
}

func (x *Compact) GetCsfTrailerAxle2LiftActive() bool {
	if x != nil && x.CsfTrailerAxle2LiftActive != nil {
		return *x.CsfTrailerAxle2LiftActive
	}
	return false
}

func (x *Compact) GetCsfTrailerConnected() bool {
	if x != nil && x.CsfTrailerConnected != nil {
		return *x.CsfTrailerConnected
	}
	return false
}

func (x *Compact) GetCsfStartStopSystemInactive() bool {
	if x != nil && x.CsfStartStopSystemInactive != nil {
		return *x.CsfStartStopSystemInactive
	}
	return false
}

func (x *Compact) GetIsfCheckEngineIndicator() bool {
	if x != nil && x.IsfCheckEngineIndicator != nil {
		return *x.IsfCheckEngineIndicator
	}
	return false
}

func (x *Compact) GetIsfAbsIndicator() bool {
	if x != nil && x.IsfAbsIndicator != nil {
		return *x.IsfAbsIndicator
	}
	return false
}

func (x *Compact) GetIsfEspIndicator() bool {
	if x != nil && x.IsfEspIndicator != nil {
		return *x.IsfEspIndicator
	}
	return false
}

func (x *Compact) GetIsfEspTurnedOff() bool {
	if x != nil && x.IsfEspTurnedOff != nil {
		return *x.IsfEspTurnedOff
	}
	return false
}

func (x *Compact) GetIsfStopIndicator() bool {
	if x != nil && x.IsfStopIndicator != nil {
		return *x.IsfStopIndicator
	}
	return false
}

func (x *Compact) GetIsfOilLevelIndicator() bool {
	if x != nil && x.IsfOilLevelIndicator != nil {
		return *x.IsfOilLevelIndicator
	}
	return false
}

func (x *Compact) GetIsfCoolantLiquidLevel() bool {
	if x != nil && x.IsfCoolantLiquidLevel != nil {
		return *x.IsfCoolantLiquidLevel
	}
	return false
}

func (x *Compact) GetIsfBatteryNotChargingIndicator() bool {
	if x != nil && x.IsfBatteryNotChargingIndicator != nil {
		return *x.IsfBatteryNotChargingIndicator
	}
	return false
}

func (x *Compact) GetIsfHandbrakeSystemIndicator() bool {
	if x != nil && x.IsfHandbrakeSystemIndicator != nil {
		return *x.IsfHandbrakeSystemIndicator
	}
	return false
}

func (x *Compact) GetIsfAirbagIndicator() bool {
	if x != nil && x.IsfAirbagIndicator != nil {
		return *x.IsfAirbagIndicator
	}
	return false
}

func (x *Compact) GetIsfEpsIndicator() bool {
	if x != nil && x.IsfEpsIndicator != nil {
		return *x.IsfEpsIndicator
	}
	return false
}

func (x *Compact) GetIsfWarningIndicator() bool {
	if x != nil && x.IsfWarningIndicator != nil {
		return *x.IsfWarningIndicator
	}
	return false
}

func (x *Compact) GetIsfLightsFailureIndicator() bool {
	if x != nil && x.IsfLightsFailureIndicator != nil {
		return *x.IsfLightsFailureIndicator
	}
	return false
}

func (x *Compact) GetIsfLowTirePressureIndicator() bool {
	if x != nil && x.IsfLowTirePressureIndicator != nil {
		return *x.IsfLowTirePressureIndicator
	}
	return false
}

func (x *Compact) GetIsfWearOfBrakePadsIndicator() bool {
	if x != nil && x.IsfWearOfBrakePadsIndicator != nil {
		return *x.IsfWearOfBrakePadsIndicator
	}
	return false
}

func (x *Compact) GetIsfLowFuelLevelIndicator() bool {
	if x != nil && x.IsfLowFuelLevelIndicator != nil {
		return *x.IsfLowFuelLevelIndicator
	}
	return false
}

func (x *Compact) GetIsfMaintenanceRequiredIndicator() bool {
	if x != nil && x.IsfMaintenanceRequiredIndicator != nil {
		return *x.IsfMaintenanceRequiredIndicator
	}
	return false
}

func (x *Compact) GetIsfGlowPlugIndicator() bool {
	if x != nil && x.IsfGlowPlugIndicator != nil {
		return *x.IsfGlowPlugIndicator
	}
	return false
}

func (x *Compact) GetIsfFapIndicator() bool {
	if x != nil && x.IsfFapIndicator != nil {
		return *x.IsfFapIndicator
	}
	return false
}

func (x *Compact) GetIsfEpcIndicator() bool {
	if x != nil && x.IsfEpcIndicator != nil {
		return *x.IsfEpcIndicator
	}
	return false
}

func (x *Compact) GetIsfCloggedEngineOilFilterIndicator() bool {
	if x != nil && x.IsfCloggedEngineOilFilterIndicator != nil {
		return *x.IsfCloggedEngineOilFilterIndicator
	}
	return false
}

func (x *Compact) GetIsfLowEngineOilPressureIndicator() bool {
	if x != nil && x.IsfLowEngineOilPressureIndicator != nil {
		return *x.IsfLowEngineOilPressureIndicator
	}
	return false
}

func (x *Compact) GetIsfTooHighEngineOilTemperatureIndicator() bool {
	if x != nil && x.IsfTooHighEngineOilTemperatureIndicator != nil {
		return *x.IsfTooHighEngineOilTemperatureIndicator
	}
	return false
}

func (x *Compact) GetIsfLowCoolantLevelIndicator() bool {
	if x != nil && x.IsfLowCoolantLevelIndicator != nil {
		return *x.IsfLowCoolantLevelIndicator
	}
	return false
}

func (x *Compact) GetIsfCloggedHydraulicSystemOilFilterIndicator() bool {
	if x != nil && x.IsfCloggedHydraulicSystemOilFilterIndicator != nil {
		return *x.IsfCloggedHydraulicSystemOilFilterIndicator
	}
	return false
}

func (x *Compact) GetIsfHydraulicSystemLowPressureIndicator() bool {
	if x != nil && x.IsfHydraulicSystemLowPressureIndicator != nil {
		return *x.IsfHydraulicSystemLowPressureIndicator
	}
	return false
}

func (x *Compact) GetIsfHydraulicOilLowLevelIndicator() bool {
	if x != nil && x.IsfHydraulicOilLowLevelIndicator != nil {
		return *x.IsfHydraulicOilLowLevelIndicator
	}
	return false
}

func (x *Compact) GetIsfHydraulicSystemHighTemperatureIndicator() bool {
	if x != nil && x.IsfHydraulicSystemHighTemperatureIndicator != nil {
		return *x.IsfHydraulicSystemHighTemperatureIndicator
	}
	return false
}

func (x *Compact) GetIsfOilOverflowInHydraulicChamberIndicator() bool {
	if x != nil && x.IsfOilOverflowInHydraulicChamberIndicator != nil {
		return *x.IsfOilOverflowInHydraulicChamberIndicator
	}
	return false
}

func (x *Compact) GetIsfCloggedAirFilterIndicator() bool {
	if x != nil && x.IsfCloggedAirFilterIndicator != nil {
		return *x.IsfCloggedAirFilterIndicator
	}
	return false
}

func (x *Compact) GetIsfCloggedFuelFilterIndicator() bool {
	if x != nil && x.IsfCloggedFuelFilterIndicator != nil {
		return *x.IsfCloggedFuelFilterIndicator
	}
	return false
}

func (x *Compact) GetIsfWaterInFuelIndicator() bool {
	if x != nil && x.IsfWaterInFuelIndicator != nil {
		return *x.IsfWaterInFuelIndicator
	}
	return false
}

func (x *Compact) GetAsfGrainTankIs100PercentFull() bool {
	if x != nil && x.AsfGrainTankIs100PercentFull != nil {
		return *x.AsfGrainTankIs100PercentFull
	}
	return false
}

func (x *Compact) GetAsfGrainTankIs70PercentFull() bool {
	if x != nil && x.AsfGrainTankIs70PercentFull != nil {
		return *x.AsfGrainTankIs70PercentFull
	}
	return false
}

func (x *Compact) GetAsfStrawChopperSpeedBelowTheNorm() bool {
	if x != nil && x.AsfStrawChopperSpeedBelowTheNorm != nil {
		return *x.AsfStrawChopperSpeedBelowTheNorm
	}
	return false
}

func (x *Compact) GetUsfSpreading2() bool {
	if x != nil && x.UsfSpreading2 != nil {
		return *x.UsfSpreading2
	}
	return false
}

var File_packets_packets_proto protoreflect.FileDescriptor

const file_packets_packets_proto_rawDesc = "" +
	"\n" +
	"\x15packets/packets.proto\x12\x11com.navzy.packets\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x15devices/devices.proto\"\xb4\x02\n" +
	"\x06Result\x12\x12\n" +
	"\x04imei\x18\x01 \x01(\x04R\x04imei\x12?\n" +
	"\x04Type\x18\x02 \x01(\x0e2$.com.navzy.packets.Result.PacketTypeR\vpacket_type\x12-\n" +
	"\x04data\x18\x03 \x03(\v2\x19.com.navzy.packets.PacketR\x04data\x12\x1a\n" +
	"\bresponse\x18\x04 \x01(\fR\bresponse\x12\x16\n" +
	"\x06answer\x18\x05 \x01(\fR\x06answer\x12\x18\n" +
	"\apayload\x18\x06 \x01(\fR\apayload\"X\n" +
	"\n" +
	"PacketType\x12\n" +
	"\n" +
	"\x06FAILED\x10\x00\x12\r\n" +
	"\tAUTHORIZE\x10\x01\x12\b\n" +
	"\x04DATA\x10\x02\x12\r\n" +
	"\tHEARTBEAT\x10\x03\x12\n" +
	"\n" +
	"\x06ANSWER\x10\x04\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x05\"\xa0\x01\n" +
	"\x04Task\x122\n" +
	"\x06device\x18\x01 \x01(\v2\x19.com.navzy.devices.DeviceR\adevices\x121\n" +
	"\x06packet\x18\x02 \x01(\v2\x19.com.navzy.packets.PacketR\x06packet\x121\n" +
	"\x06client\x18\x03 \x01(\v2\x19.com.navzy.packets.ClientR\x06client\"l\n" +
	"\x06Client\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04port\x12\x1c\n" +
	"\tserver_ip\x18\x03 \x01(\tR\tserver_ip\x12 \n" +
	"\vserver_port\x18\x04 \x01(\rR\vserver_port\"\x8f\x01\n" +
	"\x04Data\x12\x1c\n" +
	"\tdevice_id\x18\x01 \x01(\tR\tdevice_id\x126\n" +
	"\breceived\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\breceived\x121\n" +
	"\x06packet\x18\x03 \x01(\v2\x19.com.navzy.packets.PacketR\x06packet\"\xcd\x03\n" +
	"\x06Packet\x12\x17\n" +
	"\x04imei\x18\x01 \x01(\x04R\tdevice_id\x126\n" +
	"\bdatetime\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\bdatetime\x12\x1a\n" +
	"\blatitude\x18\x03 \x01(\x02R\blatitude\x12\x1c\n" +
	"\tlongitude\x18\x04 \x01(\x02R\tlongitude\x12\x1a\n" +
	"\baltitude\x18\x05 \x01(\rR\baltitude\x12\x14\n" +
	"\x05angle\x18\x06 \x01(\rR\x05angle\x12\x14\n" +
	"\x05speed\x18\a \x01(\rR\x05speed\x12!\n" +
	"\tsatellite\x18\b \x01(\rH\x00R\tsatellite\x88\x01\x01\x12\x1f\n" +
	"\bignition\x18\t \x01(\bH\x01R\bignition\x88\x01\x01\x12\x1d\n" +
	"\amileage\x18\n" +
	" \x01(\rH\x02R\amileage\x88\x01\x01\x124\n" +
	"\acompact\x18\v \x01(\v2\x1a.com.navzy.packets.CompactR\acompact\x120\n" +
	"\x06events\x18\f \x03(\x0e2\x18.com.navzy.packets.EventR\x06alertsB\f\n" +
	"\n" +
	"_satelliteB\v\n" +
	"\t_ignitionB\n" +
	"\n" +
	"\b_mileage\"\xd0\xf7\x02\n" +
	"\aCompact\x12\x1f\n" +
	"\bmovement\x18\x02 \x01(\bH\x00R\bmovement\x88\x01\x01\x12 \n" +
	"\tdata_mode\x18\x03 \x01(\rH\x01R\bdataMode\x88\x01\x01\x12\"\n" +
	"\n" +
	"gsm_signal\x18\x04 \x01(\rH\x02R\tgsmSignal\x88\x01\x01\x12\"\n" +
	"\n" +
	"sleep_mode\x18\x05 \x01(\rH\x03R\tsleepMode\x88\x01\x01\x12$\n" +
	"\vgnss_status\x18\x06 \x01(\rH\x04R\n" +
	"gnssStatus\x88\x01\x01\x12 \n" +
	"\tgnss_pdop\x18\a \x01(\rH\x05R\bgnssPdop\x88\x01\x01\x12 \n" +
	"\tgnss_hdop\x18\b \x01(\rH\x06R\bgnssHdop\x88\x01\x01\x12.\n" +
	"\x10external_voltage\x18\t \x01(\rH\aR\x0fexternalVoltage\x88\x01\x01\x12\x19\n" +
	"\x05speed\x18\n" +
	" \x01(\rH\bR\x05speed\x88\x01\x01\x12#\n" +
	"\vgsm_cell_id\x18\v \x01(\rH\tR\tgsmCellId\x88\x01\x01\x12'\n" +
	"\rgsm_area_code\x18\f \x01(\rH\n" +
	"R\vgsmAreaCode\x88\x01\x01\x12,\n" +
	"\x0fbattery_voltage\x18\r \x01(\rH\vR\x0ebatteryVoltage\x88\x01\x01\x12,\n" +
	"\x0fbattery_current\x18\x0e \x01(\rH\fR\x0ebatteryCurrent\x88\x01\x01\x123\n" +
	"\x13active_gsm_operator\x18\x0f \x01(\rH\rR\x11activeGsmOperator\x88\x01\x01\x12(\n" +
	"\rtrip_odometer\x18\x10 \x01(\rH\x0eR\ftripOdometer\x88\x01\x01\x12*\n" +
	"\x0etotal_odometer\x18\x11 \x01(\rH\x0fR\rtotalOdometer\x88\x01\x01\x12*\n" +
	"\x0edigital_input1\x18\x12 \x01(\bH\x10R\rdigitalInput1\x88\x01\x01\x12(\n" +
	"\ranalog_input1\x18\x13 \x01(\rH\x11R\fanalogInput1\x88\x01\x01\x12,\n" +
	"\x0fdigital_output1\x18\x14 \x01(\bH\x12R\x0edigitalOutput1\x88\x01\x01\x12'\n" +
	"\rfuel_used_gps\x18\x15 \x01(\rH\x13R\vfuelUsedGps\x88\x01\x01\x12'\n" +
	"\rfuel_rate_gps\x18\x16 \x01(\rH\x14R\vfuelRateGps\x88\x01\x01\x12\x1a\n" +
	"\x06axis_x\x18\x17 \x01(\x05H\x15R\x05axisX\x88\x01\x01\x12\x1a\n" +
	"\x06axis_y\x18\x18 \x01(\x05H\x16R\x05axisY\x88\x01\x01\x12\x1a\n" +
	"\x06axis_z\x18\x19 \x01(\x05H\x17R\x05axisZ\x88\x01\x01\x12\x1b\n" +
	"\x06iccid1\x18\x1a \x01(\x04H\x18R\x06iccid1\x88\x01\x01\x12 \n" +
	"\tsd_status\x18\x1b \x01(\bH\x19R\bsdStatus\x88\x01\x01\x12*\n" +
	"\x0edigital_input2\x18\x1c \x01(\bH\x1aR\rdigitalInput2\x88\x01\x01\x12*\n" +
	"\x0edigital_input3\x18\x1d \x01(\bH\x1bR\rdigitalInput3\x88\x01\x01\x12(\n" +
	"\ranalog_input2\x18\x1e \x01(\rH\x1cR\fanalogInput2\x88\x01\x01\x12,\n" +
	"\x0fdigital_output2\x18\x1f \x01(\bH\x1dR\x0edigitalOutput2\x88\x01\x01\x124\n" +
	"\x13dallas_temperature1\x18  \x01(\x05H\x1eR\x12dallasTemperature1\x88\x01\x01\x124\n" +
	"\x13dallas_temperature2\x18! \x01(\x05H\x1fR\x12dallasTemperature2\x88\x01\x01\x124\n" +
	"\x13dallas_temperature3\x18\" \x01(\x05H R\x12dallasTemperature3\x88\x01\x01\x124\n" +
	"\x13dallas_temperature4\x18# \x01(\x05H!R\x12dallasTemperature4\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id1\x18$ \x01(\x04H\"R\x14dallasTemperatureId1\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id2\x18% \x01(\x04H#R\x14dallasTemperatureId2\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id3\x18& \x01(\x04H$R\x14dallasTemperatureId3\x88\x01\x01\x129\n" +
	"\x16dallas_temperature_id4\x18' \x01(\x04H%R\x14dallasTemperatureId4\x88\x01\x01\x12\x1d\n" +
	"\aibutton\x18( \x01(\x04H&R\aibutton\x88\x01\x01\x12\x17\n" +
	"\x04rfid\x18) \x01(\x04H'R\x04rfid\x88\x01\x01\x12+\n" +
	"\x0flls1_fuel_level\x18* \x01(\x05H(R\rlls1FuelLevel\x88\x01\x01\x12.\n" +
	"\x10lls1_temperature\x18+ \x01(\x05H)R\x0flls1Temperature\x88\x01\x01\x12+\n" +
	"\x0flls2_fuel_level\x18, \x01(\x05H*R\rlls2FuelLevel\x88\x01\x01\x12.\n" +
	"\x10lls2_temperature\x18- \x01(\x05H+R\x0flls2Temperature\x88\x01\x01\x12+\n" +
	"\x0flls3_fuel_level\x18. \x01(\rH,R\rlls3FuelLevel\x88\x01\x01\x12.\n" +
	"\x10lls3_temperature\x18/ \x01(\x05H-R\x0flls3Temperature\x88\x01\x01\x12+\n" +
	"\x0flls4_fuel_level\x180 \x01(\x05H.R\rlls4FuelLevel\x88\x01\x01\x12.\n" +
	"\x10lls4_temperature\x181 \x01(\x05H/R\x0flls4Temperature\x88\x01\x01\x12+\n" +
	"\x0flls5_fuel_level\x182 \x01(\x05H0R\rlls5FuelLevel\x88\x01\x01\x12.\n" +
	"\x10lls5_temperature\x183 \x01(\x05H1R\x0flls5Temperature\x88\x01\x01\x12 \n" +
	"\teco_score\x184 \x01(\rH2R\becoScore\x88\x01\x01\x12(\n" +
	"\rbattery_level\x185 \x01(\rH3R\fbatteryLevel\x88\x01\x01\x12\x1c\n" +
	"\auser_id\x186 \x01(\x04H4R\x06userId\x88\x01\x01\x12&\n" +
	"\fnetwork_type\x187 \x01(\rH5R\vnetworkType\x88\x01\x01\x121\n" +
	"\x12pulse_counter_din1\x188 \x01(\rH6R\x10pulseCounterDin1\x88\x01\x01\x121\n" +
	"\x12pulse_counter_din2\x189 \x01(\rH7R\x10pulseCounterDin2\x88\x01\x01\x12 \n" +
	"\tbt_status\x18: \x01(\rH8R\bbtStatus\x88\x01\x01\x12\"\n" +
	"\n" +
	"barcode_id\x18; \x01(\tH9R\tbarcodeId\x88\x01\x01\x12.\n" +
	"\x10instant_movement\x18< \x01(\bH:R\x0finstantMovement\x88\x01\x01\x12?\n" +
	"\x1aul202_02_sensor_fuel_level\x18= \x01(\x05H;R\x16ul20202SensorFuelLevel\x88\x01\x01\x128\n" +
	"\x16ul202_02_sensor_status\x18> \x01(\rH<R\x13ul20202SensorStatus\x88\x01\x01\x12,\n" +
	"\x0fdigital_output3\x18? \x01(\bH=R\x0edigitalOutput3\x88\x01\x01\x12&\n" +
	"\fground_sense\x18@ \x01(\bH>R\vgroundSense\x88\x01\x01\x124\n" +
	"\x13iso6709_coordinates\x18A \x01(\tH?R\x12iso6709Coordinates\x88\x01\x01\x12,\n" +
	"\x10umts_lte_cell_id\x18B \x01(\rH@R\rumtsLteCellId\x88\x01\x01\x12$\n" +
	"\vdriver_name\x18C \x01(\tHAR\n" +
	"driverName\x88\x01\x01\x12<\n" +
	"\x18driver_card_license_type\x18D \x01(\rHBR\x15driverCardLicenseType\x88\x01\x01\x12(\n" +
	"\rdriver_gender\x18E \x01(\rHCR\fdriverGender\x88\x01\x01\x12)\n" +
	"\x0edriver_card_id\x18F \x01(\rHDR\fdriverCardId\x88\x01\x01\x12B\n" +
	"\x1bdriver_card_expiration_date\x18G \x01(\rHER\x18driverCardExpirationDate\x88\x01\x01\x12?\n" +
	"\x1adriver_card_place_of_issue\x18H \x01(\rHFR\x16driverCardPlaceOfIssue\x88\x01\x01\x123\n" +
	"\x13driver_status_event\x18I \x01(\rHGR\x11driverStatusEvent\x88\x01\x01\x12 \n" +
	"\tain_speed\x18J \x01(\rHHR\bainSpeed\x88\x01\x01\x121\n" +
	"\x12msp500_vendor_name\x18K \x01(\tHIR\x10msp500VendorName\x88\x01\x01\x127\n" +
	"\x15msp500_vehicle_number\x18L \x01(\tHJR\x13msp500VehicleNumber\x88\x01\x01\x123\n" +
	"\x13msp500_speed_sensor\x18M \x01(\bHKR\x11msp500SpeedSensor\x88\x01\x01\x12$\n" +
	"\vwake_reason\x18N \x01(\bHLR\n" +
	"wakeReason\x88\x01\x01\x12.\n" +
	"\x10eye_temperature1\x18O \x01(\x05HMR\x0feyeTemperature1\x88\x01\x01\x12.\n" +
	"\x10eye_temperature2\x18P \x01(\x05HNR\x0feyeTemperature2\x88\x01\x01\x12.\n" +
	"\x10eye_temperature3\x18Q \x01(\x05HOR\x0feyeTemperature3\x88\x01\x01\x12.\n" +
	"\x10eye_temperature4\x18R \x01(\x05HPR\x0feyeTemperature4\x88\x01\x01\x12(\n" +
	"\reye_humidity1\x18S \x01(\rHQR\feyeHumidity1\x88\x01\x01\x12(\n" +
	"\reye_humidity2\x18T \x01(\rHRR\feyeHumidity2\x88\x01\x01\x12(\n" +
	"\reye_humidity3\x18U \x01(\rHSR\feyeHumidity3\x88\x01\x01\x12(\n" +
	"\reye_humidity4\x18V \x01(\rHTR\feyeHumidity4\x88\x01\x01\x12$\n" +
	"\veye_magnet1\x18W \x01(\bHUR\n" +
	"eyeMagnet1\x88\x01\x01\x12$\n" +
	"\veye_magnet2\x18X \x01(\bHVR\n" +
	"eyeMagnet2\x88\x01\x01\x12$\n" +
	"\veye_magnet3\x18Y \x01(\bHWR\n" +
	"eyeMagnet3\x88\x01\x01\x12$\n" +
	"\veye_magnet4\x18Z \x01(\bHXR\n" +
	"eyeMagnet4\x88\x01\x01\x12(\n" +
	"\reye_movement1\x18[ \x01(\bHYR\feyeMovement1\x88\x01\x01\x12)\n" +
	"\reye_movement2\x18\xdb\x01 \x01(\bHZR\feyeMovement2\x88\x01\x01\x12)\n" +
	"\reye_movement3\x18\xdc\x01 \x01(\bH[R\feyeMovement3\x88\x01\x01\x12)\n" +
	"\reye_movement4\x18\xdd\x01 \x01(\bH\\R\feyeMovement4\x88\x01\x01\x12#\n" +
	"\n" +
	"eye_pitch1\x18\xde\x01 \x01(\x05H]R\teyePitch1\x88\x01\x01\x12#\n" +
	"\n" +
	"eye_pitch2\x18\xdf\x01 \x01(\x05H^R\teyePitch2\x88\x01\x01\x12#\n" +
	"\n" +
	"eye_pitch3\x18\xe0\x01 \x01(\x05H_R\teyePitch3\x88\x01\x01\x12#\n" +
	"\n" +
	"eye_pitch4\x18\xe1\x01 \x01(\x05H`R\teyePitch4\x88\x01\x01\x12.\n" +
	"\x10eye_low_battery1\x18\xe5\x01 \x01(\bHaR\x0eeyeLowBattery1\x88\x01\x01\x12.\n" +
	"\x10eye_low_battery2\x18\xe2\x01 \x01(\bHbR\x0eeyeLowBattery2\x88\x01\x01\x12.\n" +
	"\x10eye_low_battery3\x18\xe3\x01 \x01(\bHcR\x0eeyeLowBattery3\x88\x01\x01\x12.\n" +
	"\x10eye_low_battery4\x18\xe4\x01 \x01(\bHdR\x0eeyeLowBattery4\x88\x01\x01\x126\n" +
	"\x14eye_battery_voltage1\x18\xe9\x01 \x01(\rHeR\x12eyeBatteryVoltage1\x88\x01\x01\x126\n" +
	"\x14eye_battery_voltage2\x18\xe6\x01 \x01(\rHfR\x12eyeBatteryVoltage2\x88\x01\x01\x126\n" +
	"\x14eye_battery_voltage3\x18\xe7\x01 \x01(\rHgR\x12eyeBatteryVoltage3\x88\x01\x01\x126\n" +
	"\x14eye_battery_voltage4\x18\xe8\x01 \x01(\rHhR\x12eyeBatteryVoltage4\x88\x01\x01\x12!\n" +
	"\teye_roll1\x18\xea\x01 \x01(\x05HiR\beyeRoll1\x88\x01\x01\x12!\n" +
	"\teye_roll2\x18\xeb\x01 \x01(\x05HjR\beyeRoll2\x88\x01\x01\x12!\n" +
	"\teye_roll3\x18\xec\x01 \x01(\x05HkR\beyeRoll3\x88\x01\x01\x12!\n" +
	"\teye_roll4\x18\xed\x01 \x01(\x05HlR\beyeRoll4\x88\x01\x01\x124\n" +
	"\x13eye_movement_count1\x18\xee\x01 \x01(\rHmR\x11eyeMovementCount1\x88\x01\x01\x124\n" +
	"\x13eye_movement_count2\x18\xef\x01 \x01(\rHnR\x11eyeMovementCount2\x88\x01\x01\x124\n" +
	"\x13eye_movement_count3\x18\xf0\x01 \x01(\rHoR\x11eyeMovementCount3\x88\x01\x01\x124\n" +
	"\x13eye_movement_count4\x18\xf1\x01 \x01(\rHpR\x11eyeMovementCount4\x88\x01\x01\x120\n" +
	"\x11eye_magnet_count1\x18\xf5\x01 \x01(\rHqR\x0feyeMagnetCount1\x88\x01\x01\x120\n" +
	"\x11eye_magnet_count2\x18\xf2\x01 \x01(\rHrR\x0feyeMagnetCount2\x88\x01\x01\x120\n" +
	"\x11eye_magnet_count3\x18\xf3\x01 \x01(\rHsR\x0feyeMagnetCount3\x88\x01\x01\x120\n" +
	"\x11eye_magnet_count4\x18\xf4\x01 \x01(\rHtR\x0feyeMagnetCount4\x88\x01\x01\x12\\\n" +
	")isf_clogged_brake_system_filter_indicator\x18\\ \x01(\bHuR$isfCloggedBrakeSystemFilterIndicator\x88\x01\x01\x12R\n" +
	"$isf_low_washer_fluid_level_indicator\x18] \x01(\bHvR\x1fisfLowWasherFluidLevelIndicator\x88\x01\x01\x12G\n" +
	"\x1eisf_low_adblue_level_indicator\x18^ \x01(\bHwR\x1aisfLowAdblueLevelIndicator\x88\x01\x01\x12X\n" +
	"'isf_low_trailer_tyre_pressure_indicator\x18_ \x01(\bHxR\"isfLowTrailerTyrePressureIndicator\x88\x01\x01\x12]\n" +
	"*isf_wear_of_trailer_brake_lining_indicator\x18` \x01(\bHyR$isfWearOfTrailerBrakeLiningIndicator\x88\x01\x01\x12b\n" +
	",isf_high_trailer_brake_temperature_indicator\x18a \x01(\bHzR'isfHighTrailerBrakeTemperatureIndicator\x88\x01\x01\x12j\n" +
	"0isf_incorrect_trailer_pneumatic_supply_indicator\x18b \x01(\bH{R+isfIncorrectTrailerPneumaticSupplyIndicator\x88\x01\x01\x12A\n" +
	"\x1bisf_low_cng_level_indicator\x18c \x01(\bH|R\x17isfLowCngLevelIndicator\x88\x01\x01\x12T\n" +
	"%asf_right_joystick_moved_right_active\x18d \x01(\bH}R asfRightJoystickMovedRightActive\x88\x01\x01\x12R\n" +
	"$asf_right_joystick_moved_left_active\x18e \x01(\bH~R\x1fasfRightJoystickMovedLeftActive\x88\x01\x01\x12X\n" +
	"'asf_right_joystick_moved_forward_active\x18f \x01(\bH\x7fR\"asfRightJoystickMovedForwardActive\x88\x01\x01\x12S\n" +
	"$asf_right_joystick_moved_back_active\x18g \x01(\bH\x80\x01R\x1fasfRightJoystickMovedBackActive\x88\x01\x01\x12S\n" +
	"$asf_left_joystick_moved_right_active\x18h \x01(\bH\x81\x01R\x1fasfLeftJoystickMovedRightActive\x88\x01\x01\x12Q\n" +
	"#asf_left_joystick_moved_left_active\x18i \x01(\bH\x82\x01R\x1easfLeftJoystickMovedLeftActive\x88\x01\x01\x12W\n" +
	"&asf_left_joystick_moved_forward_active\x18j \x01(\bH\x83\x01R!asfLeftJoystickMovedForwardActive\x88\x01\x01\x12Q\n" +
	"#asf_left_joystick_moved_back_active\x18k \x01(\bH\x84\x01R\x1easfLeftJoystickMovedBackActive\x88\x01\x01\x12=\n" +
	"\x18asf_first_rear_hydraulic\x18l \x01(\bH\x85\x01R\x15asfFirstRearHydraulic\x88\x01\x01\x12?\n" +
	"\x19asf_second_rear_hydraulic\x18m \x01(\bH\x86\x01R\x16asfSecondRearHydraulic\x88\x01\x01\x12=\n" +
	"\x18asf_third_rear_hydraulic\x18n \x01(\bH\x87\x01R\x15asfThirdRearHydraulic\x88\x01\x01\x12?\n" +
	"\x19asf_fourth_rear_hydraulic\x18o \x01(\bH\x88\x01R\x16asfFourthRearHydraulic\x88\x01\x01\x12?\n" +
	"\x19asf_first_front_hydraulic\x18p \x01(\bH\x89\x01R\x16asfFirstFrontHydraulic\x88\x01\x01\x12A\n" +
	"\x1aasf_second_front_hydraulic\x18q \x01(\bH\x8a\x01R\x17asfSecondFrontHydraulic\x88\x01\x01\x12?\n" +
	"\x19asf_third_front_hydraulic\x18r \x01(\bH\x8b\x01R\x16asfThirdFrontHydraulic\x88\x01\x01\x12A\n" +
	"\x1aasf_fourth_front_hydraulic\x18s \x01(\bH\x8c\x01R\x17asfFourthFrontHydraulic\x88\x01\x01\x12B\n" +
	"\x1basf_front_three_point_hitch\x18t \x01(\bH\x8d\x01R\x17asfFrontThreePointHitch\x88\x01\x01\x12@\n" +
	"\x1aasf_rear_three_point_hitch\x18u \x01(\bH\x8e\x01R\x16asfRearThreePointHitch\x88\x01\x01\x12<\n" +
	"\x18asf_front_power_take_off\x18v \x01(\bH\x8f\x01R\x14asfFrontPowerTakeOff\x88\x01\x01\x12:\n" +
	"\x17asf_rear_power_take_off\x18w \x01(\bH\x90\x01R\x13asfRearPowerTakeOff\x88\x01\x01\x120\n" +
	"\x11asf_mowing_active\x18x \x01(\bH\x91\x01R\x0fasfMowingActive\x88\x01\x01\x126\n" +
	"\x14asf_threshing_active\x18y \x01(\bH\x92\x01R\x12asfThreshingActive\x88\x01\x01\x12F\n" +
	"\x1dasf_grain_release_from_hopper\x18z \x01(\bH\x93\x01R\x19asfGrainReleaseFromHopper\x88\x01\x01\x12>\n" +
	"\x19asf_grain_tank_is100_full\x18{ \x01(\bH\x94\x01R\x15asfGrainTankIs100Full\x88\x01\x01\x12<\n" +
	"\x18asf_grain_tank_is70_full\x18| \x01(\bH\x95\x01R\x14asfGrainTankIs70Full\x88\x01\x01\x12<\n" +
	"\x18asf_grain_tank_is_opened\x18} \x01(\bH\x96\x01R\x14asfGrainTankIsOpened\x88\x01\x01\x122\n" +
	"\x12asf_unloader_drive\x18~ \x01(\bH\x97\x01R\x10asfUnloaderDrive\x88\x01\x01\x12Q\n" +
	"#asf_cleaning_fan_control_turned_off\x18\x7f \x01(\bH\x98\x01R\x1easfCleaningFanControlTurnedOff\x88\x01\x01\x12V\n" +
	"%asf_threshing_drum_control_turned_off\x18\x80\x01 \x01(\bH\x99\x01R asfThreshingDrumControlTurnedOff\x88\x01\x01\x12C\n" +
	"\x1basf_straw_walker_is_clogged\x18\x81\x01 \x01(\bH\x9a\x01R\x17asfStrawWalkerIsClogged\x88\x01\x01\x12k\n" +
	"0asf_excessive_clearance_under_the_threshing_drum\x18\x82\x01 \x01(\bH\x9b\x01R*asfExcessiveClearanceUnderTheThreshingDrum\x88\x01\x01\x12\x88\x01\n" +
	"@asf_low_temperature_of_drive_system_hydraulics_less_than5_grades\x18\x83\x01 \x01(\bH\x9c\x01R7asfLowTemperatureOfDriveSystemHydraulicsLessThan5Grades\x88\x01\x01\x12\x92\x01\n" +
	"Easf_high_temperature_of_drive_system_hydraulics_greater_than86_grades\x18\x84\x01 \x01(\bH\x9d\x01R<asfHighTemperatureOfDriveSystemHydraulicsGreaterThan86Grades\x88\x01\x01\x12O\n" +
	"\"asf_ear_auger_speed_below_the_norm\x18\x85\x01 \x01(\bH\x9e\x01R\x1casfEarAugerSpeedBelowTheNorm\x88\x01\x01\x12S\n" +
	"$asf_grain_auger_speed_below_the_norm\x18\x86\x01 \x01(\bH\x9f\x01R\x1easfGrainAugerSpeedBelowTheNorm\x88\x01\x01\x12W\n" +
	"&asf_straw_chooper_speed_below_the_norm\x18\x87\x01 \x01(\bH\xa0\x01R asfStrawChooperSpeedBelowTheNorm\x88\x01\x01\x12U\n" +
	"%asf_straw_shaker_speed_below_the_norm\x18\x88\x01 \x01(\bH\xa1\x01R\x1fasfStrawShakerSpeedBelowTheNorm\x88\x01\x01\x12J\n" +
	"\x1fasf_feeder_speed_below_the_norm\x18\x89\x01 \x01(\bH\xa2\x01R\x1aasfFeederSpeedBelowTheNorm\x88\x01\x01\x12G\n" +
	"\x1dasf_straw_chopper_switched_on\x18\x8a\x01 \x01(\bH\xa3\x01R\x19asfStrawChopperSwitchedOn\x88\x01\x01\x12@\n" +
	"\x19asf_corn_header_connected\x18\x8b\x01 \x01(\bH\xa4\x01R\x16asfCornHeaderConnected\x88\x01\x01\x12B\n" +
	"\x1aasf_grain_header_connected\x18\x8c\x01 \x01(\bH\xa5\x01R\x17asfGrainHeaderConnected\x88\x01\x01\x12I\n" +
	"\x1easf_feeder_reverse_switched_on\x18\x8d\x01 \x01(\bH\xa6\x01R\x1aasfFeederReverseSwitchedOn\x88\x01\x01\x12x\n" +
	"8asf_the_pressure_filter_of_the_hydraulic_pump_is_clogged\x18\x8e\x01 \x01(\bH\xa7\x01R/asfThePressureFilterOfTheHydraulicPumpIsClogged\x88\x01\x01\x12Q\n" +
	"\"asf_adapter_pressure_filter_sensor\x18\x8f\x01 \x01(\bH\xa8\x01R\x1easfAdapterPressureFilterSensor\x88\x01\x01\x12L\n" +
	"\x1fasf_service2_required_indicator\x18\x90\x01 \x01(\bH\xa9\x01R\x1casfService2RequiredIndicator\x88\x01\x01\x12Q\n" +
	"\"asf_drain_filter_clogged_indicator\x18\x91\x01 \x01(\bH\xaa\x01R\x1easfDrainFilterCloggedIndicator\x88\x01\x01\x129\n" +
	"\x15asf_section1_spraying\x18\x92\x01 \x01(\bH\xab\x01R\x13asfSection1Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section2_spraying\x18\x93\x01 \x01(\bH\xac\x01R\x13asfSection2Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section3_spraying\x18\x94\x01 \x01(\bH\xad\x01R\x13asfSection3Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section4_spraying\x18\x95\x01 \x01(\bH\xae\x01R\x13asfSection4Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section5_spraying\x18\x96\x01 \x01(\bH\xaf\x01R\x13asfSection5Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section6_spraying\x18\x97\x01 \x01(\bH\xb0\x01R\x13asfSection6Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section7_spraying\x18\x98\x01 \x01(\bH\xb1\x01R\x13asfSection7Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section8_spraying\x18\x99\x01 \x01(\bH\xb2\x01R\x13asfSection8Spraying\x88\x01\x01\x129\n" +
	"\x15asf_section9_spraying\x18\x9a\x01 \x01(\bH\xb3\x01R\x13asfSection9Spraying\x88\x01\x01\x12*\n" +
	"\rusf_spreading\x18\x9b\x01 \x01(\bH\xb4\x01R\fusfSpreading\x88\x01\x01\x129\n" +
	"\x15usf_pouring_chemicals\x18\x9c\x01 \x01(\bH\xb5\x01R\x13usfPouringChemicals\x88\x01\x01\x121\n" +
	"\x11usf_conveyor_belt\x18\x9d\x01 \x01(\bH\xb6\x01R\x0fusfConveyorBelt\x88\x01\x01\x12I\n" +
	"\x1eusf_salt_spreaders_drive_wheel\x18\x9e\x01 \x01(\bH\xb7\x01R\x1ausfSaltSpreadersDriveWheel\x88\x01\x01\x12&\n" +
	"\vusf_brushes\x18\x9f\x01 \x01(\bH\xb8\x01R\n" +
	"usfBrushes\x88\x01\x01\x123\n" +
	"\x12usf_vacuum_cleaner\x18\xa0\x01 \x01(\bH\xb9\x01R\x10usfVacuumCleaner\x88\x01\x01\x12/\n" +
	"\x10usf_water_supply\x18\xa1\x01 \x01(\bH\xba\x01R\x0eusfWaterSupply\x88\x01\x01\x12-\n" +
	"\x0fusf_liquid_pump\x18\xa3\x01 \x01(\bH\xbb\x01R\rusfLiquidPump\x88\x01\x01\x12G\n" +
	"\x1dusf_unloading_from_the_hopper\x18\xa4\x01 \x01(\bH\xbc\x01R\x19usfUnloadingFromTheHopper\x88\x01\x01\x12f\n" +
	".usf_low_salt_sand_level_in_container_indicator\x18\xa5\x01 \x01(\bH\xbd\x01R'usfLowSaltSandLevelInContainerIndicator\x88\x01\x01\x12_\n" +
	"*usf_low_water_level_in_container_indicator\x18\xa6\x01 \x01(\bH\xbe\x01R$usfLowWaterLevelInContainerIndicator\x88\x01\x01\x12*\n" +
	"\rusf_chemicals\x18\xa7\x01 \x01(\bH\xbf\x01R\fusfChemicals\x88\x01\x01\x12,\n" +
	"\x0eusf_compressor\x18\xa8\x01 \x01(\bH\xc0\x01R\rusfCompressor\x88\x01\x01\x12?\n" +
	"\x19usf_water_valve_is_opened\x18\xa9\x01 \x01(\bH\xc1\x01R\x15usfWaterValveIsOpened\x88\x01\x01\x12L\n" +
	" usf_cabin_moved_up_status_active\x18\xaa\x01 \x01(\bH\xc2\x01R\x1busfCabinMovedUpStatusActive\x88\x01\x01\x12P\n" +
	"\"usf_cabin_moved_down_status_active\x18\xab\x01 \x01(\bH\xc3\x01R\x1dusfCabinMovedDownStatusActive\x88\x01\x01\x12O\n" +
	"!usf_hydraulics_work_not_permitted\x18\xac\x01 \x01(\bH\xc4\x01R\x1dusfHydraulicsWorkNotPermitted\x88\x01\x01\x12h\n" +
	"/cisf_section1_presence_of_fluid_in_the_downpipe\x18\xad\x01 \x01(\bH\xc5\x01R(cisfSection1PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section1_filled\x18\xae\x01 \x01(\bH\xc6\x01R\x12cisfSection1Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section1_overfilled\x18\xaf\x01 \x01(\bH\xc7\x01R\x16cisfSection1Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section2_presence_of_fluid_in_the_downpipe\x18\xb0\x01 \x01(\bH\xc8\x01R(cisfSection2PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section2_filled\x18\xb1\x01 \x01(\bH\xc9\x01R\x12cisfSection2Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section2_overfilled\x18\xb2\x01 \x01(\bH\xca\x01R\x16cisfSection2Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section3_presence_of_fluid_in_the_downpipe\x18\xb3\x01 \x01(\bH\xcb\x01R(cisfSection3PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section3_filled\x18\xb4\x01 \x01(\bH\xcc\x01R\x12cisfSection3Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section3_overfilled\x18\xb5\x01 \x01(\bH\xcd\x01R\x16cisfSection3Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section4_presence_of_fluid_in_the_downpipe\x18\xb6\x01 \x01(\bH\xce\x01R(cisfSection4PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section4_filled\x18\xb7\x01 \x01(\bH\xcf\x01R\x12cisfSection4Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section4_overfilled\x18\xb8\x01 \x01(\bH\xd0\x01R\x16cisfSection4Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section5_presence_of_fluid_in_the_downpipe\x18\xb9\x01 \x01(\bH\xd1\x01R(cisfSection5PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section5_filled\x18\xba\x01 \x01(\bH\xd2\x01R\x12cisfSection5Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section5_overfilled\x18\xbb\x01 \x01(\bH\xd3\x01R\x16cisfSection5Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section6_presence_of_fluid_in_the_downpipe\x18\xbc\x01 \x01(\bH\xd4\x01R(cisfSection6PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section6_filled\x18\xbd\x01 \x01(\bH\xd5\x01R\x12cisfSection6Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section6_overfilled\x18\xbe\x01 \x01(\bH\xd6\x01R\x16cisfSection6Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section7_presence_of_fluid_in_the_downpipe\x18\xbf\x01 \x01(\bH\xd7\x01R(cisfSection7PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section7_filled\x18\xc0\x01 \x01(\bH\xd8\x01R\x12cisfSection7Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section7_overfilled\x18\xc1\x01 \x01(\bH\xd9\x01R\x16cisfSection7Overfilled\x88\x01\x01\x12h\n" +
	"/cisf_section8_presence_of_fluid_in_the_downpipe\x18\xc2\x01 \x01(\bH\xda\x01R(cisfSection8PresenceOfFluidInTheDownpipe\x88\x01\x01\x127\n" +
	"\x14cisf_section8_filled\x18\xc3\x01 \x01(\bH\xdb\x01R\x12cisfSection8Filled\x88\x01\x01\x12?\n" +
	"\x18cisf_section8_overfilled\x18\xc4\x01 \x01(\bH\xdc\x01R\x16cisfSection8Overfilled\x88\x01\x01\x12>\n" +
	"\x18distance_to_next_service\x18\xc5\x01 \x01(\rH\xdd\x01R\x15distanceToNextService\x88\x01\x01\x12'\n" +
	"\fcng_level_kg\x18\xc6\x01 \x01(\rH\xde\x01R\n" +
	"cngLevelKg\x88\x01\x01\x12G\n" +
	"\x1ddistance_from_need_of_service\x18\xc7\x01 \x01(\rH\xdf\x01R\x19distanceFromNeedOfService\x88\x01\x01\x12B\n" +
	"\x1adistance_from_last_service\x18\xc8\x01 \x01(\rH\xe0\x01R\x17distanceFromLastService\x88\x01\x01\x126\n" +
	"\x14time_to_next_service\x18\xc9\x01 \x01(\rH\xe1\x01R\x11timeToNextService\x88\x01\x01\x12?\n" +
	"\x19time_from_need_of_service\x18\xca\x01 \x01(\rH\xe2\x01R\x15timeFromNeedOfService\x88\x01\x01\x12:\n" +
	"\x16time_from_last_serivce\x18\xcb\x01 \x01(\rH\xe3\x01R\x13timeFromLastSerivce\x88\x01\x01\x12E\n" +
	"\x1cdistance_to_next_oil_service\x18\xcc\x01 \x01(\rH\xe4\x01R\x18distanceToNextOilService\x88\x01\x01\x12=\n" +
	"\x18time_to_next_oil_service\x18\xcd\x01 \x01(\rH\xe5\x01R\x14timeToNextOilService\x88\x01\x01\x125\n" +
	"\x13lvcan_vehicle_range\x18\xce\x01 \x01(\rH\xe6\x01R\x11lvcanVehicleRange\x88\x01\x01\x12<\n" +
	"\x17lvcan_total_cng_counted\x18\xcf\x01 \x01(\rH\xe7\x01R\x14lvcanTotalCngCounted\x88\x01\x01\x12/\n" +
	"\x10total_bale_count\x18\xd0\x01 \x01(\rH\xe8\x01R\x0etotalBaleCount\x88\x01\x01\x12$\n" +
	"\n" +
	"bale_count\x18\xd1\x01 \x01(\rH\xe9\x01R\tbaleCount\x88\x01\x01\x12+\n" +
	"\x0ecut_bale_count\x18\xd2\x01 \x01(\rH\xea\x01R\fcutBaleCount\x88\x01\x01\x12&\n" +
	"\vbale_slices\x18\xd3\x01 \x01(\rH\xeb\x01R\n" +
	"baleSlices\x88\x01\x01\x124\n" +
	"\x12lvcan_maxroadspeed\x18\xd4\x01 \x01(\rH\xec\x01R\x11lvcanMaxroadspeed\x88\x01\x01\x12>\n" +
	"\x17lvcan_exceededroadspeed\x18\xd5\x01 \x01(\rH\xed\x01R\x16lvcanExceededroadspeed\x88\x01\x01\x12?\n" +
	"\x18lvcan_rsf_speedlimitsign\x18\xd6\x01 \x01(\bH\xee\x01R\x16lvcanRsfSpeedlimitsign\x88\x01\x01\x12L\n" +
	" lvcan_rsf_end_of_speed_limitsign\x18\xd7\x01 \x01(\bH\xef\x01R\x1blvcanRsfEndOfSpeedLimitsign\x88\x01\x01\x12>\n" +
	"\x18lvcan_rsf_speed_exceeded\x18\xd8\x01 \x01(\bH\xf0\x01R\x15lvcanRsfSpeedExceeded\x88\x01\x01\x12I\n" +
	"\x1elvcan_rsf_time_speed_limitsign\x18\xd9\x01 \x01(\bH\xf1\x01R\x1alvcanRsfTimeSpeedLimitsign\x88\x01\x01\x12J\n" +
	"\x1flvcan_rsf_wthr_speed_limit_sign\x18\xda\x01 \x01(\bH\xf2\x01R\x1alvcanRsfWthrSpeedLimitSign\x88\x01\x01\x12;\n" +
	"\x16axl_calibration_status\x18\xf6\x01 \x01(\rH\xf3\x01R\x14axlCalibrationStatus\x88\x01\x01\x12\"\n" +
	"\tble_rfid1\x18\xf7\x01 \x01(\x04H\xf4\x01R\bbleRfid1\x88\x01\x01\x12\"\n" +
	"\tble_rfid2\x18\xf8\x01 \x01(\x04H\xf5\x01R\bbleRfid2\x88\x01\x01\x12\"\n" +
	"\tble_rfid3\x18\xf9\x01 \x01(\x04H\xf6\x01R\bbleRfid3\x88\x01\x01\x12\"\n" +
	"\tble_rfid4\x18\xfa\x01 \x01(\x04H\xf7\x01R\bbleRfid4\x88\x01\x01\x123\n" +
	"\x12ble_button1_state1\x18\xfb\x01 \x01(\bH\xf8\x01R\x10bleButton1State1\x88\x01\x01\x123\n" +
	"\x12ble_button1_state2\x18\xfc\x01 \x01(\bH\xf9\x01R\x10bleButton1State2\x88\x01\x01\x123\n" +
	"\x12ble_button1_state3\x18\xfd\x01 \x01(\bH\xfa\x01R\x10bleButton1State3\x88\x01\x01\x123\n" +
	"\x12ble_button1_state4\x18\xfe\x01 \x01(\bH\xfb\x01R\x10bleButton1State4\x88\x01\x01\x123\n" +
	"\x12ble_button2_state1\x18\xff\x01 \x01(\bH\xfc\x01R\x10bleButton2State1\x88\x01\x01\x123\n" +
	"\x12ble_button2_state2\x18\x80\x02 \x01(\bH\xfd\x01R\x10bleButton2State2\x88\x01\x01\x123\n" +
	"\x12ble_button2_state3\x18\x81\x02 \x01(\bH\xfe\x01R\x10bleButton2State3\x88\x01\x01\x123\n" +
	"\x12ble_button2_state4\x18\x82\x02 \x01(\bH\xff\x01R\x10bleButton2State4\x88\x01\x01\x12,\n" +
	"\x0efrequency_din1\x18\x83\x02 \x01(\rH\x80\x02R\rfrequencyDin1\x88\x01\x01\x12,\n" +
	"\x0efrequency_din2\x18\x84\x02 \x01(\rH\x81\x02R\rfrequencyDin2\x88\x01\x01\x128\n" +
	"\x14connectivity_quality\x18\x85\x02 \x01(\rH\x82\x02R\x13connectivityQuality\x88\x01\x01\x12F\n" +
	"\tgeo_fence\x18\x86\x02 \x03(\v2(.com.navzy.packets.Compact.GeoFenceEntryR\bgeoFence\x12*\n" +
	"\rauto_geofence\x18\x87\x02 \x01(\bH\x83\x02R\fautoGeofence\x88\x01\x01\x12\x19\n" +
	"\x04trip\x18\x88\x02 \x01(\rH\x84\x02R\x04trip\x88\x01\x01\x12*\n" +
	"\rover_speeding\x18\x89\x02 \x01(\rH\x85\x02R\foverSpeeding\x88\x01\x01\x12/\n" +
	"\x10crash_trace_data\x18\x8a\x02 \x01(\fH\x86\x02R\x0ecrashTraceData\x88\x01\x01\x129\n" +
	"\x15blood_alcohol_content\x18\x8b\x02 \x01(\rH\x87\x02R\x13bloodAlcoholContent\x88\x01\x01\x12\x1d\n" +
	"\x06idling\x18\x8c\x02 \x01(\bH\x88\x02R\x06idling\x88\x01\x01\x123\n" +
	"\x12green_driving_type\x18\x8d\x02 \x01(\rH\x89\x02R\x10greenDrivingType\x88\x01\x01\x12\x1d\n" +
	"\x06towing\x18\x8e\x02 \x01(\bH\x8a\x02R\x06towing\x88\x01\x01\x12\x1d\n" +
	"\x06unplug\x18\x8f\x02 \x01(\bH\x8b\x02R\x06unplug\x88\x01\x01\x12.\n" +
	"\x0fcrash_detection\x18\x90\x02 \x01(\rH\x8c\x02R\x0ecrashDetection\x88\x01\x01\x12'\n" +
	"\vimmobilizer\x18\x91\x02 \x01(\rH\x8d\x02R\vimmobilizer\x88\x01\x01\x125\n" +
	"\x13green_driving_value\x18\x92\x02 \x01(\rH\x8e\x02R\x11greenDrivingValue\x88\x01\x01\x12\x1f\n" +
	"\ajamming\x18\x93\x02 \x01(\bH\x8f\x02R\ajamming\x88\x01\x01\x12\x1d\n" +
	"\x06iccid2\x18\x94\x02 \x01(\x04H\x90\x02R\x06iccid2\x88\x01\x01\x12F\n" +
	"\x1cgreen_driving_event_duration\x18\x95\x02 \x01(\rH\x91\x02R\x19greenDrivingEventDuration\x88\x01\x01\x12\x1b\n" +
	"\x05alarm\x18\x96\x02 \x01(\bH\x92\x02R\x05alarm\x88\x01\x01\x12&\n" +
	"\veco_maximum\x18\x97\x02 \x01(\x04H\x93\x02R\n" +
	"ecoMaximum\x88\x01\x01\x12&\n" +
	"\veco_average\x18\x98\x02 \x01(\x04H\x94\x02R\n" +
	"ecoAverage\x88\x01\x01\x12(\n" +
	"\feco_duration\x18\x99\x02 \x01(\rH\x95\x02R\vecoDuration\x88\x01\x01\x12*\n" +
	"\rdriving_state\x18\x9a\x02 \x01(\rH\x96\x02R\fdrivingState\x88\x01\x01\x12.\n" +
	"\x0fdriving_records\x18\x9b\x02 \x01(\rH\x97\x02R\x0edrivingRecords\x88\x01\x01\x125\n" +
	"\x13crash_event_counter\x18\x9c\x02 \x01(\rH\x98\x02R\x11crashEventCounter\x88\x01\x01\x12(\n" +
	"\fgnss_jamming\x18\x9d\x02 \x01(\rH\x99\x02R\vgnssJamming\x88\x01\x01\x12(\n" +
	"\fprivate_mode\x18\x9e\x02 \x01(\rH\x9a\x02R\vprivateMode\x88\x01\x01\x125\n" +
	"\x13ignition_on_counter\x18\x9f\x02 \x01(\rH\x9b\x02R\x11ignitionOnCounter\x88\x01\x01\x12A\n" +
	"\x19motorcycle_fall_detection\x18\xa0\x02 \x01(\rH\x9c\x02R\x17motorcycleFallDetection\x88\x01\x01\x12\x17\n" +
	"\x03vin\x18\xa1\x02 \x01(\tH\x9d\x02R\x03vin\x88\x01\x01\x12)\n" +
	"\rnumber_of_dtc\x18\xa2\x02 \x01(\rH\x9e\x02R\vnumberOfDtc\x88\x01\x01\x12&\n" +
	"\vengine_load\x18\xa3\x02 \x01(\rH\x9f\x02R\n" +
	"engineLoad\x88\x01\x01\x126\n" +
	"\x13coolant_temperature\x18\xa4\x02 \x01(\x05H\xa0\x02R\x12coolantTemperature\x88\x01\x01\x12-\n" +
	"\x0fshort_fuel_trim\x18\xa5\x02 \x01(\x05H\xa1\x02R\rshortFuelTrim\x88\x01\x01\x12*\n" +
	"\rfuel_pressure\x18\xa6\x02 \x01(\rH\xa2\x02R\ffuelPressure\x88\x01\x01\x12$\n" +
	"\n" +
	"intake_map\x18\xa7\x02 \x01(\rH\xa3\x02R\tintakeMap\x88\x01\x01\x12$\n" +
	"\n" +
	"engine_rpm\x18\xa8\x02 \x01(\rH\xa4\x02R\tengineRpm\x88\x01\x01\x12*\n" +
	"\rvehicle_speed\x18\xa9\x02 \x01(\rH\xa5\x02R\fvehicleSpeed\x88\x01\x01\x12,\n" +
	"\x0etiming_advance\x18\xaa\x02 \x01(\x05H\xa6\x02R\rtimingAdvance\x88\x01\x01\x12;\n" +
	"\x16intake_air_temperature\x18\xab\x02 \x01(\x05H\xa7\x02R\x14intakeAirTemperature\x88\x01\x01\x12\x17\n" +
	"\x03maf\x18\xac\x02 \x01(\rH\xa8\x02R\x03maf\x88\x01\x01\x122\n" +
	"\x11throttle_position\x18\xad\x02 \x01(\rH\xa9\x02R\x10throttlePosition\x88\x01\x01\x12B\n" +
	"\x1aruntime_since_engine_start\x18\xae\x02 \x01(\rH\xaa\x02R\x17runtimeSinceEngineStart\x88\x01\x01\x12>\n" +
	"\x18distance_traveled_mil_on\x18\xaf\x02 \x01(\rH\xab\x02R\x15distanceTraveledMilOn\x88\x01\x01\x12D\n" +
	"\x1brelative_fuel_rail_pressure\x18\xb0\x02 \x01(\rH\xac\x02R\x18relativeFuelRailPressure\x88\x01\x01\x12@\n" +
	"\x19direct_fuel_rail_pressure\x18\xb1\x02 \x01(\rH\xad\x02R\x16directFuelRailPressure\x88\x01\x01\x12*\n" +
	"\rcommanded_egr\x18\xb2\x02 \x01(\rH\xae\x02R\fcommandedEgr\x88\x01\x01\x12\"\n" +
	"\tegr_error\x18\xb3\x02 \x01(\x05H\xaf\x02R\begrError\x88\x01\x01\x123\n" +
	"\x12fuel_level_percent\x18\xb4\x02 \x01(\rH\xb0\x02R\x10fuelLevelPercent\x88\x01\x01\x12B\n" +
	"\x1adistance_since_codes_clear\x18\xb5\x02 \x01(\rH\xb1\x02R\x17distanceSinceCodesClear\x88\x01\x01\x126\n" +
	"\x13barometric_pressure\x18\xb6\x02 \x01(\rH\xb2\x02R\x12barometricPressure\x88\x01\x01\x12;\n" +
	"\x16control_module_voltage\x18\xb7\x02 \x01(\rH\xb3\x02R\x14controlModuleVoltage\x88\x01\x01\x125\n" +
	"\x13absolute_load_value\x18\xb8\x02 \x01(\rH\xb4\x02R\x11absoluteLoadValue\x88\x01\x01\x12\"\n" +
	"\tfuel_type\x18\xb9\x02 \x01(\rH\xb5\x02R\bfuelType\x88\x01\x01\x12=\n" +
	"\x17ambient_air_temperature\x18\xba\x02 \x01(\x05H\xb6\x02R\x15ambientAirTemperature\x88\x01\x01\x125\n" +
	"\x14time_run_with_mil_on\x18\xbb\x02 \x01(\rH\xb7\x02R\x10timeRunWithMilOn\x88\x01\x01\x12>\n" +
	"\x18time_since_codes_cleared\x18\xbc\x02 \x01(\rH\xb8\x02R\x15timeSinceCodesCleared\x88\x01\x01\x12D\n" +
	"\x1babsolute_fuel_rail_pressure\x18\xbd\x02 \x01(\rH\xb9\x02R\x18absoluteFuelRailPressure\x88\x01\x01\x12>\n" +
	"\x18hybrid_battery_pack_life\x18\xbe\x02 \x01(\rH\xba\x02R\x15hybridBatteryPackLife\x88\x01\x01\x12;\n" +
	"\x16engine_oil_temperature\x18\xbf\x02 \x01(\rH\xbb\x02R\x14engineOilTemperature\x88\x01\x01\x129\n" +
	"\x15fuel_injection_timing\x18\xc0\x02 \x01(\x05H\xbc\x02R\x13fuelInjectionTiming\x88\x01\x01\x12=\n" +
	"\x17throttle_position_group\x18\xc1\x02 \x01(\rH\xbd\x02R\x15throttlePositionGroup\x88\x01\x01\x12=\n" +
	"\x17commanded_equivalence_r\x18\xc2\x02 \x01(\rH\xbe\x02R\x15commandedEquivalenceR\x88\x01\x01\x121\n" +
	"\x11intake_map2_bytes\x18\xc3\x02 \x01(\rH\xbf\x02R\x0fintakeMap2Bytes\x88\x01\x01\x129\n" +
	"\x15hybrid_system_voltage\x18\xc4\x02 \x01(\rH\xc0\x02R\x13hybridSystemVoltage\x88\x01\x01\x129\n" +
	"\x15hybrid_system_current\x18\xc5\x02 \x01(\x05H\xc1\x02R\x13hybridSystemCurrent\x88\x01\x01\x12&\n" +
	"\vfault_codes\x18\xc6\x02 \x01(\tH\xc2\x02R\n" +
	"faultCodes\x88\x01\x01\x12\"\n" +
	"\tfuel_rate\x18\xc7\x02 \x01(\rH\xc3\x02R\bfuelRate\x88\x01\x01\x128\n" +
	"\x15obd_oem_total_mileage\x18\xc8\x02 \x01(\rH\xc4\x02R\x12obdOemTotalMileage\x88\x01\x01\x122\n" +
	"\x12obd_oem_fuel_level\x18\xc9\x02 \x01(\rH\xc5\x02R\x0fobdOemFuelLevel\x88\x01\x01\x12B\n" +
	"\x1aoem_distance_until_service\x18\xca\x02 \x01(\rH\xc6\x02R\x17oemDistanceUntilService\x88\x01\x01\x12>\n" +
	"\x18oem_battery_charge_state\x18\xcb\x02 \x01(\bH\xc7\x02R\x15oemBatteryChargeState\x88\x01\x01\x12>\n" +
	"\x18oem_battery_charge_level\x18\xcc\x02 \x01(\rH\xc8\x02R\x15oemBatteryChargeLevel\x88\x01\x01\x12;\n" +
	"\x16oem_remaining_distance\x18\xcd\x02 \x01(\rH\xc9\x02R\x14oemRemainingDistance\x88\x01\x01\x12C\n" +
	"\x1boem_battery_state_of_health\x18\xce\x02 \x01(\rH\xca\x02R\x17oemBatteryStateOfHealth\x88\x01\x01\x12=\n" +
	"\x17oem_battery_temperature\x18\xcf\x02 \x01(\x05H\xcb\x02R\x15oemBatteryTemperature\x88\x01\x01\x12\x1d\n" +
	"\x06beacon\x18\xd0\x02 \x01(\fH\xcc\x02R\x06beacon\x88\x01\x01\x12>\n" +
	"\x18advanced_ble_beacon_data\x18\xd1\x02 \x01(\fH\xcd\x02R\x15advancedBleBeaconData\x88\x01\x01\x120\n" +
	"\x10ble_temperature1\x18\xd2\x02 \x01(\x05H\xce\x02R\x0fbleTemperature1\x88\x01\x01\x120\n" +
	"\x10ble_temperature2\x18\xd3\x02 \x01(\x05H\xcf\x02R\x0fbleTemperature2\x88\x01\x01\x120\n" +
	"\x10ble_temperature3\x18\xd4\x02 \x01(\x05H\xd0\x02R\x0fbleTemperature3\x88\x01\x01\x120\n" +
	"\x10ble_temperature4\x18\xd5\x02 \x01(\x05H\xd1\x02R\x0fbleTemperature4\x88\x01\x01\x12(\n" +
	"\fble_battery1\x18\xd6\x02 \x01(\rH\xd2\x02R\vbleBattery1\x88\x01\x01\x12(\n" +
	"\fble_battery2\x18\xd7\x02 \x01(\rH\xd3\x02R\vbleBattery2\x88\x01\x01\x12(\n" +
	"\fble_battery3\x18\xd8\x02 \x01(\rH\xd4\x02R\vbleBattery3\x88\x01\x01\x12(\n" +
	"\fble_battery4\x18\xd9\x02 \x01(\rH\xd5\x02R\vbleBattery4\x88\x01\x01\x12*\n" +
	"\rble_humidity1\x18\xda\x02 \x01(\rH\xd6\x02R\fbleHumidity1\x88\x01\x01\x12*\n" +
	"\rble_humidity2\x18\xdb\x02 \x01(\rH\xd7\x02R\fbleHumidity2\x88\x01\x01\x12*\n" +
	"\rble_humidity3\x18\xdc\x02 \x01(\rH\xd8\x02R\fbleHumidity3\x88\x01\x01\x12*\n" +
	"\rble_humidity4\x18\xdd\x02 \x01(\rH\xd9\x02R\fbleHumidity4\x88\x01\x01\x12-\n" +
	"\x0fble_fuel_level1\x18\xde\x02 \x01(\rH\xda\x02R\rbleFuelLevel1\x88\x01\x01\x12-\n" +
	"\x0fble_fuel_level2\x18\xdf\x02 \x01(\rH\xdb\x02R\rbleFuelLevel2\x88\x01\x01\x12-\n" +
	"\x0fble_fuel_level3\x18\xe0\x02 \x01(\rH\xdc\x02R\rbleFuelLevel3\x88\x01\x01\x12-\n" +
	"\x0fble_fuel_level4\x18\xe1\x02 \x01(\rH\xdd\x02R\rbleFuelLevel4\x88\x01\x01\x125\n" +
	"\x13ble_fuel_frequency1\x18\xe2\x02 \x01(\rH\xde\x02R\x11bleFuelFrequency1\x88\x01\x01\x125\n" +
	"\x13ble_fuel_frequency2\x18\xe3\x02 \x01(\rH\xdf\x02R\x11bleFuelFrequency2\x88\x01\x01\x125\n" +
	"\x13ble_fuel_frequency3\x18\xe4\x02 \x01(\rH\xe0\x02R\x11bleFuelFrequency3\x88\x01\x01\x125\n" +
	"\x13ble_fuel_frequency4\x18\xe5\x02 \x01(\rH\xe1\x02R\x11bleFuelFrequency4\x88\x01\x01\x12.\n" +
	"\x0fble_luminosity1\x18\xe6\x02 \x01(\rH\xe2\x02R\x0ebleLuminosity1\x88\x01\x01\x12.\n" +
	"\x0fble_luminosity2\x18\xe7\x02 \x01(\rH\xe3\x02R\x0ebleLuminosity2\x88\x01\x01\x12.\n" +
	"\x0fble_luminosity3\x18\xe8\x02 \x01(\rH\xe4\x02R\x0ebleLuminosity3\x88\x01\x01\x12.\n" +
	"\x0fble_luminosity4\x18\xe9\x02 \x01(\rH\xe5\x02R\x0ebleLuminosity4\x88\x01\x01\x12(\n" +
	"\fble1_custom1\x18\xea\x02 \x01(\fH\xe6\x02R\vble1Custom1\x88\x01\x01\x12(\n" +
	"\fble1_custom2\x18\xeb\x02 \x01(\rH\xe7\x02R\vble1Custom2\x88\x01\x01\x12(\n" +
	"\fble1_custom3\x18\xec\x02 \x01(\rH\xe8\x02R\vble1Custom3\x88\x01\x01\x12(\n" +
	"\fble1_custom4\x18\xed\x02 \x01(\rH\xe9\x02R\vble1Custom4\x88\x01\x01\x12(\n" +
	"\fble1_custom5\x18\xee\x02 \x01(\rH\xea\x02R\vble1Custom5\x88\x01\x01\x12(\n" +
	"\fble2_custom1\x18\xef\x02 \x01(\fH\xeb\x02R\vble2Custom1\x88\x01\x01\x12(\n" +
	"\fble2_custom2\x18\xf0\x02 \x01(\rH\xec\x02R\vble2Custom2\x88\x01\x01\x12(\n" +
	"\fble2_custom3\x18\xf1\x02 \x01(\rH\xed\x02R\vble2Custom3\x88\x01\x01\x12(\n" +
	"\fble2_custom4\x18\xf2\x02 \x01(\rH\xee\x02R\vble2Custom4\x88\x01\x01\x12(\n" +
	"\fble2_custom5\x18\xf3\x02 \x01(\rH\xef\x02R\vble2Custom5\x88\x01\x01\x12(\n" +
	"\fble3_custom1\x18\xf4\x02 \x01(\fH\xf0\x02R\vble3Custom1\x88\x01\x01\x12(\n" +
	"\fble3_custom2\x18\xf5\x02 \x01(\rH\xf1\x02R\vble3Custom2\x88\x01\x01\x12(\n" +
	"\fble3_custom3\x18\xf6\x02 \x01(\rH\xf2\x02R\vble3Custom3\x88\x01\x01\x12(\n" +
	"\fble3_custom4\x18\xf7\x02 \x01(\rH\xf3\x02R\vble3Custom4\x88\x01\x01\x12(\n" +
	"\fble3_custom5\x18\xf8\x02 \x01(\rH\xf4\x02R\vble3Custom5\x88\x01\x01\x12(\n" +
	"\fble4_custom1\x18\xf9\x02 \x01(\fH\xf5\x02R\vble4Custom1\x88\x01\x01\x12(\n" +
	"\fble4_custom2\x18\xfa\x02 \x01(\rH\xf6\x02R\vble4Custom2\x88\x01\x01\x12(\n" +
	"\fble4_custom3\x18\xfb\x02 \x01(\rH\xf7\x02R\vble4Custom3\x88\x01\x01\x12(\n" +
	"\fble4_custom4\x18\xfc\x02 \x01(\rH\xf8\x02R\vble4Custom4\x88\x01\x01\x12(\n" +
	"\fble4_custom5\x18\xfd\x02 \x01(\rH\xf9\x02R\vble4Custom5\x88\x01\x01\x12C\n" +
	"\x1aaccelerator_pedal_position\x18\xfe\x02 \x01(\rH\xfa\x02R\x18acceleratorPedalPosition\x88\x01\x01\x12*\n" +
	"\rfuel_consumed\x18\xff\x02 \x01(\rH\xfb\x02R\ffuelConsumed\x88\x01\x01\x121\n" +
	"\x11fuel_level_liters\x18\x80\x03 \x01(\rH\xfc\x02R\x0ffuelLevelLiters\x88\x01\x01\x12*\n" +
	"\rtotal_mileage\x18\x81\x03 \x01(\rH\xfd\x02R\ftotalMileage\x88\x01\x01\x12,\n" +
	"\x0eprogram_number\x18\x82\x03 \x01(\rH\xfe\x02R\rprogramNumber\x88\x01\x01\x12&\n" +
	"\vmodule_id8b\x18\x83\x03 \x01(\x04H\xff\x02R\n" +
	"moduleId8b\x88\x01\x01\x12(\n" +
	"\fmodule_id17b\x18\x84\x03 \x01(\fH\x80\x03R\vmoduleId17b\x88\x01\x01\x12.\n" +
	"\x0fengine_worktime\x18\x85\x03 \x01(\rH\x81\x03R\x0eengineWorktime\x88\x01\x01\x12=\n" +
	"\x17engine_worktime_counted\x18\x86\x03 \x01(\rH\x82\x03R\x15engineWorktimeCounted\x88\x01\x01\x129\n" +
	"\x15total_mileage_counted\x18\x87\x03 \x01(\rH\x83\x03R\x13totalMileageCounted\x88\x01\x01\x129\n" +
	"\x15fuel_consumed_counted\x18\x88\x03 \x01(\rH\x84\x03R\x13fuelConsumedCounted\x88\x01\x01\x127\n" +
	"\x14adblue_level_percent\x18\x89\x03 \x01(\rH\x85\x03R\x12adblueLevelPercent\x88\x01\x01\x125\n" +
	"\x13adblue_level_liters\x18\x8a\x03 \x01(\rH\x86\x03R\x11adblueLevelLiters\x88\x01\x01\x12$\n" +
	"\n" +
	"axle1_load\x18\x8b\x03 \x01(\rH\x87\x03R\taxle1Load\x88\x01\x01\x12$\n" +
	"\n" +
	"axle2_load\x18\x8c\x03 \x01(\rH\x88\x03R\taxle2Load\x88\x01\x01\x12$\n" +
	"\n" +
	"axle3_load\x18\x8d\x03 \x01(\rH\x89\x03R\taxle3Load\x88\x01\x01\x12$\n" +
	"\n" +
	"axle4_load\x18\x8e\x03 \x01(\rH\x8a\x03R\taxle4Load\x88\x01\x01\x12$\n" +
	"\n" +
	"axle5_load\x18\x8f\x03 \x01(\rH\x8b\x03R\taxle5Load\x88\x01\x01\x125\n" +
	"\x13control_state_flags\x18\x90\x03 \x01(\rH\x8c\x03R\x11controlStateFlags\x88\x01\x01\x12G\n" +
	"\x1cagricultural_machinery_flags\x18\x91\x03 \x01(\x04H\x8d\x03R\x1aagriculturalMachineryFlags\x88\x01\x01\x12.\n" +
	"\x0fharvesting_time\x18\x92\x03 \x01(\rH\x8e\x03R\x0eharvestingTime\x88\x01\x01\x12-\n" +
	"\x0farea_of_harvest\x18\x93\x03 \x01(\rH\x8f\x03R\rareaOfHarvest\x88\x01\x01\x122\n" +
	"\x11mowing_efficiency\x18\x94\x03 \x01(\rH\x90\x03R\x10mowingEfficiency\x88\x01\x01\x121\n" +
	"\x11grain_mown_volume\x18\x95\x03 \x01(\rH\x91\x03R\x0fgrainMownVolume\x88\x01\x01\x12,\n" +
	"\x0egrain_moisture\x18\x96\x03 \x01(\rH\x92\x03R\rgrainMoisture\x88\x01\x01\x125\n" +
	"\x13harvesting_drum_rpm\x18\x97\x03 \x01(\rH\x93\x03R\x11harvestingDrumRpm\x88\x01\x01\x12@\n" +
	"\x19gap_under_harvesting_drum\x18\x98\x03 \x01(\rH\x94\x03R\x16gapUnderHarvestingDrum\x88\x01\x01\x127\n" +
	"\x14security_state_flags\x18\x99\x03 \x01(\x04H\x95\x03R\x12securityStateFlags\x88\x01\x01\x12P\n" +
	"!tachograph_total_vehicle_distance\x18\x9a\x03 \x01(\rH\x96\x03R\x1etachographTotalVehicleDistance\x88\x01\x01\x12*\n" +
	"\rtrip_distance\x18\x9b\x03 \x01(\rH\x97\x03R\ftripDistance\x88\x01\x01\x12?\n" +
	"\x18tachograph_vehicle_speed\x18\x9c\x03 \x01(\rH\x98\x03R\x16tachographVehicleSpeed\x88\x01\x01\x12B\n" +
	"\x1atacho_driver_card_presence\x18\x9d\x03 \x01(\rH\x99\x03R\x17tachoDriverCardPresence\x88\x01\x01\x12,\n" +
	"\x0edriver1_states\x18\x9e\x03 \x01(\rH\x9a\x03R\rdriver1States\x88\x01\x01\x12,\n" +
	"\x0edriver2_states\x18\x9f\x03 \x01(\rH\x9b\x03R\rdriver2States\x88\x01\x01\x12L\n" +
	"\x1fdriver1_continuous_driving_time\x18\xa0\x03 \x01(\rH\x9c\x03R\x1cdriver1ContinuousDrivingTime\x88\x01\x01\x12L\n" +
	"\x1fdriver2_continuous_driving_time\x18\xa1\x03 \x01(\rH\x9d\x03R\x1cdriver2ContinuousDrivingTime\x88\x01\x01\x12=\n" +
	"\x17driver1_cumulative_time\x18\xa2\x03 \x01(\rH\x9e\x03R\x15driver1CumulativeTime\x88\x01\x01\x12=\n" +
	"\x17driver2_cumulative_time\x18\xa3\x03 \x01(\rH\x9f\x03R\x15driver2CumulativeTime\x88\x01\x01\x12R\n" +
	"\"driver1_selected_activity_duration\x18\xa4\x03 \x01(\rH\xa0\x03R\x1fdriver1SelectedActivityDuration\x88\x01\x01\x12R\n" +
	"\"driver2_selected_activity_duration\x18\xa5\x03 \x01(\rH\xa1\x03R\x1fdriver2SelectedActivityDuration\x88\x01\x01\x12L\n" +
	"\x1fdriver1_cumulative_driving_time\x18\xa6\x03 \x01(\rH\xa2\x03R\x1cdriver1CumulativeDrivingTime\x88\x01\x01\x12L\n" +
	"\x1fdriver2_cumulative_driving_time\x18\xa7\x03 \x01(\rH\xa3\x03R\x1cdriver2CumulativeDrivingTime\x88\x01\x01\x12-\n" +
	"\x0fdriver1_id_high\x18\xa8\x03 \x01(\x04H\xa4\x03R\rdriver1IdHigh\x88\x01\x01\x12+\n" +
	"\x0edriver1_id_low\x18\xa9\x03 \x01(\x04H\xa5\x03R\fdriver1IdLow\x88\x01\x01\x12-\n" +
	"\x0fdriver2_id_high\x18\xaa\x03 \x01(\x04H\xa6\x03R\rdriver2IdHigh\x88\x01\x01\x12+\n" +
	"\x0edriver2_id_low\x18\xab\x03 \x01(\x04H\xa7\x03R\fdriver2IdLow\x88\x01\x01\x126\n" +
	"\x13battery_temperature\x18\xac\x03 \x01(\x05H\xa8\x03R\x12batteryTemperature\x88\x01\x01\x12/\n" +
	"\x10hv_battery_level\x18\xad\x03 \x01(\rH\xa9\x03R\x0ehvBatteryLevel\x88\x01\x01\x12$\n" +
	"\n" +
	"dtc_faults\x18\xae\x03 \x01(\rH\xaa\x03R\tdtcFaults\x88\x01\x01\x12'\n" +
	"\fslope_of_arm\x18\xaf\x03 \x01(\x05H\xab\x03R\n" +
	"slopeOfArm\x88\x01\x01\x12-\n" +
	"\x0frotation_of_arm\x18\xb0\x03 \x01(\x05H\xac\x03R\rrotationOfArm\x88\x01\x01\x12'\n" +
	"\feject_of_arm\x18\xb1\x03 \x01(\rH\xad\x03R\n" +
	"ejectOfArm\x88\x01\x01\x12L\n" +
	"\x1fhorizontal_distance_arm_vehicle\x18\xb2\x03 \x01(\rH\xae\x03R\x1chorizontalDistanceArmVehicle\x88\x01\x01\x12<\n" +
	"\x17height_arm_above_ground\x18\xb3\x03 \x01(\rH\xaf\x03R\x14heightArmAboveGround\x88\x01\x01\x12\"\n" +
	"\tdrill_rpm\x18\xb4\x03 \x01(\rH\xb0\x03R\bdrillRpm\x88\x01\x01\x12P\n" +
	"\"amount_of_spread_salt_square_meter\x18\xb5\x03 \x01(\rH\xb1\x03R\x1damountOfSpreadSaltSquareMeter\x88\x01\x01\x12P\n" +
	"\"amount_of_spread_fine_grained_salt\x18\xb7\x03 \x01(\rH\xb2\x03R\x1damountOfSpreadFineGrainedSalt\x88\x01\x01\x12G\n" +
	"\x1damount_of_coarse_grained_salt\x18\xb8\x03 \x01(\rH\xb3\x03R\x19amountOfCoarseGrainedSalt\x88\x01\x01\x12:\n" +
	"\x16amount_of_spread_dimix\x18\xb9\x03 \x01(\rH\xb4\x03R\x13amountOfSpreadDimix\x88\x01\x01\x12Z\n" +
	"'amount_of_spread_coarse_grained_calcium\x18\xba\x03 \x01(\rH\xb5\x03R\"amountOfSpreadCoarseGrainedCalcium\x88\x01\x01\x12O\n" +
	"!amount_of_spread_calcium_chloride\x18\xbb\x03 \x01(\rH\xb6\x03R\x1damountOfSpreadCalciumChloride\x88\x01\x01\x12M\n" +
	" amount_of_spread_sodium_chloride\x18\xbc\x03 \x01(\rH\xb7\x03R\x1camountOfSpreadSodiumChloride\x88\x01\x01\x12S\n" +
	"#amount_of_spread_magnesium_chloride\x18\xbd\x03 \x01(\rH\xb8\x03R\x1famountOfSpreadMagnesiumChloride\x88\x01\x01\x12<\n" +
	"\x17amount_of_spread_gravel\x18\xbe\x03 \x01(\rH\xb9\x03R\x14amountOfSpreadGravel\x88\x01\x01\x128\n" +
	"\x15amount_of_spread_sand\x18\xbf\x03 \x01(\rH\xba\x03R\x12amountOfSpreadSand\x88\x01\x01\x123\n" +
	"\x12width_pouring_left\x18\xc0\x03 \x01(\rH\xbb\x03R\x10widthPouringLeft\x88\x01\x01\x125\n" +
	"\x13width_pouring_right\x18\xc1\x03 \x01(\rH\xbc\x03R\x11widthPouringRight\x88\x01\x01\x12D\n" +
	"\x1bsalt_spreader_working_hours\x18\xc2\x03 \x01(\rH\xbd\x03R\x18saltSpreaderWorkingHours\x88\x01\x01\x12=\n" +
	"\x17distance_during_salting\x18\xc3\x03 \x01(\rH\xbe\x03R\x15distanceDuringSalting\x88\x01\x01\x12&\n" +
	"\vload_weight\x18\xc4\x03 \x01(\rH\xbf\x03R\n" +
	"loadWeight\x88\x01\x01\x12*\n" +
	"\rretarder_load\x18\xc5\x03 \x01(\rH\xc0\x03R\fretarderLoad\x88\x01\x01\x12&\n" +
	"\vcruise_time\x18\xc6\x03 \x01(\rH\xc1\x03R\n" +
	"cruiseTime\x88\x01\x01\x12$\n" +
	"\n" +
	"cng_status\x18\xc7\x03 \x01(\bH\xc2\x03R\tcngStatus\x88\x01\x01\x12 \n" +
	"\bcng_used\x18\xc8\x03 \x01(\rH\xc3\x03R\acngUsed\x88\x01\x01\x121\n" +
	"\x11cng_level_percent\x18\xc9\x03 \x01(\rH\xc4\x03R\x0fcngLevelPercent\x88\x01\x01\x12\"\n" +
	"\toil_level\x18\xca\x03 \x01(\bH\xc5\x03R\boilLevel\x88\x01\x01\x12@\n" +
	"\x19vehicles_range_on_battery\x18\xcb\x03 \x01(\rH\xc6\x03R\x16vehiclesRangeOnBattery\x88\x01\x01\x12O\n" +
	"!vehicles_range_on_additional_fuel\x18\xcc\x03 \x01(\rH\xc7\x03R\x1dvehiclesRangeOnAdditionalFuel\x88\x01\x01\x12<\n" +
	"\x17security_state_flags_p4\x18\xcd\x03 \x01(\fH\xc8\x03R\x14securityStateFlagsP4\x88\x01\x01\x12:\n" +
	"\x16control_state_flags_p4\x18\xce\x03 \x01(\fH\xc9\x03R\x13controlStateFlagsP4\x88\x01\x01\x12>\n" +
	"\x18indicator_state_flags_p4\x18\xcf\x03 \x01(\fH\xca\x03R\x15indicatorStateFlagsP4\x88\x01\x01\x12D\n" +
	"\x1bagricultural_state_flags_p4\x18\xd0\x03 \x01(\fH\xcb\x03R\x18agriculturalStateFlagsP4\x88\x01\x01\x12&\n" +
	"\vdoor_status\x18\xd1\x03 \x01(\rH\xcc\x03R\n" +
	"doorStatus\x88\x01\x01\x124\n" +
	"\x12engine_temperature\x18\xd3\x03 \x01(\x05H\xcd\x03R\x11engineTemperature\x88\x01\x01\x12:\n" +
	"\x16utility_state_flags_p4\x18\xd4\x03 \x01(\x04H\xce\x03R\x13utilityStateFlagsP4\x88\x01\x01\x12:\n" +
	"\x16cistern_state_flags_p4\x18\xd5\x03 \x01(\x04H\xcf\x03R\x13cisternStateFlagsP4\x88\x01\x01\x12 \n" +
	"\blng_used\x18\xd6\x03 \x01(\rH\xd0\x03R\alngUsed\x88\x01\x01\x12/\n" +
	"\x10lng_used_counted\x18\xd7\x03 \x01(\rH\xd1\x03R\x0elngUsedCounted\x88\x01\x01\x121\n" +
	"\x11lng_level_percent\x18\xd8\x03 \x01(\rH\xd2\x03R\x0flngLevelPercent\x88\x01\x01\x12'\n" +
	"\flng_level_kg\x18\xd9\x03 \x01(\rH\xd3\x03R\n" +
	"lngLevelKg\x88\x01\x01\x12+\n" +
	"\x0etotal_lpg_used\x18\xda\x03 \x01(\rH\xd4\x03R\ftotalLpgUsed\x88\x01\x01\x12:\n" +
	"\x16total_lpg_used_counted\x18\xdb\x03 \x01(\rH\xd5\x03R\x13totalLpgUsedCounted\x88\x01\x01\x12+\n" +
	"\x0elpg_level_proc\x18\xdc\x03 \x01(\rH\xd6\x03R\flpgLevelProc\x88\x01\x01\x12/\n" +
	"\x10lpg_level_liters\x18\xdd\x03 \x01(\rH\xd7\x03R\x0elpgLevelLiters\x88\x01\x01\x12(\n" +
	"\fssf_ignition\x18\xde\x03 \x01(\bH\xd8\x03R\vssfIgnition\x88\x01\x01\x12=\n" +
	"\x18ssf_key_in_ignition_lock\x18\xdf\x03 \x01(\bH\xd9\x03R\x14ssfKeyInIgnitionLock\x88\x01\x01\x12&\n" +
	"\vssf_webasto\x18\xe0\x03 \x01(\bH\xda\x03R\n" +
	"ssfWebasto\x88\x01\x01\x123\n" +
	"\x12ssf_engine_working\x18\xe1\x03 \x01(\bH\xdb\x03R\x10ssfEngineWorking\x88\x01\x01\x129\n" +
	"\x15ssf_standalone_engine\x18\xe2\x03 \x01(\bH\xdc\x03R\x13ssfStandaloneEngine\x88\x01\x01\x122\n" +
	"\x12ssf_ready_to_drive\x18\xe3\x03 \x01(\bH\xdd\x03R\x0fssfReadyToDrive\x88\x01\x01\x12?\n" +
	"\x19ssf_engine_working_on_cng\x18\xe4\x03 \x01(\bH\xde\x03R\x15ssfEngineWorkingOnCng\x88\x01\x01\x12)\n" +
	"\rssf_work_mode\x18\xe5\x03 \x01(\bH\xdf\x03R\vssfWorkMode\x88\x01\x01\x12(\n" +
	"\fssf_operator\x18\xe6\x03 \x01(\bH\xe0\x03R\vssfOperator\x88\x01\x01\x12*\n" +
	"\rssf_interlock\x18\xe7\x03 \x01(\bH\xe1\x03R\fssfInterlock\x88\x01\x01\x12:\n" +
	"\x16ssf_engine_lock_active\x18\xe8\x03 \x01(\bH\xe2\x03R\x13ssfEngineLockActive\x88\x01\x01\x12A\n" +
	"\x1assf_request_to_lock_engine\x18\xe9\x03 \x01(\bH\xe3\x03R\x16ssfRequestToLockEngine\x88\x01\x01\x12<\n" +
	"\x17ssf_handbrake_is_active\x18\xea\x03 \x01(\bH\xe4\x03R\x14ssfHandbrakeIsActive\x88\x01\x01\x12<\n" +
	"\x17ssf_footbrake_is_active\x18\xeb\x03 \x01(\bH\xe5\x03R\x14ssfFootbrakeIsActive\x88\x01\x01\x121\n" +
	"\x11ssf_clutch_pushed\x18\xec\x03 \x01(\bH\xe6\x03R\x0fssfClutchPushed\x88\x01\x01\x12@\n" +
	"\x19ssf_hazard_warning_lights\x18\xed\x03 \x01(\bH\xe7\x03R\x16ssfHazardWarningLights\x88\x01\x01\x12=\n" +
	"\x18ssf_front_left_door_open\x18\xee\x03 \x01(\bH\xe8\x03R\x14ssfFrontLeftDoorOpen\x88\x01\x01\x12?\n" +
	"\x19ssf_front_right_door_open\x18\xef\x03 \x01(\bH\xe9\x03R\x15ssfFrontRightDoorOpen\x88\x01\x01\x12;\n" +
	"\x17ssf_rear_left_door_open\x18\xf0\x03 \x01(\bH\xea\x03R\x13ssfRearLeftDoorOpen\x88\x01\x01\x12=\n" +
	"\x18ssf_rear_right_door_open\x18\xf1\x03 \x01(\bH\xeb\x03R\x14ssfRearRightDoorOpen\x88\x01\x01\x124\n" +
	"\x13ssf_trunk_door_open\x18\xf2\x03 \x01(\bH\xec\x03R\x10ssfTrunkDoorOpen\x88\x01\x01\x128\n" +
	"\x15ssf_engine_cover_open\x18\xf3\x03 \x01(\bH\xed\x03R\x12ssfEngineCoverOpen\x88\x01\x01\x12)\n" +
	"\rssf_roof_open\x18\xf4\x03 \x01(\bH\xee\x03R\vssfRoofOpen\x88\x01\x01\x12@\n" +
	"\x19ssf_charging_wire_plugged\x18\xf5\x03 \x01(\bH\xef\x03R\x16ssfChargingWirePlugged\x88\x01\x01\x127\n" +
	"\x14ssf_battery_charging\x18\xf6\x03 \x01(\bH\xf0\x03R\x12ssfBatteryCharging\x88\x01\x01\x12@\n" +
	"\x19ssf_electric_engine_state\x18\xf7\x03 \x01(\bH\xf1\x03R\x16ssfElectricEngineState\x88\x01\x01\x12G\n" +
	"\x1dssf_car_closed_factory_remote\x18\xf8\x03 \x01(\bH\xf2\x03R\x19ssfCarClosedFactoryRemote\x88\x01\x01\x120\n" +
	"\x11ssf_car_is_closed\x18\xf9\x03 \x01(\bH\xf3\x03R\x0essfCarIsClosed\x88\x01\x01\x12B\n" +
	"\x1assf_factory_alarm_actuated\x18\xfa\x03 \x01(\bH\xf4\x03R\x17ssfFactoryAlarmActuated\x88\x01\x01\x12B\n" +
	"\x1assf_factory_alarm_emulated\x18\xfb\x03 \x01(\bH\xf5\x03R\x17ssfFactoryAlarmEmulated\x88\x01\x01\x12K\n" +
	"\x1fssf_signal_close_factory_remote\x18\xfc\x03 \x01(\bH\xf6\x03R\x1bssfSignalCloseFactoryRemote\x88\x01\x01\x12I\n" +
	"\x1essf_signal_open_factory_remote\x18\xfd\x03 \x01(\bH\xf7\x03R\x1assfSignalOpenFactoryRemote\x88\x01\x01\x125\n" +
	"\x13ssf_rearming_signal\x18\xfe\x03 \x01(\bH\xf8\x03R\x11ssfRearmingSignal\x88\x01\x01\x12T\n" +
	"$ssf_trunk_door_opened_factory_remote\x18\xff\x03 \x01(\bH\xf9\x03R\x1fssfTrunkDoorOpenedFactoryRemote\x88\x01\x01\x12;\n" +
	"\x17ssf_can_module_in_sleep\x18\x80\x04 \x01(\bH\xfa\x03R\x13ssfCanModuleInSleep\x88\x01\x01\x127\n" +
	"\x14ssf_factory_remote3x\x18\x81\x04 \x01(\bH\xfb\x03R\x12ssfFactoryRemote3x\x88\x01\x01\x121\n" +
	"\x11ssf_factory_armed\x18\x82\x04 \x01(\bH\xfc\x03R\x0fssfFactoryArmed\x88\x01\x01\x12<\n" +
	"\x17ssf_parking_gear_active\x18\x83\x04 \x01(\bH\xfd\x03R\x14ssfParkingGearActive\x88\x01\x01\x12<\n" +
	"\x17ssf_reverse_gear_active\x18\x84\x04 \x01(\bH\xfe\x03R\x14ssfReverseGearActive\x88\x01\x01\x12<\n" +
	"\x17ssf_neutral_gear_active\x18\x85\x04 \x01(\bH\xff\x03R\x14ssfNeutralGearActive\x88\x01\x01\x124\n" +
	"\x13ssf_drive_is_active\x18\x86\x04 \x01(\bH\x80\x04R\x10ssfDriveIsActive\x88\x01\x01\x12J\n" +
	"\x1fssf_engine_working_on_dual_fuel\x18\x87\x04 \x01(\bH\x81\x04R\x1assfEngineWorkingOnDualFuel\x88\x01\x01\x12?\n" +
	"\x19ssf_engine_working_on_lpg\x18\x88\x04 \x01(\bH\x82\x04R\x15ssfEngineWorkingOnLpg\x88\x01\x01\x123\n" +
	"\x12csf_parking_lights\x18\x89\x04 \x01(\bH\x83\x04R\x10csfParkingLights\x88\x01\x01\x12:\n" +
	"\x16csf_dipped_head_lights\x18\x8a\x04 \x01(\bH\x84\x04R\x13csfDippedHeadLights\x88\x01\x01\x12>\n" +
	"\x18csf_full_beam_headlights\x18\x8b\x04 \x01(\bH\x85\x04R\x15csfFullBeamHeadlights\x88\x01\x01\x124\n" +
	"\x13csf_rear_fog_lights\x18\x8c\x04 \x01(\bH\x86\x04R\x10csfRearFogLights\x88\x01\x01\x126\n" +
	"\x14csf_front_fog_lights\x18\x8d\x04 \x01(\bH\x87\x04R\x11csfFrontFogLights\x88\x01\x01\x12D\n" +
	"\x1bcsf_additional_front_lights\x18\x8e\x04 \x01(\bH\x88\x04R\x18csfAdditionalFrontLights\x88\x01\x01\x12B\n" +
	"\x1acsf_additional_rear_lights\x18\x8f\x04 \x01(\bH\x89\x04R\x17csfAdditionalRearLights\x88\x01\x01\x12/\n" +
	"\x10csf_light_signal\x18\x90\x04 \x01(\bH\x8a\x04R\x0ecsfLightSignal\x88\x01\x01\x127\n" +
	"\x14csf_air_conditioning\x18\x91\x04 \x01(\bH\x8b\x04R\x12csfAirConditioning\x88\x01\x01\x123\n" +
	"\x12csf_cruise_control\x18\x92\x04 \x01(\bH\x8c\x04R\x10csfCruiseControl\x88\x01\x01\x12;\n" +
	"\x16csf_automatic_retarder\x18\x93\x04 \x01(\bH\x8d\x04R\x14csfAutomaticRetarder\x88\x01\x01\x125\n" +
	"\x13csf_manual_retarder\x18\x94\x04 \x01(\bH\x8e\x04R\x11csfManualRetarder\x88\x01\x01\x12H\n" +
	"\x1dcsf_drivers_seatbelt_fastened\x18\x95\x04 \x01(\bH\x8f\x04R\x1acsfDriversSeatbeltFastened\x88\x01\x01\x12S\n" +
	"#csf_front_drivers_seatbelt_fastened\x18\x96\x04 \x01(\bH\x90\x04R\x1fcsfFrontDriversSeatbeltFastened\x88\x01\x01\x12Q\n" +
	"\"csf_left_drivers_seatbelt_fastened\x18\x97\x04 \x01(\bH\x91\x04R\x1ecsfLeftDriversSeatbeltFastened\x88\x01\x01\x12S\n" +
	"#csf_right_drivers_seatbelt_fastened\x18\x98\x04 \x01(\bH\x92\x04R\x1fcsfRightDriversSeatbeltFastened\x88\x01\x01\x12U\n" +
	"$csf_centre_drivers_seatbelt_fastened\x18\x99\x04 \x01(\bH\x93\x04R csfCentreDriversSeatbeltFastened\x88\x01\x01\x12D\n" +
	"\x1bcsf_front_passenger_present\x18\x9a\x04 \x01(\bH\x94\x04R\x18csfFrontPassengerPresent\x88\x01\x01\x12\x1e\n" +
	"\acsf_pto\x18\x9b\x04 \x01(\bH\x95\x04R\x06csfPto\x88\x01\x01\x12H\n" +
	"\x1dcsf_front_differential_locked\x18\x9c\x04 \x01(\bH\x96\x04R\x1acsfFrontDifferentialLocked\x88\x01\x01\x12F\n" +
	"\x1ccsf_rear_differential_locked\x18\x9d\x04 \x01(\bH\x97\x04R\x19csfRearDifferentialLocked\x88\x01\x01\x12R\n" +
	"\"csf_central_differential4hi_locked\x18\x9e\x04 \x01(\bH\x98\x04R\x1fcsfCentralDifferential4hiLocked\x88\x01\x01\x12L\n" +
	"\x1fcsf_rear_differential4lo_locked\x18\x9f\x04 \x01(\bH\x99\x04R\x1ccsfRearDifferential4loLocked\x88\x01\x01\x12G\n" +
	"\x1dcsf_trailer_axle1_lift_active\x18\xa0\x04 \x01(\bH\x9a\x04R\x19csfTrailerAxle1LiftActive\x88\x01\x01\x12G\n" +
	"\x1dcsf_trailer_axle2_lift_active\x18\xa1\x04 \x01(\bH\x9b\x04R\x19csfTrailerAxle2LiftActive\x88\x01\x01\x129\n" +
	"\x15csf_trailer_connected\x18\xa2\x04 \x01(\bH\x9c\x04R\x13csfTrailerConnected\x88\x01\x01\x12I\n" +
	"\x1ecsf_start_stop_system_inactive\x18\xa3\x04 \x01(\bH\x9d\x04R\x1acsfStartStopSystemInactive\x88\x01\x01\x12B\n" +
	"\x1aisf_check_engine_indicator\x18\xa4\x04 \x01(\bH\x9e\x04R\x17isfCheckEngineIndicator\x88\x01\x01\x121\n" +
	"\x11isf_abs_indicator\x18\xa5\x04 \x01(\bH\x9f\x04R\x0fisfAbsIndicator\x88\x01\x01\x121\n" +
	"\x11isf_esp_indicator\x18\xa6\x04 \x01(\bH\xa0\x04R\x0fisfEspIndicator\x88\x01\x01\x122\n" +
	"\x12isf_esp_turned_off\x18\xa7\x04 \x01(\bH\xa1\x04R\x0fisfEspTurnedOff\x88\x01\x01\x123\n" +
	"\x12isf_stop_indicator\x18\xa8\x04 \x01(\bH\xa2\x04R\x10isfStopIndicator\x88\x01\x01\x12<\n" +
	"\x17isf_oil_level_indicator\x18\xa9\x04 \x01(\bH\xa3\x04R\x14isfOilLevelIndicator\x88\x01\x01\x12>\n" +
	"\x18isf_coolant_liquid_level\x18\xaa\x04 \x01(\bH\xa4\x04R\x15isfCoolantLiquidLevel\x88\x01\x01\x12Q\n" +
	"\"isf_battery_not_charging_indicator\x18\xab\x04 \x01(\bH\xa5\x04R\x1eisfBatteryNotChargingIndicator\x88\x01\x01\x12J\n" +
	"\x1eisf_handbrake_system_indicator\x18\xac\x04 \x01(\bH\xa6\x04R\x1bisfHandbrakeSystemIndicator\x88\x01\x01\x127\n" +
	"\x14isf_airbag_indicator\x18\xad\x04 \x01(\bH\xa7\x04R\x12isfAirbagIndicator\x88\x01\x01\x121\n" +
	"\x11isf_eps_indicator\x18\xae\x04 \x01(\bH\xa8\x04R\x0fisfEpsIndicator\x88\x01\x01\x129\n" +
	"\x15isf_warning_indicator\x18\xaf\x04 \x01(\bH\xa9\x04R\x13isfWarningIndicator\x88\x01\x01\x12F\n" +
	"\x1cisf_lights_failure_indicator\x18\xb0\x04 \x01(\bH\xaa\x04R\x19isfLightsFailureIndicator\x88\x01\x01\x12K\n" +
	"\x1fisf_low_tire_pressure_indicator\x18\xb1\x04 \x01(\bH\xab\x04R\x1bisfLowTirePressureIndicator\x88\x01\x01\x12L\n" +
	" isf_wear_of_brake_pads_indicator\x18\xb2\x04 \x01(\bH\xac\x04R\x1bisfWearOfBrakePadsIndicator\x88\x01\x01\x12E\n" +
	"\x1cisf_low_fuel_level_indicator\x18\xb3\x04 \x01(\bH\xad\x04R\x18isfLowFuelLevelIndicator\x88\x01\x01\x12R\n" +
	"\"isf_maintenance_required_indicator\x18\xb4\x04 \x01(\bH\xae\x04R\x1fisfMaintenanceRequiredIndicator\x88\x01\x01\x12<\n" +
	"\x17isf_glow_plug_indicator\x18\xb5\x04 \x01(\bH\xaf\x04R\x14isfGlowPlugIndicator\x88\x01\x01\x121\n" +
	"\x11isf_fap_indicator\x18\xb6\x04 \x01(\bH\xb0\x04R\x0fisfFapIndicator\x88\x01\x01\x121\n" +
	"\x11isf_epc_indicator\x18\xb7\x04 \x01(\bH\xb1\x04R\x0fisfEpcIndicator\x88\x01\x01\x12Z\n" +
	"'isf_clogged_engine_oil_filter_indicator\x18\xb8\x04 \x01(\bH\xb2\x04R\"isfCloggedEngineOilFilterIndicator\x88\x01\x01\x12V\n" +
	"%isf_low_engine_oil_pressure_indicator\x18\xb9\x04 \x01(\bH\xb3\x04R isfLowEngineOilPressureIndicator\x88\x01\x01\x12e\n" +
	"-isf_too_high_engine_oil_temperature_indicator\x18\xba\x04 \x01(\bH\xb4\x04R'isfTooHighEngineOilTemperatureIndicator\x88\x01\x01\x12K\n" +
	"\x1fisf_low_coolant_level_indicator\x18\xbb\x04 \x01(\bH\xb5\x04R\x1bisfLowCoolantLevelIndicator\x88\x01\x01\x12m\n" +
	"1isf_clogged_hydraulic_system_oil_filter_indicator\x18\xbc\x04 \x01(\bH\xb6\x04R+isfCloggedHydraulicSystemOilFilterIndicator\x88\x01\x01\x12b\n" +
	"+isf_hydraulic_system_low_pressure_indicator\x18\xbd\x04 \x01(\bH\xb7\x04R&isfHydraulicSystemLowPressureIndicator\x88\x01\x01\x12V\n" +
	"%isf_hydraulic_oil_low_level_indicator\x18\xbe\x04 \x01(\bH\xb8\x04R isfHydraulicOilLowLevelIndicator\x88\x01\x01\x12j\n" +
	"/isf_hydraulic_system_high_temperature_indicator\x18\xbf\x04 \x01(\bH\xb9\x04R*isfHydraulicSystemHighTemperatureIndicator\x88\x01\x01\x12i\n" +
	"/isf_oil_overflow_in_hydraulic_chamber_indicator\x18\xc0\x04 \x01(\bH\xba\x04R)isfOilOverflowInHydraulicChamberIndicator\x88\x01\x01\x12M\n" +
	" isf_clogged_air_filter_indicator\x18\xc1\x04 \x01(\bH\xbb\x04R\x1cisfCloggedAirFilterIndicator\x88\x01\x01\x12O\n" +
	"!isf_clogged_fuel_filter_indicator\x18\xc2\x04 \x01(\bH\xbc\x04R\x1disfCloggedFuelFilterIndicator\x88\x01\x01\x12C\n" +
	"\x1bisf_water_in_fuel_indicator\x18\xc3\x04 \x01(\bH\xbd\x04R\x17isfWaterInFuelIndicator\x88\x01\x01\x12N\n" +
	"!asf_grain_tank_is100_percent_full\x18\xe3\x04 \x01(\bH\xbe\x04R\x1casfGrainTankIs100PercentFull\x88\x01\x01\x12L\n" +
	" asf_grain_tank_is70_percent_full\x18\xe4\x04 \x01(\bH\xbf\x04R\x1basfGrainTankIs70PercentFull\x88\x01\x01\x12W\n" +
	"&asf_straw_chopper_speed_below_the_norm\x18\xef\x04 \x01(\bH\xc0\x04R asfStrawChopperSpeedBelowTheNorm\x88\x01\x01\x12,\n" +
	"\x0eusf_spreading2\x18\x8a\x05 \x01(\bH\xc1\x04R\rusfSpreading2\x88\x01\x01\x1a;\n" +
	"\rGeoFenceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01B\v\n" +
	"\t_movementB\f\n" +
	"\n" +
	"_data_modeB\r\n" +
	"\v_gsm_signalB\r\n" +
	"\v_sleep_modeB\x0e\n" +
	"\f_gnss_statusB\f\n" +
	"\n" +
	"_gnss_pdopB\f\n" +
	"\n" +
	"_gnss_hdopB\x13\n" +
	"\x11_external_voltageB\b\n" +
	"\x06_speedB\x0e\n" +
	"\f_gsm_cell_idB\x10\n" +
	"\x0e_gsm_area_codeB\x12\n" +
	"\x10_battery_voltageB\x12\n" +
	"\x10_battery_currentB\x16\n" +
	"\x14_active_gsm_operatorB\x10\n" +
	"\x0e_trip_odometerB\x11\n" +
	"\x0f_total_odometerB\x11\n" +
	"\x0f_digital_input1B\x10\n" +
	"\x0e_analog_input1B\x12\n" +
	"\x10_digital_output1B\x10\n" +
	"\x0e_fuel_used_gpsB\x10\n" +
	"\x0e_fuel_rate_gpsB\t\n" +
	"\a_axis_xB\t\n" +
	"\a_axis_yB\t\n" +
	"\a_axis_zB\t\n" +
	"\a_iccid1B\f\n" +
	"\n" +
	"_sd_statusB\x11\n" +
	"\x0f_digital_input2B\x11\n" +
	"\x0f_digital_input3B\x10\n" +
	"\x0e_analog_input2B\x12\n" +
	"\x10_digital_output2B\x16\n" +
	"\x14_dallas_temperature1B\x16\n" +
	"\x14_dallas_temperature2B\x16\n" +
	"\x14_dallas_temperature3B\x16\n" +
	"\x14_dallas_temperature4B\x19\n" +
	"\x17_dallas_temperature_id1B\x19\n" +
	"\x17_dallas_temperature_id2B\x19\n" +
	"\x17_dallas_temperature_id3B\x19\n" +
	"\x17_dallas_temperature_id4B\n" +
	"\n" +
	"\b_ibuttonB\a\n" +
	"\x05_rfidB\x12\n" +
	"\x10_lls1_fuel_levelB\x13\n" +
	"\x11_lls1_temperatureB\x12\n" +
	"\x10_lls2_fuel_levelB\x13\n" +
	"\x11_lls2_temperatureB\x12\n" +
	"\x10_lls3_fuel_levelB\x13\n" +
	"\x11_lls3_temperatureB\x12\n" +
	"\x10_lls4_fuel_levelB\x13\n" +
	"\x11_lls4_temperatureB\x12\n" +
	"\x10_lls5_fuel_levelB\x13\n" +
	"\x11_lls5_temperatureB\f\n" +
	"\n" +
	"_eco_scoreB\x10\n" +
	"\x0e_battery_levelB\n" +
	"\n" +
	"\b_user_idB\x0f\n" +
	"\r_network_typeB\x15\n" +
	"\x13_pulse_counter_din1B\x15\n" +
	"\x13_pulse_counter_din2B\f\n" +
	"\n" +
	"_bt_statusB\r\n" +
	"\v_barcode_idB\x13\n" +
	"\x11_instant_movementB\x1d\n" +
	"\x1b_ul202_02_sensor_fuel_levelB\x19\n" +
	"\x17_ul202_02_sensor_statusB\x12\n" +
	"\x10_digital_output3B\x0f\n" +
	"\r_ground_senseB\x16\n" +
	"\x14_iso6709_coordinatesB\x13\n" +
	"\x11_umts_lte_cell_idB\x0e\n" +
	"\f_driver_nameB\x1b\n" +
	"\x19_driver_card_license_typeB\x10\n" +
	"\x0e_driver_genderB\x11\n" +
	"\x0f_driver_card_idB\x1e\n" +
	"\x1c_driver_card_expiration_dateB\x1d\n" +
	"\x1b_driver_card_place_of_issueB\x16\n" +
	"\x14_driver_status_eventB\f\n" +
	"\n" +
	"_ain_speedB\x15\n" +
	"\x13_msp500_vendor_nameB\x18\n" +
	"\x16_msp500_vehicle_numberB\x16\n" +
	"\x14_msp500_speed_sensorB\x0e\n" +
	"\f_wake_reasonB\x13\n" +
	"\x11_eye_temperature1B\x13\n" +
	"\x11_eye_temperature2B\x13\n" +
	"\x11_eye_temperature3B\x13\n" +
	"\x11_eye_temperature4B\x10\n" +
	"\x0e_eye_humidity1B\x10\n" +
	"\x0e_eye_humidity2B\x10\n" +
	"\x0e_eye_humidity3B\x10\n" +
	"\x0e_eye_humidity4B\x0e\n" +
	"\f_eye_magnet1B\x0e\n" +
	"\f_eye_magnet2B\x0e\n" +
	"\f_eye_magnet3B\x0e\n" +
	"\f_eye_magnet4B\x10\n" +
	"\x0e_eye_movement1B\x10\n" +
	"\x0e_eye_movement2B\x10\n" +
	"\x0e_eye_movement3B\x10\n" +
	"\x0e_eye_movement4B\r\n" +
	"\v_eye_pitch1B\r\n" +
	"\v_eye_pitch2B\r\n" +
	"\v_eye_pitch3B\r\n" +
	"\v_eye_pitch4B\x13\n" +
	"\x11_eye_low_battery1B\x13\n" +
	"\x11_eye_low_battery2B\x13\n" +
	"\x11_eye_low_battery3B\x13\n" +
	"\x11_eye_low_battery4B\x17\n" +
	"\x15_eye_battery_voltage1B\x17\n" +
	"\x15_eye_battery_voltage2B\x17\n" +
	"\x15_eye_battery_voltage3B\x17\n" +
	"\x15_eye_battery_voltage4B\f\n" +
	"\n" +
	"_eye_roll1B\f\n" +
	"\n" +
	"_eye_roll2B\f\n" +
	"\n" +
	"_eye_roll3B\f\n" +
	"\n" +
	"_eye_roll4B\x16\n" +
	"\x14_eye_movement_count1B\x16\n" +
	"\x14_eye_movement_count2B\x16\n" +
	"\x14_eye_movement_count3B\x16\n" +
	"\x14_eye_movement_count4B\x14\n" +
	"\x12_eye_magnet_count1B\x14\n" +
	"\x12_eye_magnet_count2B\x14\n" +
	"\x12_eye_magnet_count3B\x14\n" +
	"\x12_eye_magnet_count4B,\n" +
	"*_isf_clogged_brake_system_filter_indicatorB'\n" +
	"%_isf_low_washer_fluid_level_indicatorB!\n" +
	"\x1f_isf_low_adblue_level_indicatorB*\n" +
	"(_isf_low_trailer_tyre_pressure_indicatorB-\n" +
	"+_isf_wear_of_trailer_brake_lining_indicatorB/\n" +
	"-_isf_high_trailer_brake_temperature_indicatorB3\n" +
	"1_isf_incorrect_trailer_pneumatic_supply_indicatorB\x1e\n" +
	"\x1c_isf_low_cng_level_indicatorB(\n" +
	"&_asf_right_joystick_moved_right_activeB'\n" +
	"%_asf_right_joystick_moved_left_activeB*\n" +
	"(_asf_right_joystick_moved_forward_activeB'\n" +
	"%_asf_right_joystick_moved_back_activeB'\n" +
	"%_asf_left_joystick_moved_right_activeB&\n" +
	"$_asf_left_joystick_moved_left_activeB)\n" +
	"'_asf_left_joystick_moved_forward_activeB&\n" +
	"$_asf_left_joystick_moved_back_activeB\x1b\n" +
	"\x19_asf_first_rear_hydraulicB\x1c\n" +
	"\x1a_asf_second_rear_hydraulicB\x1b\n" +
	"\x19_asf_third_rear_hydraulicB\x1c\n" +
	"\x1a_asf_fourth_rear_hydraulicB\x1c\n" +
	"\x1a_asf_first_front_hydraulicB\x1d\n" +
	"\x1b_asf_second_front_hydraulicB\x1c\n" +
	"\x1a_asf_third_front_hydraulicB\x1d\n" +
	"\x1b_asf_fourth_front_hydraulicB\x1e\n" +
	"\x1c_asf_front_three_point_hitchB\x1d\n" +
	"\x1b_asf_rear_three_point_hitchB\x1b\n" +
	"\x19_asf_front_power_take_offB\x1a\n" +
	"\x18_asf_rear_power_take_offB\x14\n" +
	"\x12_asf_mowing_activeB\x17\n" +
	"\x15_asf_threshing_activeB \n" +
	"\x1e_asf_grain_release_from_hopperB\x1c\n" +
	"\x1a_asf_grain_tank_is100_fullB\x1b\n" +
	"\x19_asf_grain_tank_is70_fullB\x1b\n" +
	"\x19_asf_grain_tank_is_openedB\x15\n" +
	"\x13_asf_unloader_driveB&\n" +
	"$_asf_cleaning_fan_control_turned_offB(\n" +
	"&_asf_threshing_drum_control_turned_offB\x1e\n" +
	"\x1c_asf_straw_walker_is_cloggedB3\n" +
	"1_asf_excessive_clearance_under_the_threshing_drumBC\n" +
	"A_asf_low_temperature_of_drive_system_hydraulics_less_than5_gradesBH\n" +
	"F_asf_high_temperature_of_drive_system_hydraulics_greater_than86_gradesB%\n" +
	"#_asf_ear_auger_speed_below_the_normB'\n" +
	"%_asf_grain_auger_speed_below_the_normB)\n" +
	"'_asf_straw_chooper_speed_below_the_normB(\n" +
	"&_asf_straw_shaker_speed_below_the_normB\"\n" +
	" _asf_feeder_speed_below_the_normB \n" +
	"\x1e_asf_straw_chopper_switched_onB\x1c\n" +
	"\x1a_asf_corn_header_connectedB\x1d\n" +
	"\x1b_asf_grain_header_connectedB!\n" +
	"\x1f_asf_feeder_reverse_switched_onB;\n" +
	"9_asf_the_pressure_filter_of_the_hydraulic_pump_is_cloggedB%\n" +
	"#_asf_adapter_pressure_filter_sensorB\"\n" +
	" _asf_service2_required_indicatorB%\n" +
	"#_asf_drain_filter_clogged_indicatorB\x18\n" +
	"\x16_asf_section1_sprayingB\x18\n" +
	"\x16_asf_section2_sprayingB\x18\n" +
	"\x16_asf_section3_sprayingB\x18\n" +
	"\x16_asf_section4_sprayingB\x18\n" +
	"\x16_asf_section5_sprayingB\x18\n" +
	"\x16_asf_section6_sprayingB\x18\n" +
	"\x16_asf_section7_sprayingB\x18\n" +
	"\x16_asf_section8_sprayingB\x18\n" +
	"\x16_asf_section9_sprayingB\x10\n" +
	"\x0e_usf_spreadingB\x18\n" +
	"\x16_usf_pouring_chemicalsB\x14\n" +
	"\x12_usf_conveyor_beltB!\n" +
	"\x1f_usf_salt_spreaders_drive_wheelB\x0e\n" +
	"\f_usf_brushesB\x15\n" +
	"\x13_usf_vacuum_cleanerB\x13\n" +
	"\x11_usf_water_supplyB\x12\n" +
	"\x10_usf_liquid_pumpB \n" +
	"\x1e_usf_unloading_from_the_hopperB1\n" +
	"/_usf_low_salt_sand_level_in_container_indicatorB-\n" +
	"+_usf_low_water_level_in_container_indicatorB\x10\n" +
	"\x0e_usf_chemicalsB\x11\n" +
	"\x0f_usf_compressorB\x1c\n" +
	"\x1a_usf_water_valve_is_openedB#\n" +
	"!_usf_cabin_moved_up_status_activeB%\n" +
	"#_usf_cabin_moved_down_status_activeB$\n" +
	"\"_usf_hydraulics_work_not_permittedB2\n" +
	"0_cisf_section1_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section1_filledB\x1b\n" +
	"\x19_cisf_section1_overfilledB2\n" +
	"0_cisf_section2_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section2_filledB\x1b\n" +
	"\x19_cisf_section2_overfilledB2\n" +
	"0_cisf_section3_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section3_filledB\x1b\n" +
	"\x19_cisf_section3_overfilledB2\n" +
	"0_cisf_section4_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section4_filledB\x1b\n" +
	"\x19_cisf_section4_overfilledB2\n" +
	"0_cisf_section5_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section5_filledB\x1b\n" +
	"\x19_cisf_section5_overfilledB2\n" +
	"0_cisf_section6_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section6_filledB\x1b\n" +
	"\x19_cisf_section6_overfilledB2\n" +
	"0_cisf_section7_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section7_filledB\x1b\n" +
	"\x19_cisf_section7_overfilledB2\n" +
	"0_cisf_section8_presence_of_fluid_in_the_downpipeB\x17\n" +
	"\x15_cisf_section8_filledB\x1b\n" +
	"\x19_cisf_section8_overfilledB\x1b\n" +
	"\x19_distance_to_next_serviceB\x0f\n" +
	"\r_cng_level_kgB \n" +
	"\x1e_distance_from_need_of_serviceB\x1d\n" +
	"\x1b_distance_from_last_serviceB\x17\n" +
	"\x15_time_to_next_serviceB\x1c\n" +
	"\x1a_time_from_need_of_serviceB\x19\n" +
	"\x17_time_from_last_serivceB\x1f\n" +
	"\x1d_distance_to_next_oil_serviceB\x1b\n" +
	"\x19_time_to_next_oil_serviceB\x16\n" +
	"\x14_lvcan_vehicle_rangeB\x1a\n" +
	"\x18_lvcan_total_cng_countedB\x13\n" +
	"\x11_total_bale_countB\r\n" +
	"\v_bale_countB\x11\n" +
	"\x0f_cut_bale_countB\x0e\n" +
	"\f_bale_slicesB\x15\n" +
	"\x13_lvcan_maxroadspeedB\x1a\n" +
	"\x18_lvcan_exceededroadspeedB\x1b\n" +
	"\x19_lvcan_rsf_speedlimitsignB#\n" +
	"!_lvcan_rsf_end_of_speed_limitsignB\x1b\n" +
	"\x19_lvcan_rsf_speed_exceededB!\n" +
	"\x1f_lvcan_rsf_time_speed_limitsignB\"\n" +
	" _lvcan_rsf_wthr_speed_limit_signB\x19\n" +
	"\x17_axl_calibration_statusB\f\n" +
	"\n" +
	"_ble_rfid1B\f\n" +
	"\n" +
	"_ble_rfid2B\f\n" +
	"\n" +
	"_ble_rfid3B\f\n" +
	"\n" +
	"_ble_rfid4B\x15\n" +
	"\x13_ble_button1_state1B\x15\n" +
	"\x13_ble_button1_state2B\x15\n" +
	"\x13_ble_button1_state3B\x15\n" +
	"\x13_ble_button1_state4B\x15\n" +
	"\x13_ble_button2_state1B\x15\n" +
	"\x13_ble_button2_state2B\x15\n" +
	"\x13_ble_button2_state3B\x15\n" +
	"\x13_ble_button2_state4B\x11\n" +
	"\x0f_frequency_din1B\x11\n" +
	"\x0f_frequency_din2B\x17\n" +
	"\x15_connectivity_qualityB\x10\n" +
	"\x0e_auto_geofenceB\a\n" +
	"\x05_tripB\x10\n" +
	"\x0e_over_speedingB\x13\n" +
	"\x11_crash_trace_dataB\x18\n" +
	"\x16_blood_alcohol_contentB\t\n" +
	"\a_idlingB\x15\n" +
	"\x13_green_driving_typeB\t\n" +
	"\a_towingB\t\n" +
	"\a_unplugB\x12\n" +
	"\x10_crash_detectionB\x0e\n" +
	"\f_immobilizerB\x16\n" +
	"\x14_green_driving_valueB\n" +
	"\n" +
	"\b_jammingB\t\n" +
	"\a_iccid2B\x1f\n" +
	"\x1d_green_driving_event_durationB\b\n" +
	"\x06_alarmB\x0e\n" +
	"\f_eco_maximumB\x0e\n" +
	"\f_eco_averageB\x0f\n" +
	"\r_eco_durationB\x10\n" +
	"\x0e_driving_stateB\x12\n" +
	"\x10_driving_recordsB\x16\n" +
	"\x14_crash_event_counterB\x0f\n" +
	"\r_gnss_jammingB\x0f\n" +
	"\r_private_modeB\x16\n" +
	"\x14_ignition_on_counterB\x1c\n" +
	"\x1a_motorcycle_fall_detectionB\x06\n" +
	"\x04_vinB\x10\n" +
	"\x0e_number_of_dtcB\x0e\n" +
	"\f_engine_loadB\x16\n" +
	"\x14_coolant_temperatureB\x12\n" +
	"\x10_short_fuel_trimB\x10\n" +
	"\x0e_fuel_pressureB\r\n" +
	"\v_intake_mapB\r\n" +
	"\v_engine_rpmB\x10\n" +
	"\x0e_vehicle_speedB\x11\n" +
	"\x0f_timing_advanceB\x19\n" +
	"\x17_intake_air_temperatureB\x06\n" +
	"\x04_mafB\x14\n" +
	"\x12_throttle_positionB\x1d\n" +
	"\x1b_runtime_since_engine_startB\x1b\n" +
	"\x19_distance_traveled_mil_onB\x1e\n" +
	"\x1c_relative_fuel_rail_pressureB\x1c\n" +
	"\x1a_direct_fuel_rail_pressureB\x10\n" +
	"\x0e_commanded_egrB\f\n" +
	"\n" +
	"_egr_errorB\x15\n" +
	"\x13_fuel_level_percentB\x1d\n" +
	"\x1b_distance_since_codes_clearB\x16\n" +
	"\x14_barometric_pressureB\x19\n" +
	"\x17_control_module_voltageB\x16\n" +
	"\x14_absolute_load_valueB\f\n" +
	"\n" +
	"_fuel_typeB\x1a\n" +
	"\x18_ambient_air_temperatureB\x17\n" +
	"\x15_time_run_with_mil_onB\x1b\n" +
	"\x19_time_since_codes_clearedB\x1e\n" +
	"\x1c_absolute_fuel_rail_pressureB\x1b\n" +
	"\x19_hybrid_battery_pack_lifeB\x19\n" +
	"\x17_engine_oil_temperatureB\x18\n" +
	"\x16_fuel_injection_timingB\x1a\n" +
	"\x18_throttle_position_groupB\x1a\n" +
	"\x18_commanded_equivalence_rB\x14\n" +
	"\x12_intake_map2_bytesB\x18\n" +
	"\x16_hybrid_system_voltageB\x18\n" +
	"\x16_hybrid_system_currentB\x0e\n" +
	"\f_fault_codesB\f\n" +
	"\n" +
	"_fuel_rateB\x18\n" +
	"\x16_obd_oem_total_mileageB\x15\n" +
	"\x13_obd_oem_fuel_levelB\x1d\n" +
	"\x1b_oem_distance_until_serviceB\x1b\n" +
	"\x19_oem_battery_charge_stateB\x1b\n" +
	"\x19_oem_battery_charge_levelB\x19\n" +
	"\x17_oem_remaining_distanceB\x1e\n" +
	"\x1c_oem_battery_state_of_healthB\x1a\n" +
	"\x18_oem_battery_temperatureB\t\n" +
	"\a_beaconB\x1b\n" +
	"\x19_advanced_ble_beacon_dataB\x13\n" +
	"\x11_ble_temperature1B\x13\n" +
	"\x11_ble_temperature2B\x13\n" +
	"\x11_ble_temperature3B\x13\n" +
	"\x11_ble_temperature4B\x0f\n" +
	"\r_ble_battery1B\x0f\n" +
	"\r_ble_battery2B\x0f\n" +
	"\r_ble_battery3B\x0f\n" +
	"\r_ble_battery4B\x10\n" +
	"\x0e_ble_humidity1B\x10\n" +
	"\x0e_ble_humidity2B\x10\n" +
	"\x0e_ble_humidity3B\x10\n" +
	"\x0e_ble_humidity4B\x12\n" +
	"\x10_ble_fuel_level1B\x12\n" +
	"\x10_ble_fuel_level2B\x12\n" +
	"\x10_ble_fuel_level3B\x12\n" +
	"\x10_ble_fuel_level4B\x16\n" +
	"\x14_ble_fuel_frequency1B\x16\n" +
	"\x14_ble_fuel_frequency2B\x16\n" +
	"\x14_ble_fuel_frequency3B\x16\n" +
	"\x14_ble_fuel_frequency4B\x12\n" +
	"\x10_ble_luminosity1B\x12\n" +
	"\x10_ble_luminosity2B\x12\n" +
	"\x10_ble_luminosity3B\x12\n" +
	"\x10_ble_luminosity4B\x0f\n" +
	"\r_ble1_custom1B\x0f\n" +
	"\r_ble1_custom2B\x0f\n" +
	"\r_ble1_custom3B\x0f\n" +
	"\r_ble1_custom4B\x0f\n" +
	"\r_ble1_custom5B\x0f\n" +
	"\r_ble2_custom1B\x0f\n" +
	"\r_ble2_custom2B\x0f\n" +
	"\r_ble2_custom3B\x0f\n" +
	"\r_ble2_custom4B\x0f\n" +
	"\r_ble2_custom5B\x0f\n" +
	"\r_ble3_custom1B\x0f\n" +
	"\r_ble3_custom2B\x0f\n" +
	"\r_ble3_custom3B\x0f\n" +
	"\r_ble3_custom4B\x0f\n" +
	"\r_ble3_custom5B\x0f\n" +
	"\r_ble4_custom1B\x0f\n" +
	"\r_ble4_custom2B\x0f\n" +
	"\r_ble4_custom3B\x0f\n" +
	"\r_ble4_custom4B\x0f\n" +
	"\r_ble4_custom5B\x1d\n" +
	"\x1b_accelerator_pedal_positionB\x10\n" +
	"\x0e_fuel_consumedB\x14\n" +
	"\x12_fuel_level_litersB\x10\n" +
	"\x0e_total_mileageB\x11\n" +
	"\x0f_program_numberB\x0e\n" +
	"\f_module_id8bB\x0f\n" +
	"\r_module_id17bB\x12\n" +
	"\x10_engine_worktimeB\x1a\n" +
	"\x18_engine_worktime_countedB\x18\n" +
	"\x16_total_mileage_countedB\x18\n" +
	"\x16_fuel_consumed_countedB\x17\n" +
	"\x15_adblue_level_percentB\x16\n" +
	"\x14_adblue_level_litersB\r\n" +
	"\v_axle1_loadB\r\n" +
	"\v_axle2_loadB\r\n" +
	"\v_axle3_loadB\r\n" +
	"\v_axle4_loadB\r\n" +
	"\v_axle5_loadB\x16\n" +
	"\x14_control_state_flagsB\x1f\n" +
	"\x1d_agricultural_machinery_flagsB\x12\n" +
	"\x10_harvesting_timeB\x12\n" +
	"\x10_area_of_harvestB\x14\n" +
	"\x12_mowing_efficiencyB\x14\n" +
	"\x12_grain_mown_volumeB\x11\n" +
	"\x0f_grain_moistureB\x16\n" +
	"\x14_harvesting_drum_rpmB\x1c\n" +
	"\x1a_gap_under_harvesting_drumB\x17\n" +
	"\x15_security_state_flagsB$\n" +
	"\"_tachograph_total_vehicle_distanceB\x10\n" +
	"\x0e_trip_distanceB\x1b\n" +
	"\x19_tachograph_vehicle_speedB\x1d\n" +
	"\x1b_tacho_driver_card_presenceB\x11\n" +
	"\x0f_driver1_statesB\x11\n" +
	"\x0f_driver2_statesB\"\n" +
	" _driver1_continuous_driving_timeB\"\n" +
	" _driver2_continuous_driving_timeB\x1a\n" +
	"\x18_driver1_cumulative_timeB\x1a\n" +
	"\x18_driver2_cumulative_timeB%\n" +
	"#_driver1_selected_activity_durationB%\n" +
	"#_driver2_selected_activity_durationB\"\n" +
	" _driver1_cumulative_driving_timeB\"\n" +
	" _driver2_cumulative_driving_timeB\x12\n" +
	"\x10_driver1_id_highB\x11\n" +
	"\x0f_driver1_id_lowB\x12\n" +
	"\x10_driver2_id_highB\x11\n" +
	"\x0f_driver2_id_lowB\x16\n" +
	"\x14_battery_temperatureB\x13\n" +
	"\x11_hv_battery_levelB\r\n" +
	"\v_dtc_faultsB\x0f\n" +
	"\r_slope_of_armB\x12\n" +
	"\x10_rotation_of_armB\x0f\n" +
	"\r_eject_of_armB\"\n" +
	" _horizontal_distance_arm_vehicleB\x1a\n" +
	"\x18_height_arm_above_groundB\f\n" +
	"\n" +
	"_drill_rpmB%\n" +
	"#_amount_of_spread_salt_square_meterB%\n" +
	"#_amount_of_spread_fine_grained_saltB \n" +
	"\x1e_amount_of_coarse_grained_saltB\x19\n" +
	"\x17_amount_of_spread_dimixB*\n" +
	"(_amount_of_spread_coarse_grained_calciumB$\n" +
	"\"_amount_of_spread_calcium_chlorideB#\n" +
	"!_amount_of_spread_sodium_chlorideB&\n" +
	"$_amount_of_spread_magnesium_chlorideB\x1a\n" +
	"\x18_amount_of_spread_gravelB\x18\n" +
	"\x16_amount_of_spread_sandB\x15\n" +
	"\x13_width_pouring_leftB\x16\n" +
	"\x14_width_pouring_rightB\x1e\n" +
	"\x1c_salt_spreader_working_hoursB\x1a\n" +
	"\x18_distance_during_saltingB\x0e\n" +
	"\f_load_weightB\x10\n" +
	"\x0e_retarder_loadB\x0e\n" +
	"\f_cruise_timeB\r\n" +
	"\v_cng_statusB\v\n" +
	"\t_cng_usedB\x14\n" +
	"\x12_cng_level_percentB\f\n" +
	"\n" +
	"_oil_levelB\x1c\n" +
	"\x1a_vehicles_range_on_batteryB$\n" +
	"\"_vehicles_range_on_additional_fuelB\x1a\n" +
	"\x18_security_state_flags_p4B\x19\n" +
	"\x17_control_state_flags_p4B\x1b\n" +
	"\x19_indicator_state_flags_p4B\x1e\n" +
	"\x1c_agricultural_state_flags_p4B\x0e\n" +
	"\f_door_statusB\x15\n" +
	"\x13_engine_temperatureB\x19\n" +
	"\x17_utility_state_flags_p4B\x19\n" +
	"\x17_cistern_state_flags_p4B\v\n" +
	"\t_lng_usedB\x13\n" +
	"\x11_lng_used_countedB\x14\n" +
	"\x12_lng_level_percentB\x0f\n" +
	"\r_lng_level_kgB\x11\n" +
	"\x0f_total_lpg_usedB\x19\n" +
	"\x17_total_lpg_used_countedB\x11\n" +
	"\x0f_lpg_level_procB\x13\n" +
	"\x11_lpg_level_litersB\x0f\n" +
	"\r_ssf_ignitionB\x1b\n" +
	"\x19_ssf_key_in_ignition_lockB\x0e\n" +
	"\f_ssf_webastoB\x15\n" +
	"\x13_ssf_engine_workingB\x18\n" +
	"\x16_ssf_standalone_engineB\x15\n" +
	"\x13_ssf_ready_to_driveB\x1c\n" +
	"\x1a_ssf_engine_working_on_cngB\x10\n" +
	"\x0e_ssf_work_modeB\x0f\n" +
	"\r_ssf_operatorB\x10\n" +
	"\x0e_ssf_interlockB\x19\n" +
	"\x17_ssf_engine_lock_activeB\x1d\n" +
	"\x1b_ssf_request_to_lock_engineB\x1a\n" +
	"\x18_ssf_handbrake_is_activeB\x1a\n" +
	"\x18_ssf_footbrake_is_activeB\x14\n" +
	"\x12_ssf_clutch_pushedB\x1c\n" +
	"\x1a_ssf_hazard_warning_lightsB\x1b\n" +
	"\x19_ssf_front_left_door_openB\x1c\n" +
	"\x1a_ssf_front_right_door_openB\x1a\n" +
	"\x18_ssf_rear_left_door_openB\x1b\n" +
	"\x19_ssf_rear_right_door_openB\x16\n" +
	"\x14_ssf_trunk_door_openB\x18\n" +
	"\x16_ssf_engine_cover_openB\x10\n" +
	"\x0e_ssf_roof_openB\x1c\n" +
	"\x1a_ssf_charging_wire_pluggedB\x17\n" +
	"\x15_ssf_battery_chargingB\x1c\n" +
	"\x1a_ssf_electric_engine_stateB \n" +
	"\x1e_ssf_car_closed_factory_remoteB\x14\n" +
	"\x12_ssf_car_is_closedB\x1d\n" +
	"\x1b_ssf_factory_alarm_actuatedB\x1d\n" +
	"\x1b_ssf_factory_alarm_emulatedB\"\n" +
	" _ssf_signal_close_factory_remoteB!\n" +
	"\x1f_ssf_signal_open_factory_remoteB\x16\n" +
	"\x14_ssf_rearming_signalB'\n" +
	"%_ssf_trunk_door_opened_factory_remoteB\x1a\n" +
	"\x18_ssf_can_module_in_sleepB\x17\n" +
	"\x15_ssf_factory_remote3xB\x14\n" +
	"\x12_ssf_factory_armedB\x1a\n" +
	"\x18_ssf_parking_gear_activeB\x1a\n" +
	"\x18_ssf_reverse_gear_activeB\x1a\n" +
	"\x18_ssf_neutral_gear_activeB\x16\n" +
	"\x14_ssf_drive_is_activeB\"\n" +
	" _ssf_engine_working_on_dual_fuelB\x1c\n" +
	"\x1a_ssf_engine_working_on_lpgB\x15\n" +
	"\x13_csf_parking_lightsB\x19\n" +
	"\x17_csf_dipped_head_lightsB\x1b\n" +
	"\x19_csf_full_beam_headlightsB\x16\n" +
	"\x14_csf_rear_fog_lightsB\x17\n" +
	"\x15_csf_front_fog_lightsB\x1e\n" +
	"\x1c_csf_additional_front_lightsB\x1d\n" +
	"\x1b_csf_additional_rear_lightsB\x13\n" +
	"\x11_csf_light_signalB\x17\n" +
	"\x15_csf_air_conditioningB\x15\n" +
	"\x13_csf_cruise_controlB\x19\n" +
	"\x17_csf_automatic_retarderB\x16\n" +
	"\x14_csf_manual_retarderB \n" +
	"\x1e_csf_drivers_seatbelt_fastenedB&\n" +
	"$_csf_front_drivers_seatbelt_fastenedB%\n" +
	"#_csf_left_drivers_seatbelt_fastenedB&\n" +
	"$_csf_right_drivers_seatbelt_fastenedB'\n" +
	"%_csf_centre_drivers_seatbelt_fastenedB\x1e\n" +
	"\x1c_csf_front_passenger_presentB\n" +
	"\n" +
	"\b_csf_ptoB \n" +
	"\x1e_csf_front_differential_lockedB\x1f\n" +
	"\x1d_csf_rear_differential_lockedB%\n" +
	"#_csf_central_differential4hi_lockedB\"\n" +
	" _csf_rear_differential4lo_lockedB \n" +
	"\x1e_csf_trailer_axle1_lift_activeB \n" +
	"\x1e_csf_trailer_axle2_lift_activeB\x18\n" +
	"\x16_csf_trailer_connectedB!\n" +
	"\x1f_csf_start_stop_system_inactiveB\x1d\n" +
	"\x1b_isf_check_engine_indicatorB\x14\n" +
	"\x12_isf_abs_indicatorB\x14\n" +
	"\x12_isf_esp_indicatorB\x15\n" +
	"\x13_isf_esp_turned_offB\x15\n" +
	"\x13_isf_stop_indicatorB\x1a\n" +
	"\x18_isf_oil_level_indicatorB\x1b\n" +
	"\x19_isf_coolant_liquid_levelB%\n" +
	"#_isf_battery_not_charging_indicatorB!\n" +
	"\x1f_isf_handbrake_system_indicatorB\x17\n" +
	"\x15_isf_airbag_indicatorB\x14\n" +
	"\x12_isf_eps_indicatorB\x18\n" +
	"\x16_isf_warning_indicatorB\x1f\n" +
	"\x1d_isf_lights_failure_indicatorB\"\n" +
	" _isf_low_tire_pressure_indicatorB#\n" +
	"!_isf_wear_of_brake_pads_indicatorB\x1f\n" +
	"\x1d_isf_low_fuel_level_indicatorB%\n" +
	"#_isf_maintenance_required_indicatorB\x1a\n" +
	"\x18_isf_glow_plug_indicatorB\x14\n" +
	"\x12_isf_fap_indicatorB\x14\n" +
	"\x12_isf_epc_indicatorB*\n" +
	"(_isf_clogged_engine_oil_filter_indicatorB(\n" +
	"&_isf_low_engine_oil_pressure_indicatorB0\n" +
	"._isf_too_high_engine_oil_temperature_indicatorB\"\n" +
	" _isf_low_coolant_level_indicatorB4\n" +
	"2_isf_clogged_hydraulic_system_oil_filter_indicatorB.\n" +
	",_isf_hydraulic_system_low_pressure_indicatorB(\n" +
	"&_isf_hydraulic_oil_low_level_indicatorB2\n" +
	"0_isf_hydraulic_system_high_temperature_indicatorB2\n" +
	"0_isf_oil_overflow_in_hydraulic_chamber_indicatorB#\n" +
	"!_isf_clogged_air_filter_indicatorB$\n" +
	"\"_isf_clogged_fuel_filter_indicatorB\x1e\n" +
	"\x1c_isf_water_in_fuel_indicatorB$\n" +
	"\"_asf_grain_tank_is100_percent_fullB#\n" +
	"!_asf_grain_tank_is70_percent_fullB)\n" +
	"'_asf_straw_chopper_speed_below_the_normB\x11\n" +
	"\x0f_usf_spreading2*\xb0\x06\n" +
	"\x05Event\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\x0f\n" +
	"\vIGNITION_ON\x10\x01\x12\x10\n" +
	"\fIGNITION_OFF\x10\x02\x12\f\n" +
	"\bMOVEMENT\x10\x03\x12\b\n" +
	"\x04PLUG\x10\x04\x12\n" +
	"\n" +
	"\x06UNPLUG\x10\x05\x12\n" +
	"\n" +
	"\x06TOWING\x10\x06\x12\v\n" +
	"\aJAMMING\x10\a\x12\x0e\n" +
	"\n" +
	"OVER_SPEED\x10\b\x12\n" +
	"\n" +
	"\x06IDLING\x10\t\x12\x0f\n" +
	"\vLOW_BATTERY\x10\n" +
	"\x12\t\n" +
	"\x05CRASH\x10\v\x12\f\n" +
	"\bHUMIDITY\x10\f\x12\r\n" +
	"\tDOOR_OPEN\x10\r\x12\x14\n" +
	"\x10ENGINE_DOOR_OPEN\x10\x0e\x12\x13\n" +
	"\x0fTRUNK_DOOR_OPEN\x10\x0f\x12\x12\n" +
	"\x0eDIGITAL_INPUT1\x10\x10\x12\x12\n" +
	"\x0eDIGITAL_INPUT2\x10\x11\x12\x12\n" +
	"\x0eDIGITAL_INPUT3\x10\x12\x12\x13\n" +
	"\x0fDIGITAL_OUTPUT1\x10\x13\x12\x13\n" +
	"\x0fDIGITAL_OUTPUT2\x10\x14\x12\x13\n" +
	"\x0fDIGITAL_OUTPUT3\x10\x15\x12\x11\n" +
	"\rANALOG_INPUT1\x10\x16\x12\x11\n" +
	"\rANALOG_INPUT2\x10\x17\x12\x0e\n" +
	"\n" +
	"FOOT_BRAKE\x10\x18\x12\x0f\n" +
	"\vTEMPERATURE\x10\x19\x12\b\n" +
	"\x04FUEL\x10\x1a\x12\x0f\n" +
	"\vCRASH_TRACE\x10\x1b\x12\r\n" +
	"\tDATA_MODE\x10\x1c\x12\a\n" +
	"\x03GSM\x10\x1d\x12\x0e\n" +
	"\n" +
	"SLEEP_MODE\x10\x1e\x12\b\n" +
	"\x04GNSS\x10\x1f\x12\a\n" +
	"\x03GPS\x10 \x12\x14\n" +
	"\x10EXTERNAL_VOLTAGE\x10!\x12\t\n" +
	"\x05SPEED\x10\"\x12\x13\n" +
	"\x0fBATTERY_VOLTAGE\x10#\x12\x13\n" +
	"\x0fBATTERY_CURRENT\x10$\x12\t\n" +
	"\x05TRIPS\x10%\x12\f\n" +
	"\bODOMETER\x10&\x12\n" +
	"\n" +
	"\x06AXIS_X\x10'\x12\n" +
	"\n" +
	"\x06AXIS_Y\x10(\x12\n" +
	"\n" +
	"\x06AXIS_Z\x10)\x12\r\n" +
	"\tSD_STATUS\x10*\x12\x1f\n" +
	"\x1bACCELERATION_PEDAL_POSITION\x10+\x12\x0e\n" +
	"\n" +
	"FUEL_LEVEL\x10,\x12\a\n" +
	"\x03DTC\x10-\x12\v\n" +
	"\aDRIVING\x10.\x12\x16\n" +
	"\x12HARSH_ACCELERATION\x10/\x12\x11\n" +
	"\rHARSH_BRAKING\x100\x12\x10\n" +
	"\fHARSH_CORNER\x101\x12\b\n" +
	"\x04FALL\x102BD\n" +
	"\x19com.fatehan.navzy.packetsP\x01Z%github.com/fatehan-navzy/strc/packetsb\x06proto3"

var (
	file_packets_packets_proto_rawDescOnce sync.Once
	file_packets_packets_proto_rawDescData []byte
)

func file_packets_packets_proto_rawDescGZIP() []byte {
	file_packets_packets_proto_rawDescOnce.Do(func() {
		file_packets_packets_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_packets_packets_proto_rawDesc), len(file_packets_packets_proto_rawDesc)))
	})
	return file_packets_packets_proto_rawDescData
}

var file_packets_packets_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_packets_packets_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_packets_packets_proto_goTypes = []any{
	(Event)(0),                    // 0: com.navzy.packets.Event
	(Result_PacketType)(0),        // 1: com.navzy.packets.Result.PacketType
	(*Result)(nil),                // 2: com.navzy.packets.Result
	(*Task)(nil),                  // 3: com.navzy.packets.Task
	(*Client)(nil),                // 4: com.navzy.packets.Client
	(*Data)(nil),                  // 5: com.navzy.packets.Data
	(*Packet)(nil),                // 6: com.navzy.packets.Packet
	(*Compact)(nil),               // 7: com.navzy.packets.Compact
	nil,                           // 8: com.navzy.packets.Compact.GeoFenceEntry
	(*devices.Device)(nil),        // 9: com.navzy.devices.Device
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_packets_packets_proto_depIdxs = []int32{
	1,  // 0: com.navzy.packets.Result.Type:type_name -> com.navzy.packets.Result.PacketType
	6,  // 1: com.navzy.packets.Result.data:type_name -> com.navzy.packets.Packet
	9,  // 2: com.navzy.packets.Task.device:type_name -> com.navzy.devices.Device
	6,  // 3: com.navzy.packets.Task.packet:type_name -> com.navzy.packets.Packet
	4,  // 4: com.navzy.packets.Task.client:type_name -> com.navzy.packets.Client
	10, // 5: com.navzy.packets.Data.received:type_name -> google.protobuf.Timestamp
	6,  // 6: com.navzy.packets.Data.packet:type_name -> com.navzy.packets.Packet
	10, // 7: com.navzy.packets.Packet.datetime:type_name -> google.protobuf.Timestamp
	7,  // 8: com.navzy.packets.Packet.compact:type_name -> com.navzy.packets.Compact
	0,  // 9: com.navzy.packets.Packet.events:type_name -> com.navzy.packets.Event
	8,  // 10: com.navzy.packets.Compact.geo_fence:type_name -> com.navzy.packets.Compact.GeoFenceEntry
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_packets_packets_proto_init() }
func file_packets_packets_proto_init() {
	if File_packets_packets_proto != nil {
		return
	}
	file_packets_packets_proto_msgTypes[4].OneofWrappers = []any{}
	file_packets_packets_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_packets_packets_proto_rawDesc), len(file_packets_packets_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_packets_packets_proto_goTypes,
		DependencyIndexes: file_packets_packets_proto_depIdxs,
		EnumInfos:         file_packets_packets_proto_enumTypes,
		MessageInfos:      file_packets_packets_proto_msgTypes,
	}.Build()
	File_packets_packets_proto = out.File
	file_packets_packets_proto_goTypes = nil
	file_packets_packets_proto_depIdxs = nil
}
