// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/services.proto

package services

import (
	context "context"
	devices "github.com/fatehan-navzy/strc/devices"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NavzyService_DeviceCreate_FullMethodName = "/navzy.NavzyService/DeviceCreate"
	NavzyService_PacketIndex_FullMethodName  = "/navzy.NavzyService/PacketIndex"
)

// NavzyServiceClient is the client API for NavzyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NavzyServiceClient interface {
	DeviceCreate(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error)
	PacketIndex(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*PacketResponse, error)
}

type navzyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNavzyServiceClient(cc grpc.ClientConnInterface) NavzyServiceClient {
	return &navzyServiceClient{cc}
}

func (c *navzyServiceClient) DeviceCreate(ctx context.Context, in *devices.Device, opts ...grpc.CallOption) (*devices.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(devices.Device)
	err := c.cc.Invoke(ctx, NavzyService_DeviceCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *navzyServiceClient) PacketIndex(ctx context.Context, in *PacketRequest, opts ...grpc.CallOption) (*PacketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PacketResponse)
	err := c.cc.Invoke(ctx, NavzyService_PacketIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NavzyServiceServer is the server API for NavzyService service.
// All implementations must embed UnimplementedNavzyServiceServer
// for forward compatibility.
type NavzyServiceServer interface {
	DeviceCreate(context.Context, *devices.Device) (*devices.Device, error)
	PacketIndex(context.Context, *PacketRequest) (*PacketResponse, error)
	mustEmbedUnimplementedNavzyServiceServer()
}

// UnimplementedNavzyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNavzyServiceServer struct{}

func (UnimplementedNavzyServiceServer) DeviceCreate(context.Context, *devices.Device) (*devices.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceCreate not implemented")
}
func (UnimplementedNavzyServiceServer) PacketIndex(context.Context, *PacketRequest) (*PacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PacketIndex not implemented")
}
func (UnimplementedNavzyServiceServer) mustEmbedUnimplementedNavzyServiceServer() {}
func (UnimplementedNavzyServiceServer) testEmbeddedByValue()                      {}

// UnsafeNavzyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NavzyServiceServer will
// result in compilation errors.
type UnsafeNavzyServiceServer interface {
	mustEmbedUnimplementedNavzyServiceServer()
}

func RegisterNavzyServiceServer(s grpc.ServiceRegistrar, srv NavzyServiceServer) {
	// If the following call pancis, it indicates UnimplementedNavzyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NavzyService_ServiceDesc, srv)
}

func _NavzyService_DeviceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(devices.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavzyServiceServer).DeviceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NavzyService_DeviceCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavzyServiceServer).DeviceCreate(ctx, req.(*devices.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _NavzyService_PacketIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavzyServiceServer).PacketIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NavzyService_PacketIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavzyServiceServer).PacketIndex(ctx, req.(*PacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NavzyService_ServiceDesc is the grpc.ServiceDesc for NavzyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NavzyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "navzy.NavzyService",
	HandlerType: (*NavzyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceCreate",
			Handler:    _NavzyService_DeviceCreate_Handler,
		},
		{
			MethodName: "PacketIndex",
			Handler:    _NavzyService_PacketIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/services.proto",
}
