// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/services.proto

package services

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeviceExportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceExportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceExportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceExportResponseMultiError, or nil if none found.
func (m *DeviceExportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceExportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Encoded

	if len(errors) > 0 {
		return DeviceExportResponseMultiError(errors)
	}

	return nil
}

// DeviceExportResponseMultiError is an error wrapping multiple validation
// errors returned by DeviceExportResponse.ValidateAll() if the designated
// constraints aren't met.
type DeviceExportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceExportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceExportResponseMultiError) AllErrors() []error { return m }

// DeviceExportResponseValidationError is the validation error returned by
// DeviceExportResponse.Validate if the designated constraints aren't met.
type DeviceExportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceExportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceExportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceExportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceExportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceExportResponseValidationError) ErrorName() string {
	return "DeviceExportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceExportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceExportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceExportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceExportResponseValidationError{}

// Validate checks the field values on DeviceExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceExportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceExportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceExportRequestMultiError, or nil if none found.
func (m *DeviceExportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceExportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeviceExportRequestMultiError(errors)
	}

	return nil
}

// DeviceExportRequestMultiError is an error wrapping multiple validation
// errors returned by DeviceExportRequest.ValidateAll() if the designated
// constraints aren't met.
type DeviceExportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceExportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceExportRequestMultiError) AllErrors() []error { return m }

// DeviceExportRequestValidationError is the validation error returned by
// DeviceExportRequest.Validate if the designated constraints aren't met.
type DeviceExportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceExportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceExportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceExportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceExportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceExportRequestValidationError) ErrorName() string {
	return "DeviceExportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceExportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceExportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceExportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceExportRequestValidationError{}

// Validate checks the field values on DeviceImportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceImportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceImportRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceImportRequestMultiError, or nil if none found.
func (m *DeviceImportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceImportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Encoded

	if len(errors) > 0 {
		return DeviceImportRequestMultiError(errors)
	}

	return nil
}

// DeviceImportRequestMultiError is an error wrapping multiple validation
// errors returned by DeviceImportRequest.ValidateAll() if the designated
// constraints aren't met.
type DeviceImportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceImportRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceImportRequestMultiError) AllErrors() []error { return m }

// DeviceImportRequestValidationError is the validation error returned by
// DeviceImportRequest.Validate if the designated constraints aren't met.
type DeviceImportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceImportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceImportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceImportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceImportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceImportRequestValidationError) ErrorName() string {
	return "DeviceImportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceImportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceImportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceImportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceImportRequestValidationError{}

// Validate checks the field values on DeviceImportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceImportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceImportResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceImportResponseMultiError, or nil if none found.
func (m *DeviceImportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceImportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceImportResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceImportResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceImportResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceImportResponseMultiError(errors)
	}

	return nil
}

// DeviceImportResponseMultiError is an error wrapping multiple validation
// errors returned by DeviceImportResponse.ValidateAll() if the designated
// constraints aren't met.
type DeviceImportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceImportResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceImportResponseMultiError) AllErrors() []error { return m }

// DeviceImportResponseValidationError is the validation error returned by
// DeviceImportResponse.Validate if the designated constraints aren't met.
type DeviceImportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceImportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceImportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceImportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceImportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceImportResponseValidationError) ErrorName() string {
	return "DeviceImportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceImportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceImportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceImportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceImportResponseValidationError{}

// Validate checks the field values on DeviceStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceStatusRequestMultiError, or nil if none found.
func (m *DeviceStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeviceStatusRequestMultiError(errors)
	}

	return nil
}

// DeviceStatusRequestMultiError is an error wrapping multiple validation
// errors returned by DeviceStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type DeviceStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStatusRequestMultiError) AllErrors() []error { return m }

// DeviceStatusRequestValidationError is the validation error returned by
// DeviceStatusRequest.Validate if the designated constraints aren't met.
type DeviceStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStatusRequestValidationError) ErrorName() string {
	return "DeviceStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStatusRequestValidationError{}

// Validate checks the field values on DeviceStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceStatusResponseMultiError, or nil if none found.
func (m *DeviceStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cost

	// no validation rules for Records

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceStatusResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceStatusResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceStatusResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeviceStatusResponseMultiError(errors)
	}

	return nil
}

// DeviceStatusResponseMultiError is an error wrapping multiple validation
// errors returned by DeviceStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type DeviceStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceStatusResponseMultiError) AllErrors() []error { return m }

// DeviceStatusResponseValidationError is the validation error returned by
// DeviceStatusResponse.Validate if the designated constraints aren't met.
type DeviceStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceStatusResponseValidationError) ErrorName() string {
	return "DeviceStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceStatusResponseValidationError{}

// Validate checks the field values on PacketRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PacketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PacketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PacketRequestMultiError, or
// nil if none found.
func (m *PacketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PacketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PacketRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PacketRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PacketRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PacketRequestMultiError(errors)
	}

	return nil
}

// PacketRequestMultiError is an error wrapping multiple validation errors
// returned by PacketRequest.ValidateAll() if the designated constraints
// aren't met.
type PacketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PacketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PacketRequestMultiError) AllErrors() []error { return m }

// PacketRequestValidationError is the validation error returned by
// PacketRequest.Validate if the designated constraints aren't met.
type PacketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketRequestValidationError) ErrorName() string { return "PacketRequestValidationError" }

// Error satisfies the builtin error interface
func (e PacketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketRequestValidationError{}

// Validate checks the field values on PacketResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PacketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PacketResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PacketResponseMultiError,
// or nil if none found.
func (m *PacketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PacketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PacketResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PacketResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PacketResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PacketResponseMultiError(errors)
	}

	return nil
}

// PacketResponseMultiError is an error wrapping multiple validation errors
// returned by PacketResponse.ValidateAll() if the designated constraints
// aren't met.
type PacketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PacketResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PacketResponseMultiError) AllErrors() []error { return m }

// PacketResponseValidationError is the validation error returned by
// PacketResponse.Validate if the designated constraints aren't met.
type PacketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketResponseValidationError) ErrorName() string { return "PacketResponseValidationError" }

// Error satisfies the builtin error interface
func (e PacketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketResponseValidationError{}

// Validate checks the field values on PacketRequest_DevicePacketRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PacketRequest_DevicePacketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PacketRequest_DevicePacketRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PacketRequest_DevicePacketRequestMultiError, or nil if none found.
func (m *PacketRequest_DevicePacketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PacketRequest_DevicePacketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PacketRequest_DevicePacketRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PacketRequest_DevicePacketRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PacketRequest_DevicePacketRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DynamicKey

	if len(errors) > 0 {
		return PacketRequest_DevicePacketRequestMultiError(errors)
	}

	return nil
}

// PacketRequest_DevicePacketRequestMultiError is an error wrapping multiple
// validation errors returned by
// PacketRequest_DevicePacketRequest.ValidateAll() if the designated
// constraints aren't met.
type PacketRequest_DevicePacketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PacketRequest_DevicePacketRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PacketRequest_DevicePacketRequestMultiError) AllErrors() []error { return m }

// PacketRequest_DevicePacketRequestValidationError is the validation error
// returned by PacketRequest_DevicePacketRequest.Validate if the designated
// constraints aren't met.
type PacketRequest_DevicePacketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketRequest_DevicePacketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketRequest_DevicePacketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketRequest_DevicePacketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketRequest_DevicePacketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketRequest_DevicePacketRequestValidationError) ErrorName() string {
	return "PacketRequest_DevicePacketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PacketRequest_DevicePacketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacketRequest_DevicePacketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketRequest_DevicePacketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketRequest_DevicePacketRequestValidationError{}

// Validate checks the field values on PacketResponse_DevicePacketResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PacketResponse_DevicePacketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PacketResponse_DevicePacketResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PacketResponse_DevicePacketResponseMultiError, or nil if none found.
func (m *PacketResponse_DevicePacketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PacketResponse_DevicePacketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DynamicKey

	if all {
		switch v := interface{}(m.GetReceivedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PacketResponse_DevicePacketResponseValidationError{
					field:  "ReceivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PacketResponse_DevicePacketResponseValidationError{
					field:  "ReceivedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReceivedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PacketResponse_DevicePacketResponseValidationError{
				field:  "ReceivedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Packets

	if len(errors) > 0 {
		return PacketResponse_DevicePacketResponseMultiError(errors)
	}

	return nil
}

// PacketResponse_DevicePacketResponseMultiError is an error wrapping multiple
// validation errors returned by
// PacketResponse_DevicePacketResponse.ValidateAll() if the designated
// constraints aren't met.
type PacketResponse_DevicePacketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PacketResponse_DevicePacketResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PacketResponse_DevicePacketResponseMultiError) AllErrors() []error { return m }

// PacketResponse_DevicePacketResponseValidationError is the validation error
// returned by PacketResponse_DevicePacketResponse.Validate if the designated
// constraints aren't met.
type PacketResponse_DevicePacketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PacketResponse_DevicePacketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PacketResponse_DevicePacketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PacketResponse_DevicePacketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PacketResponse_DevicePacketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PacketResponse_DevicePacketResponseValidationError) ErrorName() string {
	return "PacketResponse_DevicePacketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PacketResponse_DevicePacketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPacketResponse_DevicePacketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PacketResponse_DevicePacketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PacketResponse_DevicePacketResponseValidationError{}
